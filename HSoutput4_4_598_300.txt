class DalaranMage ( MinionCard ) : § def __init__ ( self ) : § super ( ) . __init__ ( "Dalaran Mage", 3, CHARACTER_CLASS . ALL, CARD_RARITY . COMMON ) § § def create_minion ( self, player ) : § return Minion ( 4, 7, 6 ) § pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad
class LostTallstrider ( MinionCard ) : § def __init__ ( self ) : § super ( ) . __init__ ( "Lost Tallstrider", 4, CHARACTER_CLASS . ALL, CARD_RARITY . COMMON ) § § def create_minion ( self, player ) : § return Minion ( 5, 5 ) § pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad
class Shieldmaiden ( MinionCard ) : § def __init__ ( self ) : § super ( ) . __init__ ( "Shieldmaiden", 6, CHARACTER_CLASS . ALL, CARD_RARITY . COMMON, battlecry=Battlecry ( Give ( ChangeHealth ( 3 ) ) , MinionSelector ( picker=UserPicker ( ) ) ) ) § § def create_minion ( self, player ) : § return Minion ( 5, 3 ) § pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad
class StormforgedAxe ( WeaponCard ) : § def __init__ ( self ) : § super ( ) . __init__ ( "Stormforged Axe", 2, CHARACTER_CLASS . WARRIOR, CARD_RARITY . FREE ) § § def create_weapon ( self, player ) : § return Weapon ( 2, 3 ) § pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad
class SeaGiant ( MinionCard ) : § def __init__ ( self ) : § super ( ) . __init__ ( "Sea Giant", 10, CHARACTER_CLASS . ALL, CARD_RARITY . COMMON, battlecry=Battlecry ( Give ( [Buff ( ChangeAttack ( Count ( MinionSelector ( None, BothPlayer ( ) ) ) ) , Buff ( ChangeHealth ( Count ( MinionSelector ( MinionHasDeathrattle ( ) ) , EnemyPlayer ( ) ) ) ) ) ] ) § § def create_minion ( self, player ) : § return Minion ( 4, 4 ) § pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad
class Darkbomb ( SpellCard ) : § def __init__ ( self ) : § super ( ) . __init__ ( "Darkbomb", 2, CHARACTER_CLASS . WARLOCK, CARD_RARITY . FREE, target_func=hearthbreaker . targeting . find_spell_target ) § § def use ( self, player, game ) : § super ( ) . use ( player, game ) § self . target . damage ( player . effective_spell_damage ( 3 ) , self ) § pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad
class WildGrowth ( SpellCard ) : § def __init__ ( self ) : § super ( ) . __init__ ( "Ancestral Knowledge", 2, CHARACTER_CLASS . DRUID, CARD_RARITY . COMMON, target_func=hearthbreaker . targeting . find_minion_spell_target ) § § def use ( self, player, game ) : § super ( ) . use ( player, game ) § self . target . add_buff ( Buff ( ChangeAttack ( 5 ) ) ) § pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad
class FinkleEinhorn ( MinionCard ) : § def __init__ ( self ) : § super ( ) . __init__ ( 3 and target . ALL, CARD_RARITY . FREE ) § § def create_minion ( self, player ) : § return Minion ( 3, 3 ) § pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad
class Soulfire ( SpellCard ) : § def __init__ ( self ) : § super ( ) . __init__ ( "Soulfire", 1, CHARACTER_CLASS . WARLOCK, CARD_RARITY . COMMON, target_func=hearthbreaker . targeting . find_spell_target ) § § def use ( self, player, game ) : § super ( ) . use ( player, game ) § if player . cards_played > 0: § self . target . damage ( player . effective_spell_damage ( 3 ) , self ) § else: § self . target . damage ( player . effective_spell_damage ( 1 ) , self ) § pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad
class Resurrect ( SpellCard ) : § def __init__ ( self ) : § super ( ) . __init__ ( 3, CHARACTER_CLASS . MAGE, CARD_RARITY . FREE ) § § def use ( self, player, game ) : § super ( ) . use ( player, game ) § for i in range ( 0, 2 ) : § MirrorImageMinion ( ) . summon ( player, game, len ( player . minions ) ) § § def can_use ( self, player, game ) : § return super ( ) . can_use ( player, game ) and len ( player . minions ) < 7 § pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad
class SearingTotem ( MinionCard ) : § def __init__ ( self ) : § super ( ) . __init__ ( "Searing Totem", 1, CHARACTER_CLASS . SHAMAN, CARD_RARITY . FREE, False, MINION_TYPE . TOTEM ) § § def create_minion ( self, player ) : § return Minion ( 1, 1 ) § pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad
class Misha ( MinionCard ) : § def __init__ ( self ) : § super ( ) . __init__ ( "Misha", 3, CHARACTER_CLASS . ALL, CARD_RARITY . COMMON, False, minion_type=MINION_TYPE . BEAST ) § § def create_minion ( self, player ) : § return Minion ( 4, 1, taunt=True ) § pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad
class TheBlackKnight ( MinionCard ) : § def __init__ ( self ) : § super ( ) . __init__ ( "The Black Knight", 5, CHARACTER_CLASS . ALL, CARD_RARITY . COMMON, battlecry=Battlecry ( Damage ( 2 ) , CharacterSelector ( players=BothPlayer ( ) , picker=UserPicker ( ) ) ) ) § § def create_minion ( self, player ) : § return Minion ( 4, 5 ) § pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad
class BloodfenRaptor ( MinionCard ) : § def __init__ ( self ) : § super ( ) . __init__ ( "Arcane Intellect", . ALL, CARD_RARITY . FREE, minion_type=MINION_TYPE . MURLOC ) § § def create_minion ( self, player ) : § return Minion ( 2, 1, charge=True ) § pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad
class WrathOfAirTotem ( MinionCard ) : § def __init__ ( self ) : § super ( ) . __init__ ( "Wrath of Air Totem", 1, CHARACTER_CLASS . SHAMAN, CARD_RARITY . FREE, False, MINION_TYPE . TOTEM ) § § def create_minion ( self, player ) : § return Minion ( 0, 2, spell_damage=1 ) § pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad
class WildGrowth ( SpellCard ) : § def __init__ ( self ) : § super ( ) . __init__ ( "Wild Growth", 2, CHARACTER_CLASS . DRUID, CARD_RARITY . EPIC ) § § def use ( self, player, game ) : § super ( ) . use ( player, game ) § if player . cards_played > 0 and len ( player . minions ) < 10: § player . draw ( ) § pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad
class ArgentHorserider ( MinionCard ) : § def __init__ ( self ) : § super ( ) . __init__ ( "Argent Horserider", 3, CHARACTER_CLASS . ALL, CARD_RARITY . COMMON ) § § def create_minion ( self, player ) : § return Minion ( 2, 2, effects=[Effect ( TurnEnded ( ) , ActionTag ( Give ( [Buff ( ChangeAttack ( 1 ) ) , Buff ( ChangeHealth ( 1 ) ) ] ) , SelfSelector ( ) ) ) ] ) § pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad
class StonesplinterTrogg ( MinionCard ) : § def __init__ ( self ) : § super ( ) . __init__ ( "Stonesplinter Trogg", 2, CHARACTER_CLASS . ALL, CARD_RARITY . COMMON ) § § def create_minion ( self, player ) : § return Minion ( 1, 4, effects=[Effect ( SpellCast ( player=EnemyPlayer ( ) ) , ActionTag ( Give ( ChangeAttack ( 1 ) ) , SelfSelector ( ) ) ) ] ) § pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad
class Cogmaster ( MinionCard ) : § def __init__ ( self ) : § super ( ) . __init__ ( "Cogmaster", 1, CHARACTER_CLASS . ROGUE, CARD_RARITY . EPIC ) § § def create_minion ( self, player ) : § return Minion ( 1, 3, auras=[Aura ( ChangeAttack ( 2 ) , SelfSelector ( ) , GreaterThan ( Count ( MinionSelector ( IsType ( MINION_TYPE . MECH ) ) ) , value=0 ) ) ] ) § pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad
class AncestorsCall ( SpellCard ) : § def __init__ ( self ) : § super ( ) . __init__ ( "Ancestor's Call", 4, CHARACTER_CLASS . MAGE, CARD_RARITY . EPIC ) § § def use ( self, player, game ) : § super ( ) . use ( player, game ) § for minion in player . minions: § if player . cards_played > 0 and len ( player . hand ) < 10: § player . draw ( ) § pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad
class DruidOfTheClaw ( MinionCard ) : § def __init__ ( self ) : § super ( ) . __init__ ( "Druid of the Claw", 5, CHARACTER_CLASS . WARLOCK, CARD_RARITY . COMMON, minion_type=MINION_TYPE . DEMON, battlecry= ( Battlecry ( Give ( [Buff ( ChangeHealth ( 2 ) ) ) , Buff ( ChangeAttack ( 2 ) ) , Buff ( ChangeHealth ( 2 ) ) ] ) , SelfSelector ( ) ) , Effect ( Attack ( ) , ActionTag ( Damage ( 2 ) ) , SelfSelector ( ) ) ) , § pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad
class CallPet ( MinionCard ) : § def __init__ ( self ) : § super ( ) . __init__ ( "Call Pet", 2, CHARACTER_CLASS . ALL, CARD_RARITY . RARE, battlecry=Battlecry ( Draw ( ) , PlayerSelector ( ) ) ) § § def create_minion ( self, player ) : § return Minion ( 3, 3 ) § pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad
class TradePrinceGallywix ( MinionCard ) : § def __init__ ( self ) : § super ( ) . __init__ ( "Trade Prince Gallywix", 6, CHARACTER_CLASS . WARRIOR, CARD_RARITY . LEGENDARY, minion_type=MINION_TYPE . MECH, battlecry=Battlecry ( Give ( [Buff ( ChangeAttack ( 2 ) ) , Buff ( ChangeHealth ( 2 ) ) ] ) , Buff ( Taunt ( ) ) ] ) , MinionSelector ( IsType ( MINION_TYPE . MECH ) ) , picker=UserPicker ( ) ) ) ) § § def create_minion ( self, player ) : § return Minion ( 5, 3 ) § pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad
class MadBomber ( MinionCard ) : § def __init__ ( self ) : § super ( ) . __init__ ( "Mad Bomber", 5, CHARACTER_CLASS . ALL, CARD_RARITY . RARE, battlecry=Battlecry ( Damage ( 1 ) , CharacterSelector ( players=BothPlayer ( ) , picker=RandomPicker ( 3 ) ) ) ) § § def create_minion ( self, player ) : § return Minion ( 5, 3 ) § pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad
class OgreMagi ( MinionCard ) : § def __init__ ( self ) : § super ( ) . __init__ ( "Ogre Magi", 4, CHARACTER_CLASS . ALL, CARD_RARITY . EPIC ) § § def create_minion ( self, player ) : § return Minion ( 1, 4, spell_damage=1 ) § pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad
class PilotedShredder ( MinionCard ) : § def __init__ ( self ) : § super ( ) . __init__ ( "Piloted Shredder", 4, CHARACTER_CLASS . ALL, CARD_RARITY . EPIC, minion_type=MINION_TYPE . MECH ) § § def create_minion ( self, player ) : § return Minion ( 6, 4, deathrattle=Deathrattle ( Summon ( CardQuery ( conditions=[ManaCost ( 2 ) , IsMinion ( ) ) ] ) , PlayerSelector ( ) ) ) § pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad
class AldorPeacekeeper ( MinionCard ) : § def __init__ ( self ) : § super ( ) . __init__ ( "Aldor Peacekeeper", 3, CHARACTER_CLASS . PALADIN, CARD_RARITY . RARE ) § § def create_minion ( self, player ) : § return Minion ( 4, 2, divine_shield=True, taunt=True ) § pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad
class MurlocTidecaller ( MinionCard ) : § def __init__ ( self ) : § super ( ) . __init__ ( "Murloc Tidecaller", 1, CHARACTER_CLASS . SHAMAN, CARD_RARITY . EPIC, minion_type=MINION_TYPE . MURLOC ) § § def create_minion ( self, player ) : § return Minion ( 4, 2, effects=[Effect ( MinionDied ( IsType ( MINION_TYPE . MURLOC ) , player=BothPlayer ( ) ) , ActionTag ( Draw ( ) , PlayerSelector ( ) ) ) ] ) § pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad
class ClockworkGnome ( MinionCard ) : § def __init__ ( self ) : § super ( ) . __init__ ( "Clockwork Gnome", 1, CHARACTER_CLASS . ALL, CARD_RARITY . COMMON, minion_type=MINION_TYPE . DEMON, battlecry=Battlecry ( Give ( [Buff ( ChangeAttack ( 2 ) ) , Buff ( ChangeHealth ( 1 ) ) ] ) , SelfSelector ( ) ) , Battlecry ( Give ( [Buff ( ChangeAttack ( 1 ) ) , Buff ( ChangeHealth ( 1 ) ) ] ) , SelfSelector ( ) ) ) § § def create_minion ( self, player ) : § return Minion ( 3, 3 ) § pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad
class CrazedAlchemist ( MinionCard ) : § def __init__ ( self ) : § super ( ) . __init__ ( "Crazed Alchemist", 2, CHARACTER_CLASS . PRIEST, CARD_RARITY . LEGENDARY, battlecry=Battlecry ( Kill ( ) , MinionSelector ( players=BothPlayer ( ) , picker=UserPicker ( ) ) ) ) § § def create_minion ( self, player ) : § return Minion ( 3, 2 ) § pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad
class ArcaniteReaper ( WeaponCard ) : § def __init__ ( self ) : § super ( ) . __init__ ( "Arcanite Reaper", 4, CHARACTER_CLASS . WARRIOR, CARD_RARITY . COMMON ) § § def create_weapon ( self, player ) : § return Weapon ( 4, 2, effects=[Effect ( CharacterAttack ( IsHero ( ) ) , ActionTag ( Damage ( 2 ) , CharacterSelector ( players=BothPlayer ( ) ) ) ) , taunt=True ) § pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad
class EmperorCobra ( MinionCard ) : § def __init__ ( self ) : § super ( ) . __init__ ( "Emperor Cobra", 3, CHARACTER_CLASS . ALL, CARD_RARITY . LEGENDARY, minion_type=MINION_TYPE . BEAST ) § § def create_minion ( self, player ) : § return Minion ( 6, 2, effects=[Effect ( DidDamage ( ) , ActionTag ( Kill ( ) , TargetSelector ( IsMinion ( ) ) ) ) ] ) § pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad
class AncientOfWar ( MinionCard ) : § def __init__ ( self ) : § super ( ) . __init__ ( "Ancient Watcher", 2, CHARACTER_CLASS . ALL, CARD_RARITY . RARE ) § § def create_minion ( self, player ) : § return Minion ( 3, 5, effects=[Effect ( TurnEnded ( ) , ActionTag ( Give ( [Buff ( ChangeAttack ( 2 ) ) , Buff ( ChangeHealth ( 2 ) ) ] ) , SelfSelector ( ) ) ) ] ) § pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad
class DreadInfernal ( MinionCard ) : § def __init__ ( self ) : § super ( ) . __init__ ( "Dread Infernal", 4, CHARACTER_CLASS . WARLOCK, CARD_RARITY . COMMON, minion_type=MINION_TYPE . DEMON ) § § def create_minion ( self, player ) : § return Minion ( 4, 3, deathrattle=Deathrattle ( AddCard ( CardQuery ( source=CARD_SOURCE . LIST, source_list=spare_part_list ) ) , PlayerSelector ( ) ) ) § pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad
class Nefarian ( MinionCard ) : § def __init__ ( self ) : § super ( ) . __init__ ( "Nefarian", 9, CHARACTER_CLASS . ALL, CARD_RARITY . LEGENDARY, minion_type=MINION_TYPE . DRAGON, battlecry=Battlecry ( AddCard ( CardQuery ( conditions=[ IsClass ( ) ) , CardSelector ( ) ) , PlayerSelector ( ) ) ) § § def create_minion ( self, player ) : § return Minion ( 8, 8 ) § pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad
class battlecry=Battlecry ( MinionCard ) : § def __init__ ( self ) : § super ( ) . __init__ ( Give ( ChangeAttack ( 2 ) , CharacterSelector ( EnemyPlayer ( ) , ) , picker=UserPicker ( ) ) ) § § def create_minion ( self, player ) : § return Minion ( 4, 2 ) § pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad
class CairneBloodhoof ( MinionCard ) : § def __init__ ( self ) : § super ( ) . __init__ ( "Cairne Bloodhoof", 6, CHARACTER_CLASS . ALL, CARD_RARITY . LEGENDARY ) § § def create_minion ( self, player ) : § return Minion ( 4, 4, 4 ) § pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad
class ROGUE, ( SpellCard ) : § def __init__ ( self ) : § super ( ) . __init__ ( "Arcane Intellect", 3, CHARACTER_CLASS . ROGUE, CARD_RARITY . RARE ) § § def use ( self, player, game ) : § super ( ) . use ( player, game ) § for minion in copy . copy ( game . other_player . minions ) : § minion . damage ( player . effective_spell_damage ( 2 ) , self ) § pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad
class YseraAwakens ( SpellCard ) : § def __init__ ( self ) : § super ( ) . __init__ ( "Ysera Awakens", 2, CHARACTER_CLASS . WARRIOR, CARD_RARITY . EPIC ) § § def use ( self, player, game ) : § super ( ) . use ( player, game ) § targets = hearthbreaker . targeting . find_enemy_minion_battlecry_target ( player . game, lambda x: True ) § targets = hearthbreaker . cards . minions . hunter . Hound ( ) § targets . append ( player . game . other_player . hero ) § targets = hearthbreaker . cards . minions . minions . hunter . is_minion ( ) § for i in range ( 0, 3 ) : § EOS EOS EOS EOS EOS EOS EOS EOS EOS EOS
class FinickyCloakfield ( SpellCard ) : § def __init__ ( self ) : § super ( ) . __init__ ( "Finicky Cloakfield", 1, CHARACTER_CLASS . ROGUE, CARD_RARITY . COMMON, False, target_func=hearthbreaker . targeting . find_friendly_minion_spell_target ) § § def use ( self, player, game ) : § super ( ) . use ( player, game ) § self . target . add_buff ( BuffUntil ( Stealth ( ) , TurnStarted ( ) ) ) § pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad
class Treant ( MinionCard ) : § def __init__ ( self ) : § super ( ) . __init__ ( "Treant", 1, CHARACTER_CLASS . PALADIN, CARD_RARITY . COMMON ) § § def create_minion ( self, player ) : § return Minion ( 1, 1 ) § pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad
class RARE, ( MinionCard ) : § def __init__ ( self ) : § super ( ) . __init__ ( 5, CHARACTER_CLASS . WARLOCK, CARD_RARITY . RARE, minion_type=MINION_TYPE . DEMON, battlecry=Battlecry ( Damage ( 2 ) , CharacterSelector ( players=BothPlayer ( ) , ) , picker=UserPicker ( ) ) ) § § def create_minion ( self, player ) : § return Minion ( 5, 3 ) § pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad
class Neptulon ( MinionCard ) : § def __init__ ( self ) : § super ( ) . __init__ ( Neptulon 5, CHARACTER_CLASS . SHAMAN, CARD_RARITY . EPIC, choices=[ § Choice ( 2, CHARACTER_CLASS . MECH ) , Give ( [Buff ( ChangeAttack ( 5 ) ) , Buff ( ChangeHealth ( 5 ) ) ] ) , SelfSelector ( ) ) ) § § def create_minion ( self, player ) : § return Minion ( 5, 3 ) § pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad
class Snipe ( SecretCard ) : § def __init__ ( self ) : § super ( ) . __init__ ( "Snipe", 2, CHARACTER_CLASS . HUNTER, CARD_RARITY . COMMON ) § § def activate ( self, player ) : § player . game . current_player . bind ( "character_attack", self . _reveal ) § § def deactivate ( self, player ) : § player . game . current_player . unbind ( "character_attack", self . _reveal ) § § def _reveal ( self, attacker, target ) : § if isinstance ( attacker, Minion ) : § attacker . removed: § attacker . bounce ( ) § attacker . card . add_buff ( Buff ( 2 ) ) § pad pad pad pad pad pad pad pad pad pad pad pad pad pad
class DruidOfTheFlame ( MinionCard ) : § def __init__ ( self ) : § super ( ) . __init__ ( "Druid of the Flame", 3, CHARACTER_CLASS . ALL, CARD_RARITY . COMMON, False ) § § def create_minion ( self, player ) : § return Minion ( 1, 1 ) § pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad
class 2 ( MinionCard ) : § def __init__ ( self ) : § super ( ) . __init__ ( 2, CHARACTER_CLASS . ALL, CARD_RARITY . FREE, minion_type=MINION_TYPE . DRAGON ) § § def create_minion ( self, player ) : § return Minion ( 2, 2 ) § pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad
class Lightbomb ( SpellCard ) : § def __init__ ( self ) : § super ( ) . __init__ ( "Lightbomb", 6, CHARACTER_CLASS . PALADIN, CARD_RARITY . RARE, target_func=hearthbreaker . targeting . find_spell_target ) § § def use ( self, player, game ) : § super ( ) . use ( player, game ) § § self . target . damage ( player . effective_spell_damage ( 6 ) , self ) § player . hero . heal ( player . effective_heal_power ( 5 ) , self ) § pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad
class DreadInfernal ( MinionCard ) : § def __init__ ( self ) : § super ( ) . __init__ ( "Dread Infernal", 6, CHARACTER_CLASS . WARLOCK, CARD_RARITY . COMMON, minion_type=MINION_TYPE . DEMON, battlecry=Battlecry ( Damage ( 1 ) , CharacterSelector ( players=BothPlayer ( ) ) ) ) § § def create_minion ( self, player ) : § return Minion ( 6, 6 ) § pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad
class EtherealArcanist ( MinionCard ) : § def __init__ ( self ) : § super ( ) . __init__ ( "Ethereal Arcanist", 4, CHARACTER_CLASS . MAGE, CARD_RARITY . RARE ) § § def create_minion ( self, player ) : § return Minion ( 3, 3, effects=[Effect ( TurnEnded ( HasSecret ( ) ) , ActionTag ( Give ( ChangeAttack ( 2 ) ) , SelfSelector ( ) ) ) , Effect ( TurnEnded ( ) , ActionTag ( Summon ( Imp ( ) ) , PlayerSelector ( ) ) ) ] ) § pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad
class Shadowboxer ( MinionCard ) : § def __init__ ( self ) : § super ( ) . __init__ ( "Shadowboxer", 2, CHARACTER_CLASS . ALL, CARD_RARITY . RARE ) § § def create_minion ( self, player ) : § return Minion ( 1, 2, effects=[Effect ( MinionSummoned ( IsType ( MINION_TYPE . MECH ) ) , ActionTag ( Give ( ChangeAttack ( 1 ) ) , SelfSelector ( ) ) ) ] ) § pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad
class DireWolfAlpha ( MinionCard ) : § def __init__ ( self ) : § super ( ) . __init__ ( "Dire Wolf Alpha", 2, CHARACTER_CLASS . ALL, CARD_RARITY . RARE ) § § def create_minion ( self, player ) : § return Minion ( 2, 2, auras=[Aura ( ManaChange ( -1 ) , CardSelector ( condition=IsType ( ) ) , value=0 ) ) ] ) § pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad
class SnakeTrap ( SecretCard ) : § def __init__ ( self ) : § super ( ) . __init__ ( "Snake Trap", 2, CHARACTER_CLASS . HUNTER, CARD_RARITY . RARE ) § § def activate ( self, player ) : § player . game . current_player . bind ( "character_attack", self . _reveal ) § § def deactivate ( self, player ) : § player . game . current_player . unbind ( "character_attack", self . _reveal ) § § def _reveal ( self, attacker, target ) : § if isinstance ( target, Minion ) and not attacker . removed: § attacker . bounce ( ) § pad EOS EOS EOS EOS EOS EOS EOS EOS EOS EOS EOS EOS EOS EOS EOS EOS EOS EOS EOS EOS EOS EOS EOS EOS
class Spellbender ( SecretCard ) : § def __init__ ( self ) : § super ( ) . __init__ ( "Spellbender", 3, CHARACTER_CLASS . PALADIN, CARD_RARITY . COMMON ) § § def _reveal ( self, card, index ) : § if card . is_spell ( ) and len ( self . player . minions ) < 7 and card . target and card . target . is_minion ( ) : § SpellbenderMinion ( ) . summon ( self . player, self . player . game, len ( self . player . minions ) ) § card . target = self . player . minions[-1] § super ( ) . reveal ( ) § § def activate ( self, player ) : § player EOS EOS EOS EOS EOS EOS EOS
class DruidOfTheFlame ( SpellCard ) : § def __init__ ( self ) : § super ( ) . __init__ ( "Druid of the Flame", 3, CHARACTER_CLASS . DRUID, CARD_RARITY . COMMON, target_func=hearthbreaker . targeting . find_minion_spell_target ) § § def use ( self, player, game ) : § super ( ) . use ( player, game ) § § class Buff5 ( ChoiceCard ) : § def __init__ ( self ) : § super ( ) . __init__ ( "Wrath 1 Damage", 0, 2 ) § else: § self . target . target . DRUID, CARD_RARITY . COMMON, False, target_func=hearthbreaker . targeting . find_minion_spell_target ( ) § § def can_use ( self, player, game ) : § return super ( ) . can_use ( player, game ) and len (
class Avenge ( SecretCard ) : § def __init__ ( self ) : § super ( ) . __init__ ( "Avenge", 1, CHARACTER_CLASS . PALADIN, CARD_RARITY . COMMON ) § § def _reveal ( self, dead_minion, attacker ) : § if len ( [minion for minion in self . player . minions if not minion . dead] ) > 0: § target = self . player . game . random_choice ( self . player . minions ) § target . change_attack ( 3 ) § target . increase_health ( 2 ) § super ( ) . reveal ( ) § § def activate ( self, player ) : § player . bind ( "minion_died", self . _reveal ) § § def deactivate ( self, player ) : § player EOS
class ShadowWordDeath ( SpellCard ) : § def __init__ ( self ) : § super ( ) . __init__ ( "Shadow Word: Death", 3, CHARACTER_CLASS . PRIEST, CARD_RARITY . RARE, target_func=hearthbreaker . targeting . find_enemy_minion_spell_target ) § § def use ( self, player, game ) : § super ( ) . use ( player, game ) § § self . target . die ( self ) § else: § self . target . damage ( player . effective_spell_damage ( 4 ) , self ) § pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad
class SacrificialPact ( SpellCard ) : § def __init__ ( self ) : § super ( ) . __init__ ( "Sacrificial Pact", 0, CHARACTER_CLASS . WARLOCK, CARD_RARITY . RARE, target_func=hearthbreaker . targeting . find_minion_spell_target ) § § def use ( self, player, game ) : § super ( ) . use ( player, game ) § self . target . die ( self ) § player . hero . heal ( player . effective_heal_power ( 5 ) , self ) § pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad
class Snake ( MinionCard ) : § def __init__ ( self ) : § super ( ) . __init__ ( "Snake", 0, CHARACTER_CLASS . MAGE, CARD_RARITY . EPIC ) § § def create_minion ( self, player ) : § return Minion ( 1, 3, taunt=True ) § pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad
class VentureCoMercenary ( MinionCard ) : § def __init__ ( self ) : § super ( ) . __init__ ( "Venture Co . WARLOCK, CARD_RARITY . COMMON, minion_type=MINION_TYPE . PIRATE ) § § def create_minion ( self, player ) : § return Minion ( 4, 8, effects=[Effect ( TurnEnded ( ) , ActionTag ( AddCard ( CardQuery ( source=CARD_SOURCE . LIST, source_list=spare_part_list ) ) , PlayerSelector ( ) ) ) ] ) § pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad
class EarthenRingFarseer ( MinionCard ) : § def __init__ ( self ) : § super ( ) . __init__ ( "Earthen Ring Farseer", 3, CHARACTER_CLASS . ALL, CARD_RARITY . COMMON ) § § def create_minion ( self, player ) : § return Minion ( 3, 2, 3 ) § pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad
class SwordOfJustice ( SpellCard ) : § def __init__ ( self ) : § super ( ) . __init__ ( "Sword of Justice", 3, CHARACTER_CLASS . WARRIOR, CARD_RARITY . RARE ) § § def use ( self, player, game ) : § super ( ) . use ( player, game ) § if player . hero . health <= 12: § self . target . die ( self ) § else: § self . target . change_attack ( 2 ) § pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad
class MurlocScout ( MinionCard ) : § def __init__ ( self ) : § super ( ) . __init__ ( "Murloc Scout", 0, CHARACTER_CLASS . ALL, CARD_RARITY . COMMON, False, minion_type=MINION_TYPE . MURLOC ) § § def create_minion ( self, player ) : § return Minion ( 1, 1 ) § pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad
class Whelp ( MinionCard ) : § def __init__ ( self ) : § super ( ) . __init__ ( "Whelp", 1, CHARACTER_CLASS . ALL, CARD_RARITY . COMMON, False, minion_type=MINION_TYPE . DRAGON ) § § def create_minion ( self, player ) : § return Minion ( 1, 1 ) § pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad
class UnboundElemental ( MinionCard ) : § def __init__ ( self ) : § super ( ) . __init__ ( "Unbound Elemental", 3, CHARACTER_CLASS . ALL, CARD_RARITY . COMMON ) § § def create_minion ( self, player ) : § return Minion ( 1, 4, effects=[Effect ( SpellCast ( player=BothPlayer ( ) ) , ActionTag ( Give ( ChangeAttack ( 1 ) ) , SelfSelector ( ) ) ) , Effect ( SpellCast ( 1 ) , ActionTag ( Give ( ChangeHealth ( 1 ) ) , SelfSelector ( ) ) ) ] ) § pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad
class LeeroyJenkins ( MinionCard ) : § def __init__ ( self ) : § super ( ) . __init__ ( "Leeroy Jenkins", 5, CHARACTER_CLASS . ALL, CARD_RARITY . COMMON, battlecry=Battlecry ( Summon ( Whelp ( ) , 6 ) , PlayerSelector ( ) ) ) § § def create_minion ( self, player ) : § return Minion ( 6, 4 ) § pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad
class DragonsBreath ( SpellCard ) : § def __init__ ( self ) : § super ( ) . __init__ ( "Dragon's Breath", 5, CHARACTER_CLASS . PALADIN, CARD_RARITY . COMMON, target_func=hearthbreaker . targeting . find_spell_target, buffs=[Buff ( ManaChange ( Count ( DeadMinionSelector ( players=BothPlayer ( ) ) ) , -1 ) ) ] ) § § def use ( self, player, game ) : § super ( ) . use ( player, game ) § self . target . damage ( player . effective_spell_damage ( 4 ) , self ) § pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad
