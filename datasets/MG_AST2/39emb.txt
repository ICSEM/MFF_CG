AST
0[CompilationUnit
1[NodeList
2[ClassOrInterfaceDeclaration
3[(?)FinestHour
4[NodeList
5[ConstructorDeclaration
6[(?)FinestHour
7[NodeList
8[Parameter
9[VariableDeclaratorId
10[ClassOrInterfaceType
11[BlockStmt
12[NodeList
13[ExpressionStmt
14[AssignExpr
15[FieldAccessExpr
16[(?)this
17[(?)expansionSetCode
18[(?)"ARB"
19[ExpressionStmt
20[MethodCallExpr
21[(?)this
22[(?)addAbility
23[NodeList
24[ObjectCreationExpr
25[ClassOrInterfaceType
26[ExpressionStmt
27[MethodCallExpr
28[(?)this
29[(?)addAbility
30[NodeList
31[ObjectCreationExpr
32[ClassOrInterfaceType
33[ExplicitConstructorInvocationStmt
34[NodeList
35[(?)ownerId
36[(?)126
37[(?)"Finest Hour"
38[FieldAccessExpr
39[(?)Rarity
40[(?)RARE
41[ArrayCreationExpr
42[NodeList
43[ArrayCreationLevel
44[ClassOrInterfaceType
45[ArrayInitializerExpr
46[NodeList
47[FieldAccessExpr
48[(?)CardType
49[(?)ENCHANTMENT
50[(?)"{2}{G}{W}{U}"
51[ConstructorDeclaration
52[(?)FinestHour
53[NodeList
54[Parameter
55[VariableDeclaratorId
56[ClassOrInterfaceType
57[BlockStmt
58[NodeList
59[ExplicitConstructorInvocationStmt
60[NodeList
61[(?)card
62[@Overridepublic FinestHour copy() { return new FinestHour(this);}
63[NodeList
64[MarkerAnnotationExpr
65[(?)Override
66[ClassOrInterfaceType
67[(?)copy
68[BlockStmt
69[NodeList
70[ReturnStmt
71[ObjectCreationExpr
72[ClassOrInterfaceType
73[NodeList
74[(?)this
75[NodeList
76[ClassOrInterfaceType
77[ClassOrInterfaceDeclaration
78[(?)FinestHourAbility
79[NodeList
80[ConstructorDeclaration
81[(?)FinestHourAbility
82[BlockStmt
83[NodeList
84[ExplicitConstructorInvocationStmt
85[NodeList
86[FieldAccessExpr
87[(?)Zone
88[(?)BATTLEFIELD
89[ObjectCreationExpr
90[ClassOrInterfaceType
91[ConstructorDeclaration
92[(?)FinestHourAbility
93[NodeList
94[Parameter
95[VariableDeclaratorId
96[ClassOrInterfaceType
97[BlockStmt
98[NodeList
99[ExplicitConstructorInvocationStmt
100[NodeList
101[(?)ability
102[@Overridepublic FinestHourAbility copy() { return new FinestHourAbility(this);}
103[NodeList
104[MarkerAnnotationExpr
105[(?)Override
106[ClassOrInterfaceType
107[(?)copy
108[BlockStmt
109[NodeList
110[ReturnStmt
111[ObjectCreationExpr
112[ClassOrInterfaceType
113[NodeList
114[(?)this
115[@Overridepublic boolean checkEventType(GameEvent event, Game game) { return event.getType() == EventType.DECLARED_ATTACKERS;}
116[NodeList
117[MarkerAnnotationExpr
118[(?)Override
119[PrimitiveType
120[(?)checkEventType
121[NodeList
122[Parameter
123[VariableDeclaratorId
124[ClassOrInterfaceType
125[Parameter
126[VariableDeclaratorId
127[ClassOrInterfaceType
128[BlockStmt
129[NodeList
130[ReturnStmt
131[BinaryExpr
132[MethodCallExpr
133[(?)event
134[(?)getType
135[FieldAccessExpr
136[(?)EventType
137[(?)DECLARED_ATTACKERS
138[@Overridepublic boolean checkTrigger(GameEvent event, Game game) { if (game.getActivePlayerId().equals(this.controllerId)) { if (game.getCombat().attacksAlone()) { for (Effect effect : this.getEffects()) { effect.setTargetPointer(new FixedTarget(game.getCombat().getAttackers().get(0))); } return true; } } return false;}
139[NodeList
140[MarkerAnnotationExpr
141[(?)Override
142[PrimitiveType
143[(?)checkTrigger
144[NodeList
145[Parameter
146[VariableDeclaratorId
147[ClassOrInterfaceType
148[Parameter
149[VariableDeclaratorId
150[ClassOrInterfaceType
151[BlockStmt
152[NodeList
153[IfStmt
154[MethodCallExpr
155[MethodCallExpr
156[(?)game
157[(?)getActivePlayerId
158[(?)equals
159[NodeList
160[FieldAccessExpr
161[(?)this
162[(?)controllerId
163[BlockStmt
164[NodeList
165[IfStmt
166[MethodCallExpr
167[MethodCallExpr
168[(?)game
169[(?)getCombat
170[(?)attacksAlone
171[BlockStmt
172[NodeList
173[ForeachStmt
174[VariableDeclarationExpr
175[ClassOrInterfaceType
176[NodeList
177[VariableDeclarator
178[VariableDeclaratorId
179[MethodCallExpr
180[(?)this
181[(?)getEffects
182[BlockStmt
183[NodeList
184[ExpressionStmt
185[MethodCallExpr
186[(?)effect
187[(?)setTargetPointer
188[NodeList
189[ObjectCreationExpr
190[ClassOrInterfaceType
191[NodeList
192[MethodCallExpr
193[MethodCallExpr
194[MethodCallExpr
195[(?)game
196[(?)getCombat
197[(?)getAttackers
198[(?)get
199[NodeList
200[(?)0
201[ReturnStmt
202[(?)true
203[ReturnStmt
204[(?)false
205[@Overridepublic boolean checkInterveningIfClause(Game game) { return game.getTurn().getPhase(TurnPhase.COMBAT).getCount() == 0;}
206[NodeList
207[MarkerAnnotationExpr
208[(?)Override
209[PrimitiveType
210[(?)checkInterveningIfClause
211[NodeList
212[Parameter
213[VariableDeclaratorId
214[ClassOrInterfaceType
215[BlockStmt
216[NodeList
217[ReturnStmt
218[BinaryExpr
219[MethodCallExpr
220[MethodCallExpr
221[MethodCallExpr
222[(?)game
223[(?)getTurn
224[(?)getPhase
225[NodeList
226[FieldAccessExpr
227[(?)TurnPhase
228[(?)COMBAT
229[(?)getCount
230[(?)0
231[@Overridepublic String getRule() { return "Whenever a creature you control attacks alone, if it's the first combat phase of the turn, untap that creature. After this phase, there is an additional combat phase.";}
232[NodeList
233[MarkerAnnotationExpr
234[(?)Override
235[ClassOrInterfaceType
236[(?)getRule
237[BlockStmt
238[NodeList
239[ReturnStmt
240[(?)"Whenever a creature you control attacks alone, if it's the first combat phase of the turn, untap that creature. After this phase, there is an additional combat phase."
241[NodeList
242[ClassOrInterfaceType
243[ClassOrInterfaceDeclaration
244[(?)FinestHourEffect
245[NodeList
246[ConstructorDeclaration
247[(?)FinestHourEffect
248[BlockStmt
249[NodeList
250[ExplicitConstructorInvocationStmt
251[NodeList
252[FieldAccessExpr
253[(?)Outcome
254[(?)Benefit
255[ConstructorDeclaration
256[(?)FinestHourEffect
257[NodeList
258[Parameter
259[VariableDeclaratorId
260[ClassOrInterfaceType
261[BlockStmt
262[NodeList
263[ExplicitConstructorInvocationStmt
264[NodeList
265[(?)effect
266[@Overridepublic FinestHourEffect copy() { return new FinestHourEffect(this);}
267[NodeList
268[MarkerAnnotationExpr
269[(?)Override
270[ClassOrInterfaceType
271[(?)copy
272[BlockStmt
273[NodeList
274[ReturnStmt
275[ObjectCreationExpr
276[ClassOrInterfaceType
277[NodeList
278[(?)this
279[@Overridepublic boolean apply(Game game, Ability source) { Permanent permanent = game.getPermanent(this.getTargetPointer().getFirst(game, source)); if (permanent != null) { permanent.untap(game); game.getState().getTurnMods().add(new TurnMod(source.getControllerId(), TurnPhase.COMBAT, null, false)); return true; } return false;}
280[NodeList
281[MarkerAnnotationExpr
282[(?)Override
283[PrimitiveType
284[(?)apply
285[NodeList
286[Parameter
287[VariableDeclaratorId
288[ClassOrInterfaceType
289[Parameter
290[VariableDeclaratorId
291[ClassOrInterfaceType
292[BlockStmt
293[NodeList
294[ExpressionStmt
295[VariableDeclarationExpr
296[ClassOrInterfaceType
297[NodeList
298[VariableDeclarator
299[VariableDeclaratorId
300[MethodCallExpr
301[(?)game
302[(?)getPermanent
303[NodeList
304[MethodCallExpr
305[MethodCallExpr
306[(?)this
307[(?)getTargetPointer
308[(?)getFirst
309[NodeList
310[(?)game
311[(?)source
312[IfStmt
313[BinaryExpr
314[(?)permanent
315[(?)null
316[BlockStmt
317[NodeList
318[ExpressionStmt
319[MethodCallExpr
320[(?)permanent
321[(?)untap
322[NodeList
323[(?)game
324[ExpressionStmt
325[MethodCallExpr
326[MethodCallExpr
327[MethodCallExpr
328[(?)game
329[(?)getState
330[(?)getTurnMods
331[(?)add
332[NodeList
333[ObjectCreationExpr
334[ClassOrInterfaceType
335[NodeList
336[MethodCallExpr
337[(?)source
338[(?)getControllerId
339[FieldAccessExpr
340[(?)TurnPhase
341[(?)COMBAT
342[(?)null
343[(?)false
344[ReturnStmt
345[(?)true
346[ReturnStmt
347[(?)false
348[NodeList
349[ClassOrInterfaceType
7066->7067
7067->7068
7068->7069
7068->7070
7070->7071
7071->7072
7071->7073
7073->7074
7074->7075
7074->7076
7071->7077
7077->7078
7078->7079
7079->7080
7080->7081
7081->7082
7081->7083
7080->7084
7078->7085
7085->7086
7086->7087
7086->7088
7086->7089
7089->7090
7090->7091
7078->7092
7092->7093
7093->7094
7093->7095
7093->7096
7096->7097
7097->7098
7078->7099
7099->7100
7100->7101
7100->7102
7100->7103
7100->7104
7104->7105
7104->7106
7100->7107
7107->7108
7108->7109
7107->7110
7107->7111
7111->7112
7112->7113
7113->7114
7113->7115
7100->7116
7070->7117
7117->7118
7117->7119
7119->7120
7120->7121
7120->7122
7117->7123
7123->7124
7124->7125
7125->7126
7126->7127
7070->7128
7128->7129
7129->7130
7130->7131
7128->7132
7128->7133
7128->7134
7134->7135
7135->7136
7136->7137
7137->7138
7137->7139
7139->7140
7068->7141
7141->7142
7067->7143
7143->7144
7143->7145
7145->7146
7146->7147
7146->7148
7148->7149
7149->7150
7150->7151
7151->7152
7152->7153
7152->7154
7151->7155
7155->7156
7145->7157
7157->7158
7157->7159
7159->7160
7160->7161
7160->7162
7157->7163
7163->7164
7164->7165
7165->7166
7166->7167
7145->7168
7168->7169
7169->7170
7170->7171
7168->7172
7168->7173
7168->7174
7174->7175
7175->7176
7176->7177
7177->7178
7177->7179
7179->7180
7145->7181
7181->7182
7182->7183
7183->7184
7181->7185
7181->7186
7181->7187
7187->7188
7188->7189
7188->7190
7187->7191
7191->7192
7191->7193
7181->7194
7194->7195
7195->7196
7196->7197
7197->7198
7198->7199
7198->7200
7197->7201
7201->7202
7201->7203
7145->7204
7204->7205
7205->7206
7206->7207
7204->7208
7204->7209
7204->7210
7210->7211
7211->7212
7211->7213
7210->7214
7214->7215
7214->7216
7204->7217
7217->7218
7218->7219
7219->7220
7220->7221
7221->7222
7221->7223
7220->7224
7220->7225
7225->7226
7226->7227
7226->7228
7219->7229
7229->7230
7230->7231
7231->7232
7232->7233
7233->7234
7233->7235
7232->7236
7231->7237
7237->7238
7238->7239
7239->7240
7240->7241
7240->7242
7242->7243
7243->7244
7239->7245
7245->7246
7245->7247
7239->7248
7248->7249
7249->7250
7250->7251
7251->7252
7251->7253
7251->7254
7254->7255
7255->7256
7255->7257
7257->7258
7258->7259
7259->7260
7260->7261
7260->7262
7259->7263
7258->7264
7258->7265
7265->7266
7238->7267
7267->7268
7218->7269
7269->7270
7145->7271
7271->7272
7272->7273
7273->7274
7271->7275
7271->7276
7271->7277
7277->7278
7278->7279
7278->7280
7271->7281
7281->7282
7282->7283
7283->7284
7284->7285
7285->7286
7286->7287
7287->7288
7287->7289
7286->7290
7286->7291
7291->7292
7292->7293
7292->7294
7285->7295
7284->7296
7145->7297
7297->7298
7298->7299
7299->7300
7297->7301
7297->7302
7297->7303
7303->7304
7304->7305
7305->7306
7143->7307
7307->7308
7067->7309
7309->7310
7309->7311
7311->7312
7312->7313
7312->7314
7314->7315
7315->7316
7316->7317
7317->7318
7318->7319
7318->7320
7311->7321
7321->7322
7321->7323
7323->7324
7324->7325
7324->7326
7321->7327
7327->7328
7328->7329
7329->7330
7330->7331
7311->7332
7332->7333
7333->7334
7334->7335
7332->7336
7332->7337
7332->7338
7338->7339
7339->7340
7340->7341
7341->7342
7341->7343
7343->7344
7311->7345
7345->7346
7346->7347
7347->7348
7345->7349
7345->7350
7345->7351
7351->7352
7352->7353
7352->7354
7351->7355
7355->7356
7355->7357
7345->7358
7358->7359
7359->7360
7360->7361
7361->7362
7361->7363
7363->7364
7364->7365
7364->7366
7366->7367
7366->7368
7366->7369
7369->7370
7370->7371
7371->7372
7371->7373
7370->7374
7370->7375
7375->7376
7375->7377
7359->7378
7378->7379
7379->7380
7379->7381
7378->7382
7382->7383
7383->7384
7384->7385
7385->7386
7385->7387
7385->7388
7388->7389
7383->7390
7390->7391
7391->7392
7392->7393
7393->7394
7393->7395
7392->7396
7391->7397
7391->7398
7398->7399
7399->7400
7399->7401
7401->7402
7402->7403
7402->7404
7401->7405
7405->7406
7405->7407
7401->7408
7401->7409
7383->7410
7410->7411
7359->7412
7412->7413
7309->7414
7414->7415
