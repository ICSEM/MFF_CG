AST
836[CompilationUnit
837[NodeList
838[ClassOrInterfaceDeclaration
839[ArchitectsOfWill
840[NodeList
841[ConstructorDeclaration
842[ArchitectsOfWill
843[NodeList
844[Parameter
845[VariableDeclaratorId
846[ClassOrInterfaceType
847[BlockStmt
848[NodeList
849[ExpressionStmt
850[AssignExpr
851[FieldAccessExpr
852[this
853[expansionSetCode
854["ARB"
855[ExpressionStmt
856[MethodCallExpr
857[FieldAccessExpr
858[this
859[subtype
860[add
861[NodeList
862["Human"
863[ExpressionStmt
864[MethodCallExpr
865[FieldAccessExpr
866[this
867[subtype
868[add
869[NodeList
870["Wizard"
871[ExpressionStmt
872[AssignExpr
873[FieldAccessExpr
874[this
875[power
876[ObjectCreationExpr
877[ClassOrInterfaceType
878[NodeList
879[3
880[ExpressionStmt
881[AssignExpr
882[FieldAccessExpr
883[this
884[toughness
885[ObjectCreationExpr
886[ClassOrInterfaceType
887[NodeList
888[3
889[ExpressionStmt
890[VariableDeclarationExpr
891[ClassOrInterfaceType
892[NodeList
893[VariableDeclarator
894[VariableDeclaratorId
895[ObjectCreationExpr
896[ClassOrInterfaceType
897[NodeList
898[ObjectCreationExpr
899[ClassOrInterfaceType
900[false
901[ExpressionStmt
902[MethodCallExpr
903[ability
904[addTarget
905[NodeList
906[ObjectCreationExpr
907[ClassOrInterfaceType
908[ExpressionStmt
909[MethodCallExpr
910[this
911[addAbility
912[NodeList
913[ability
914[ExpressionStmt
915[MethodCallExpr
916[this
917[addAbility
918[NodeList
919[ObjectCreationExpr
920[ClassOrInterfaceType
921[NodeList
922[ObjectCreationExpr
923[ClassOrInterfaceType
924[NodeList
925["{U/B}"
926[ExplicitConstructorInvocationStmt
927[NodeList
928[ownerId
929[17
930["Architects of Will"
931[FieldAccessExpr
932[Rarity
933[COMMON
934[ArrayCreationExpr
935[NodeList
936[ArrayCreationLevel
937[ClassOrInterfaceType
938[ArrayInitializerExpr
939[NodeList
940[FieldAccessExpr
941[CardType
942[ARTIFACT
943[FieldAccessExpr
944[CardType
945[CREATURE
946["{2}{U}{B}"
947[ConstructorDeclaration
948[ArchitectsOfWill
949[NodeList
950[Parameter
951[VariableDeclaratorId
952[ClassOrInterfaceType
953[BlockStmt
954[NodeList
955[ExplicitConstructorInvocationStmt
956[NodeList
957[card
958[@Overridepublic ArchitectsOfWill copy() { return new ArchitectsOfWill(this);}
959[NodeList
960[MarkerAnnotationExpr
961[Override
962[ClassOrInterfaceType
963[copy
964[BlockStmt
965[NodeList
966[ReturnStmt
967[ObjectCreationExpr
968[ClassOrInterfaceType
969[NodeList
970[this
971[NodeList
972[ClassOrInterfaceType
973[ClassOrInterfaceDeclaration
974[ArchitectsOfWillEffect
975[NodeList
976[ConstructorDeclaration
977[ArchitectsOfWillEffect
978[BlockStmt
979[NodeList
980[ExpressionStmt
981[AssignExpr
982[FieldAccessExpr
983[this
984[staticText
985["look at the top three cards of target player's library, then put them back in any order"
986[ExplicitConstructorInvocationStmt
987[NodeList
988[FieldAccessExpr
989[Outcome
990[DrawCard
991[ConstructorDeclaration
992[ArchitectsOfWillEffect
993[NodeList
994[Parameter
995[VariableDeclaratorId
996[ClassOrInterfaceType
997[BlockStmt
998[NodeList
999[ExplicitConstructorInvocationStmt
1000[NodeList
1001[effect
1002[@Overridepublic ArchitectsOfWillEffect copy() { return new ArchitectsOfWillEffect(this);}
1003[NodeList
1004[MarkerAnnotationExpr
1005[Override
1006[ClassOrInterfaceType
1007[copy
1008[BlockStmt
1009[NodeList
1010[ReturnStmt
1011[ObjectCreationExpr
1012[ClassOrInterfaceType
1013[NodeList
1014[this
1015[@Overridepublic boolean apply(Game game, Ability source) { Player controller = game.getPlayer(source.getControllerId()); Player targetPlayer = game.getPlayer(source.getFirstTarget()); if (targetPlayer == null || controller == null) { return false; } Cards cards = new CardsImpl(); int count = Math.min(targetPlayer.getLibrary().size(), 3); for (int i = 0; i < count; i++) { Card card = targetPlayer.getLibrary().removeFromTop(game); if (card != null) { cards.add(card); } } controller.lookAtCards("Architects of Will", cards, game); controller.putCardsOnTopOfLibrary(cards, game, source, true); return true;}
1016[NodeList
1017[MarkerAnnotationExpr
1018[Override
1019[PrimitiveType
1020[apply
1021[NodeList
1022[Parameter
1023[VariableDeclaratorId
1024[ClassOrInterfaceType
1025[Parameter
1026[VariableDeclaratorId
1027[ClassOrInterfaceType
1028[BlockStmt
1029[NodeList
1030[ExpressionStmt
1031[VariableDeclarationExpr
1032[ClassOrInterfaceType
1033[NodeList
1034[VariableDeclarator
1035[VariableDeclaratorId
1036[MethodCallExpr
1037[game
1038[getPlayer
1039[NodeList
1040[MethodCallExpr
1041[source
1042[getControllerId
1043[ExpressionStmt
1044[VariableDeclarationExpr
1045[ClassOrInterfaceType
1046[NodeList
1047[VariableDeclarator
1048[VariableDeclaratorId
1049[MethodCallExpr
1050[game
1051[getPlayer
1052[NodeList
1053[MethodCallExpr
1054[source
1055[getFirstTarget
1056[IfStmt
1057[BinaryExpr
1058[BinaryExpr
1059[targetPlayer
1060[null
1061[BinaryExpr
1062[controller
1063[null
1064[BlockStmt
1065[NodeList
1066[ReturnStmt
1067[false
1068[ExpressionStmt
1069[VariableDeclarationExpr
1070[ClassOrInterfaceType
1071[NodeList
1072[VariableDeclarator
1073[VariableDeclaratorId
1074[ObjectCreationExpr
1075[ClassOrInterfaceType
1076[ExpressionStmt
1077[VariableDeclarationExpr
1078[PrimitiveType
1079[NodeList
1080[VariableDeclarator
1081[VariableDeclaratorId
1082[MethodCallExpr
1083[Math
1084[min
1085[NodeList
1086[MethodCallExpr
1087[MethodCallExpr
1088[targetPlayer
1089[getLibrary
1090[size
1091[3
1092[ForStmt
1093[BinaryExpr
1094[i
1095[count
1096[NodeList
1097[VariableDeclarationExpr
1098[PrimitiveType
1099[NodeList
1100[VariableDeclarator
1101[VariableDeclaratorId
1102[0
1103[NodeList
1104[UnaryExpr
1105[i
1106[BlockStmt
1107[NodeList
1108[ExpressionStmt
1109[VariableDeclarationExpr
1110[ClassOrInterfaceType
1111[NodeList
1112[VariableDeclarator
1113[VariableDeclaratorId
1114[MethodCallExpr
1115[MethodCallExpr
1116[targetPlayer
1117[getLibrary
1118[removeFromTop
1119[NodeList
1120[game
1121[IfStmt
1122[BinaryExpr
1123[card
1124[null
1125[BlockStmt
1126[NodeList
1127[ExpressionStmt
1128[MethodCallExpr
1129[cards
1130[add
1131[NodeList
1132[card
1133[ExpressionStmt
1134[MethodCallExpr
1135[controller
1136[lookAtCards
1137[NodeList
1138["Architects of Will"
1139[cards
1140[game
1141[ExpressionStmt
1142[MethodCallExpr
1143[controller
1144[putCardsOnTopOfLibrary
1145[NodeList
1146[cards
1147[game
1148[source
1149[true
1150[ReturnStmt
1151[true
1152[NodeList
1153[ClassOrInterfaceType
836->837
837->838
838->839
838->840
840->841
841->842
841->843
843->844
844->845
844->846
841->847
847->848
848->849
849->850
850->851
851->852
851->853
850->854
848->855
855->856
856->857
857->858
857->859
856->860
856->861
861->862
848->863
863->864
864->865
865->866
865->867
864->868
864->869
869->870
848->871
871->872
872->873
873->874
873->875
872->876
876->877
876->878
878->879
848->880
880->881
881->882
882->883
882->884
881->885
885->886
885->887
887->888
848->889
889->890
890->891
890->892
892->893
893->894
893->895
895->896
895->897
897->898
898->899
897->900
848->901
901->902
902->903
902->904
902->905
905->906
906->907
848->908
908->909
909->910
909->911
909->912
912->913
848->914
914->915
915->916
915->917
915->918
918->919
919->920
919->921
921->922
922->923
922->924
924->925
848->926
926->927
927->928
927->929
927->930
927->931
931->932
931->933
927->934
934->935
935->936
934->937
934->938
938->939
939->940
940->941
940->942
939->943
943->944
943->945
927->946
840->947
947->948
947->949
949->950
950->951
950->952
947->953
953->954
954->955
955->956
956->957
840->958
958->959
959->960
960->961
958->962
958->963
958->964
964->965
965->966
966->967
967->968
967->969
969->970
838->971
971->972
837->973
973->974
973->975
975->976
976->977
976->978
978->979
979->980
980->981
981->982
982->983
982->984
981->985
979->986
986->987
987->988
988->989
988->990
975->991
991->992
991->993
993->994
994->995
994->996
991->997
997->998
998->999
999->1000
1000->1001
975->1002
1002->1003
1003->1004
1004->1005
1002->1006
1002->1007
1002->1008
1008->1009
1009->1010
1010->1011
1011->1012
1011->1013
1013->1014
975->1015
1015->1016
1016->1017
1017->1018
1015->1019
1015->1020
1015->1021
1021->1022
1022->1023
1022->1024
1021->1025
1025->1026
1025->1027
1015->1028
1028->1029
1029->1030
1030->1031
1031->1032
1031->1033
1033->1034
1034->1035
1034->1036
1036->1037
1036->1038
1036->1039
1039->1040
1040->1041
1040->1042
1029->1043
1043->1044
1044->1045
1044->1046
1046->1047
1047->1048
1047->1049
1049->1050
1049->1051
1049->1052
1052->1053
1053->1054
1053->1055
1029->1056
1056->1057
1057->1058
1058->1059
1058->1060
1057->1061
1061->1062
1061->1063
1056->1064
1064->1065
1065->1066
1066->1067
1029->1068
1068->1069
1069->1070
1069->1071
1071->1072
1072->1073
1072->1074
1074->1075
1029->1076
1076->1077
1077->1078
1077->1079
1079->1080
1080->1081
1080->1082
1082->1083
1082->1084
1082->1085
1085->1086
1086->1087
1087->1088
1087->1089
1086->1090
1085->1091
1029->1092
1092->1093
1093->1094
1093->1095
1092->1096
1096->1097
1097->1098
1097->1099
1099->1100
1100->1101
1100->1102
1092->1103
1103->1104
1104->1105
1092->1106
1106->1107
1107->1108
1108->1109
1109->1110
1109->1111
1111->1112
1112->1113
1112->1114
1114->1115
1115->1116
1115->1117
1114->1118
1114->1119
1119->1120
1107->1121
1121->1122
1122->1123
1122->1124
1121->1125
1125->1126
1126->1127
1127->1128
1128->1129
1128->1130
1128->1131
1131->1132
1029->1133
1133->1134
1134->1135
1134->1136
1134->1137
1137->1138
1137->1139
1137->1140
1029->1141
1141->1142
1142->1143
1142->1144
1142->1145
1145->1146
1145->1147
1145->1148
1145->1149
1029->1150
1150->1151
973->1152
1152->1153
