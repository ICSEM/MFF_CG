AST
1231[CompilationUnit
1232[NodeList
1233[ClassOrInterfaceDeclaration
1234[ArsenalThresher
1235[NodeList
1236[ConstructorDeclaration
1237[ArsenalThresher
1238[NodeList
1239[Parameter
1240[VariableDeclaratorId
1241[ClassOrInterfaceType
1242[BlockStmt
1243[NodeList
1244[ExpressionStmt
1245[AssignExpr
1246[FieldAccessExpr
1247[this
1248[expansionSetCode
1249["ARB"
1250[ExpressionStmt
1251[MethodCallExpr
1252[FieldAccessExpr
1253[this
1254[subtype
1255[add
1256[NodeList
1257["Construct"
1258[ExpressionStmt
1259[AssignExpr
1260[FieldAccessExpr
1261[this
1262[power
1263[ObjectCreationExpr
1264[ClassOrInterfaceType
1265[NodeList
1266[2
1267[ExpressionStmt
1268[AssignExpr
1269[FieldAccessExpr
1270[this
1271[toughness
1272[ObjectCreationExpr
1273[ClassOrInterfaceType
1274[NodeList
1275[2
1276[ExpressionStmt
1277[MethodCallExpr
1278[this
1279[addAbility
1280[NodeList
1281[ObjectCreationExpr
1282[ClassOrInterfaceType
1283[NodeList
1284[ObjectCreationExpr
1285[ClassOrInterfaceType
1286["you may reveal any number of other artifact cards from your hand. {this} enters the battlefield with a +1/+1 counter on it for each card revealed this way"
1287[ExplicitConstructorInvocationStmt
1288[NodeList
1289[ownerId
1290[131
1291["Arsenal Thresher"
1292[FieldAccessExpr
1293[Rarity
1294[COMMON
1295[ArrayCreationExpr
1296[NodeList
1297[ArrayCreationLevel
1298[ClassOrInterfaceType
1299[ArrayInitializerExpr
1300[NodeList
1301[FieldAccessExpr
1302[CardType
1303[ARTIFACT
1304[FieldAccessExpr
1305[CardType
1306[CREATURE
1307["{2}{W/B}{U}"
1308[ConstructorDeclaration
1309[ArsenalThresher
1310[NodeList
1311[Parameter
1312[VariableDeclaratorId
1313[ClassOrInterfaceType
1314[BlockStmt
1315[NodeList
1316[ExplicitConstructorInvocationStmt
1317[NodeList
1318[card
1319[@Overridepublic ArsenalThresher copy() { return new ArsenalThresher(this);}
1320[NodeList
1321[MarkerAnnotationExpr
1322[Override
1323[ClassOrInterfaceType
1324[copy
1325[BlockStmt
1326[NodeList
1327[ReturnStmt
1328[ObjectCreationExpr
1329[ClassOrInterfaceType
1330[NodeList
1331[this
1332[NodeList
1333[ClassOrInterfaceType
1334[ClassOrInterfaceDeclaration
1335[ArsenalThresherEffect
1336[NodeList
1337[ConstructorDeclaration
1338[ArsenalThresherEffect
1339[BlockStmt
1340[NodeList
1341[ExplicitConstructorInvocationStmt
1342[NodeList
1343[FieldAccessExpr
1344[Outcome
1345[Benefit
1346[ConstructorDeclaration
1347[ArsenalThresherEffect
1348[NodeList
1349[Parameter
1350[VariableDeclaratorId
1351[ClassOrInterfaceType
1352[BlockStmt
1353[NodeList
1354[ExplicitConstructorInvocationStmt
1355[NodeList
1356[effect
1357[@Overridepublic ArsenalThresherEffect copy() { return new ArsenalThresherEffect(this);}
1358[NodeList
1359[MarkerAnnotationExpr
1360[Override
1361[ClassOrInterfaceType
1362[copy
1363[BlockStmt
1364[NodeList
1365[ReturnStmt
1366[ObjectCreationExpr
1367[ClassOrInterfaceType
1368[NodeList
1369[this
1370[@Overridepublic boolean apply(Game game, Ability source) { Player controller = game.getPlayer(source.getControllerId()); if (controller == null) { return false; } Permanent arsenalThresher = game.getPermanentEntering(source.getSourceId()); FilterArtifactCard filter = new FilterArtifactCard(); filter.add(new AnotherCardPredicate()); if (controller.chooseUse(Outcome.Benefit, "Do you want to reveal other artifacts in your hand?", source, game)) { Cards cards = new CardsImpl(); if (controller.getHand().count(filter, source.getSourceId(), source.getControllerId(), game) > 0) { TargetCardInHand target = new TargetCardInHand(0, Integer.MAX_VALUE, filter); if (controller.choose(Outcome.Benefit, target, source.getSourceId(), game)) { for (UUID uuid : target.getTargets()) { cards.add(controller.getHand().get(uuid, game)); } if (arsenalThresher != null) { controller.revealCards(arsenalThresher.getIdName(), cards, game); arsenalThresher.addCounters(CounterType.P1P1.createInstance(cards.size()), game); } } } return true; } return false;}
1371[NodeList
1372[MarkerAnnotationExpr
1373[Override
1374[PrimitiveType
1375[apply
1376[NodeList
1377[Parameter
1378[VariableDeclaratorId
1379[ClassOrInterfaceType
1380[Parameter
1381[VariableDeclaratorId
1382[ClassOrInterfaceType
1383[BlockStmt
1384[NodeList
1385[ExpressionStmt
1386[VariableDeclarationExpr
1387[ClassOrInterfaceType
1388[NodeList
1389[VariableDeclarator
1390[VariableDeclaratorId
1391[MethodCallExpr
1392[game
1393[getPlayer
1394[NodeList
1395[MethodCallExpr
1396[source
1397[getControllerId
1398[IfStmt
1399[BinaryExpr
1400[controller
1401[null
1402[BlockStmt
1403[NodeList
1404[ReturnStmt
1405[false
1406[ExpressionStmt
1407[VariableDeclarationExpr
1408[ClassOrInterfaceType
1409[NodeList
1410[VariableDeclarator
1411[VariableDeclaratorId
1412[MethodCallExpr
1413[game
1414[getPermanentEntering
1415[NodeList
1416[MethodCallExpr
1417[source
1418[getSourceId
1419[ExpressionStmt
1420[VariableDeclarationExpr
1421[ClassOrInterfaceType
1422[NodeList
1423[VariableDeclarator
1424[VariableDeclaratorId
1425[ObjectCreationExpr
1426[ClassOrInterfaceType
1427[ExpressionStmt
1428[MethodCallExpr
1429[filter
1430[add
1431[NodeList
1432[ObjectCreationExpr
1433[ClassOrInterfaceType
1434[IfStmt
1435[MethodCallExpr
1436[controller
1437[chooseUse
1438[NodeList
1439[FieldAccessExpr
1440[Outcome
1441[Benefit
1442["Do you want to reveal other artifacts in your hand?"
1443[source
1444[game
1445[BlockStmt
1446[NodeList
1447[ExpressionStmt
1448[VariableDeclarationExpr
1449[ClassOrInterfaceType
1450[NodeList
1451[VariableDeclarator
1452[VariableDeclaratorId
1453[ObjectCreationExpr
1454[ClassOrInterfaceType
1455[IfStmt
1456[BinaryExpr
1457[MethodCallExpr
1458[MethodCallExpr
1459[controller
1460[getHand
1461[count
1462[NodeList
1463[filter
1464[MethodCallExpr
1465[source
1466[getSourceId
1467[MethodCallExpr
1468[source
1469[getControllerId
1470[game
1471[0
1472[BlockStmt
1473[NodeList
1474[ExpressionStmt
1475[VariableDeclarationExpr
1476[ClassOrInterfaceType
1477[NodeList
1478[VariableDeclarator
1479[VariableDeclaratorId
1480[ObjectCreationExpr
1481[ClassOrInterfaceType
1482[NodeList
1483[0
1484[FieldAccessExpr
1485[Integer
1486[MAX_VALUE
1487[filter
1488[IfStmt
1489[MethodCallExpr
1490[controller
1491[choose
1492[NodeList
1493[FieldAccessExpr
1494[Outcome
1495[Benefit
1496[target
1497[MethodCallExpr
1498[source
1499[getSourceId
1500[game
1501[BlockStmt
1502[NodeList
1503[ForeachStmt
1504[VariableDeclarationExpr
1505[ClassOrInterfaceType
1506[NodeList
1507[VariableDeclarator
1508[VariableDeclaratorId
1509[MethodCallExpr
1510[target
1511[getTargets
1512[BlockStmt
1513[NodeList
1514[ExpressionStmt
1515[MethodCallExpr
1516[cards
1517[add
1518[NodeList
1519[MethodCallExpr
1520[MethodCallExpr
1521[controller
1522[getHand
1523[get
1524[NodeList
1525[uuid
1526[game
1527[IfStmt
1528[BinaryExpr
1529[arsenalThresher
1530[null
1531[BlockStmt
1532[NodeList
1533[ExpressionStmt
1534[MethodCallExpr
1535[controller
1536[revealCards
1537[NodeList
1538[MethodCallExpr
1539[arsenalThresher
1540[getIdName
1541[cards
1542[game
1543[ExpressionStmt
1544[MethodCallExpr
1545[arsenalThresher
1546[addCounters
1547[NodeList
1548[MethodCallExpr
1549[FieldAccessExpr
1550[CounterType
1551[P1P1
1552[createInstance
1553[NodeList
1554[MethodCallExpr
1555[cards
1556[size
1557[game
1558[ReturnStmt
1559[true
1560[ReturnStmt
1561[false
1562[NodeList
1563[ClassOrInterfaceType
1231->1232
1232->1233
1233->1234
1233->1235
1235->1236
1236->1237
1236->1238
1238->1239
1239->1240
1239->1241
1236->1242
1242->1243
1243->1244
1244->1245
1245->1246
1246->1247
1246->1248
1245->1249
1243->1250
1250->1251
1251->1252
1252->1253
1252->1254
1251->1255
1251->1256
1256->1257
1243->1258
1258->1259
1259->1260
1260->1261
1260->1262
1259->1263
1263->1264
1263->1265
1265->1266
1243->1267
1267->1268
1268->1269
1269->1270
1269->1271
1268->1272
1272->1273
1272->1274
1274->1275
1243->1276
1276->1277
1277->1278
1277->1279
1277->1280
1280->1281
1281->1282
1281->1283
1283->1284
1284->1285
1283->1286
1243->1287
1287->1288
1288->1289
1288->1290
1288->1291
1288->1292
1292->1293
1292->1294
1288->1295
1295->1296
1296->1297
1295->1298
1295->1299
1299->1300
1300->1301
1301->1302
1301->1303
1300->1304
1304->1305
1304->1306
1288->1307
1235->1308
1308->1309
1308->1310
1310->1311
1311->1312
1311->1313
1308->1314
1314->1315
1315->1316
1316->1317
1317->1318
1235->1319
1319->1320
1320->1321
1321->1322
1319->1323
1319->1324
1319->1325
1325->1326
1326->1327
1327->1328
1328->1329
1328->1330
1330->1331
1233->1332
1332->1333
1232->1334
1334->1335
1334->1336
1336->1337
1337->1338
1337->1339
1339->1340
1340->1341
1341->1342
1342->1343
1343->1344
1343->1345
1336->1346
1346->1347
1346->1348
1348->1349
1349->1350
1349->1351
1346->1352
1352->1353
1353->1354
1354->1355
1355->1356
1336->1357
1357->1358
1358->1359
1359->1360
1357->1361
1357->1362
1357->1363
1363->1364
1364->1365
1365->1366
1366->1367
1366->1368
1368->1369
1336->1370
1370->1371
1371->1372
1372->1373
1370->1374
1370->1375
1370->1376
1376->1377
1377->1378
1377->1379
1376->1380
1380->1381
1380->1382
1370->1383
1383->1384
1384->1385
1385->1386
1386->1387
1386->1388
1388->1389
1389->1390
1389->1391
1391->1392
1391->1393
1391->1394
1394->1395
1395->1396
1395->1397
1384->1398
1398->1399
1399->1400
1399->1401
1398->1402
1402->1403
1403->1404
1404->1405
1384->1406
1406->1407
1407->1408
1407->1409
1409->1410
1410->1411
1410->1412
1412->1413
1412->1414
1412->1415
1415->1416
1416->1417
1416->1418
1384->1419
1419->1420
1420->1421
1420->1422
1422->1423
1423->1424
1423->1425
1425->1426
1384->1427
1427->1428
1428->1429
1428->1430
1428->1431
1431->1432
1432->1433
1384->1434
1434->1435
1435->1436
1435->1437
1435->1438
1438->1439
1439->1440
1439->1441
1438->1442
1438->1443
1438->1444
1434->1445
1445->1446
1446->1447
1447->1448
1448->1449
1448->1450
1450->1451
1451->1452
1451->1453
1453->1454
1446->1455
1455->1456
1456->1457
1457->1458
1458->1459
1458->1460
1457->1461
1457->1462
1462->1463
1462->1464
1464->1465
1464->1466
1462->1467
1467->1468
1467->1469
1462->1470
1456->1471
1455->1472
1472->1473
1473->1474
1474->1475
1475->1476
1475->1477
1477->1478
1478->1479
1478->1480
1480->1481
1480->1482
1482->1483
1482->1484
1484->1485
1484->1486
1482->1487
1473->1488
1488->1489
1489->1490
1489->1491
1489->1492
1492->1493
1493->1494
1493->1495
1492->1496
1492->1497
1497->1498
1497->1499
1492->1500
1488->1501
1501->1502
1502->1503
1503->1504
1504->1505
1504->1506
1506->1507
1507->1508
1503->1509
1509->1510
1509->1511
1503->1512
1512->1513
1513->1514
1514->1515
1515->1516
1515->1517
1515->1518
1518->1519
1519->1520
1520->1521
1520->1522
1519->1523
1519->1524
1524->1525
1524->1526
1502->1527
1527->1528
1528->1529
1528->1530
1527->1531
1531->1532
1532->1533
1533->1534
1534->1535
1534->1536
1534->1537
1537->1538
1538->1539
1538->1540
1537->1541
1537->1542
1532->1543
1543->1544
1544->1545
1544->1546
1544->1547
1547->1548
1548->1549
1549->1550
1549->1551
1548->1552
1548->1553
1553->1554
1554->1555
1554->1556
1547->1557
1446->1558
1558->1559
1384->1560
1560->1561
1334->1562
1562->1563
