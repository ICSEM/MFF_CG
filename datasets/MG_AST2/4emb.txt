AST
0[CompilationUnit
1[NodeList
2[ClassOrInterfaceDeclaration
3[(?)ArchitectsOfWill
4[NodeList
5[ConstructorDeclaration
6[(?)ArchitectsOfWill
7[NodeList
8[Parameter
9[VariableDeclaratorId
10[ClassOrInterfaceType
11[BlockStmt
12[NodeList
13[ExpressionStmt
14[AssignExpr
15[FieldAccessExpr
16[(?)this
17[(?)expansionSetCode
18[(?)"ARB"
19[ExpressionStmt
20[MethodCallExpr
21[FieldAccessExpr
22[(?)this
23[(?)subtype
24[(?)add
25[NodeList
26[(?)"Human"
27[ExpressionStmt
28[MethodCallExpr
29[FieldAccessExpr
30[(?)this
31[(?)subtype
32[(?)add
33[NodeList
34[(?)"Wizard"
35[ExpressionStmt
36[AssignExpr
37[FieldAccessExpr
38[(?)this
39[(?)power
40[ObjectCreationExpr
41[ClassOrInterfaceType
42[NodeList
43[(?)3
44[ExpressionStmt
45[AssignExpr
46[FieldAccessExpr
47[(?)this
48[(?)toughness
49[ObjectCreationExpr
50[ClassOrInterfaceType
51[NodeList
52[(?)3
53[ExpressionStmt
54[VariableDeclarationExpr
55[ClassOrInterfaceType
56[NodeList
57[VariableDeclarator
58[VariableDeclaratorId
59[ObjectCreationExpr
60[ClassOrInterfaceType
61[NodeList
62[ObjectCreationExpr
63[ClassOrInterfaceType
64[(?)false
65[ExpressionStmt
66[MethodCallExpr
67[(?)ability
68[(?)addTarget
69[NodeList
70[ObjectCreationExpr
71[ClassOrInterfaceType
72[ExpressionStmt
73[MethodCallExpr
74[(?)this
75[(?)addAbility
76[NodeList
77[(?)ability
78[ExpressionStmt
79[MethodCallExpr
80[(?)this
81[(?)addAbility
82[NodeList
83[ObjectCreationExpr
84[ClassOrInterfaceType
85[NodeList
86[ObjectCreationExpr
87[ClassOrInterfaceType
88[NodeList
89[(?)"{U/B}"
90[ExplicitConstructorInvocationStmt
91[NodeList
92[(?)ownerId
93[(?)17
94[(?)"Architects of Will"
95[FieldAccessExpr
96[(?)Rarity
97[(?)COMMON
98[ArrayCreationExpr
99[NodeList
100[ArrayCreationLevel
101[ClassOrInterfaceType
102[ArrayInitializerExpr
103[NodeList
104[FieldAccessExpr
105[(?)CardType
106[(?)ARTIFACT
107[FieldAccessExpr
108[(?)CardType
109[(?)CREATURE
110[(?)"{2}{U}{B}"
111[ConstructorDeclaration
112[(?)ArchitectsOfWill
113[NodeList
114[Parameter
115[VariableDeclaratorId
116[ClassOrInterfaceType
117[BlockStmt
118[NodeList
119[ExplicitConstructorInvocationStmt
120[NodeList
121[(?)card
122[@Overridepublic ArchitectsOfWill copy() { return new ArchitectsOfWill(this);}
123[NodeList
124[MarkerAnnotationExpr
125[(?)Override
126[ClassOrInterfaceType
127[(?)copy
128[BlockStmt
129[NodeList
130[ReturnStmt
131[ObjectCreationExpr
132[ClassOrInterfaceType
133[NodeList
134[(?)this
135[NodeList
136[ClassOrInterfaceType
137[ClassOrInterfaceDeclaration
138[(?)ArchitectsOfWillEffect
139[NodeList
140[ConstructorDeclaration
141[(?)ArchitectsOfWillEffect
142[BlockStmt
143[NodeList
144[ExpressionStmt
145[AssignExpr
146[FieldAccessExpr
147[(?)this
148[(?)staticText
149[(?)"look at the top three cards of target player's library, then put them back in any order"
150[ExplicitConstructorInvocationStmt
151[NodeList
152[FieldAccessExpr
153[(?)Outcome
154[(?)DrawCard
155[ConstructorDeclaration
156[(?)ArchitectsOfWillEffect
157[NodeList
158[Parameter
159[VariableDeclaratorId
160[ClassOrInterfaceType
161[BlockStmt
162[NodeList
163[ExplicitConstructorInvocationStmt
164[NodeList
165[(?)effect
166[@Overridepublic ArchitectsOfWillEffect copy() { return new ArchitectsOfWillEffect(this);}
167[NodeList
168[MarkerAnnotationExpr
169[(?)Override
170[ClassOrInterfaceType
171[(?)copy
172[BlockStmt
173[NodeList
174[ReturnStmt
175[ObjectCreationExpr
176[ClassOrInterfaceType
177[NodeList
178[(?)this
179[@Overridepublic boolean apply(Game game, Ability source) { Player controller = game.getPlayer(source.getControllerId()); Player targetPlayer = game.getPlayer(source.getFirstTarget()); if (targetPlayer == null || controller == null) { return false; } Cards cards = new CardsImpl(); int count = Math.min(targetPlayer.getLibrary().size(), 3); for (int i = 0; i < count; i++) { Card card = targetPlayer.getLibrary().removeFromTop(game); if (card != null) { cards.add(card); } } controller.lookAtCards("Architects of Will", cards, game); controller.putCardsOnTopOfLibrary(cards, game, source, true); return true;}
180[NodeList
181[MarkerAnnotationExpr
182[(?)Override
183[PrimitiveType
184[(?)apply
185[NodeList
186[Parameter
187[VariableDeclaratorId
188[ClassOrInterfaceType
189[Parameter
190[VariableDeclaratorId
191[ClassOrInterfaceType
192[BlockStmt
193[NodeList
194[ExpressionStmt
195[VariableDeclarationExpr
196[ClassOrInterfaceType
197[NodeList
198[VariableDeclarator
199[VariableDeclaratorId
200[MethodCallExpr
201[(?)game
202[(?)getPlayer
203[NodeList
204[MethodCallExpr
205[(?)source
206[(?)getControllerId
207[ExpressionStmt
208[VariableDeclarationExpr
209[ClassOrInterfaceType
210[NodeList
211[VariableDeclarator
212[VariableDeclaratorId
213[MethodCallExpr
214[(?)game
215[(?)getPlayer
216[NodeList
217[MethodCallExpr
218[(?)source
219[(?)getFirstTarget
220[IfStmt
221[BinaryExpr
222[BinaryExpr
223[(?)targetPlayer
224[(?)null
225[BinaryExpr
226[(?)controller
227[(?)null
228[BlockStmt
229[NodeList
230[ReturnStmt
231[(?)false
232[ExpressionStmt
233[VariableDeclarationExpr
234[ClassOrInterfaceType
235[NodeList
236[VariableDeclarator
237[VariableDeclaratorId
238[ObjectCreationExpr
239[ClassOrInterfaceType
240[ExpressionStmt
241[VariableDeclarationExpr
242[PrimitiveType
243[NodeList
244[VariableDeclarator
245[VariableDeclaratorId
246[MethodCallExpr
247[(?)Math
248[(?)min
249[NodeList
250[MethodCallExpr
251[MethodCallExpr
252[(?)targetPlayer
253[(?)getLibrary
254[(?)size
255[(?)3
256[ForStmt
257[BinaryExpr
258[(?)i
259[(?)count
260[NodeList
261[VariableDeclarationExpr
262[PrimitiveType
263[NodeList
264[VariableDeclarator
265[VariableDeclaratorId
266[(?)0
267[NodeList
268[UnaryExpr
269[(?)i
270[BlockStmt
271[NodeList
272[ExpressionStmt
273[VariableDeclarationExpr
274[ClassOrInterfaceType
275[NodeList
276[VariableDeclarator
277[VariableDeclaratorId
278[MethodCallExpr
279[MethodCallExpr
280[(?)targetPlayer
281[(?)getLibrary
282[(?)removeFromTop
283[NodeList
284[(?)game
285[IfStmt
286[BinaryExpr
287[(?)card
288[(?)null
289[BlockStmt
290[NodeList
291[ExpressionStmt
292[MethodCallExpr
293[(?)cards
294[(?)add
295[NodeList
296[(?)card
297[ExpressionStmt
298[MethodCallExpr
299[(?)controller
300[(?)lookAtCards
301[NodeList
302[(?)"Architects of Will"
303[(?)cards
304[(?)game
305[ExpressionStmt
306[MethodCallExpr
307[(?)controller
308[(?)putCardsOnTopOfLibrary
309[NodeList
310[(?)cards
311[(?)game
312[(?)source
313[(?)true
314[ReturnStmt
315[(?)true
316[NodeList
317[ClassOrInterfaceType
836->837
837->838
838->839
838->840
840->841
841->842
841->843
843->844
844->845
844->846
841->847
847->848
848->849
849->850
850->851
851->852
851->853
850->854
848->855
855->856
856->857
857->858
857->859
856->860
856->861
861->862
848->863
863->864
864->865
865->866
865->867
864->868
864->869
869->870
848->871
871->872
872->873
873->874
873->875
872->876
876->877
876->878
878->879
848->880
880->881
881->882
882->883
882->884
881->885
885->886
885->887
887->888
848->889
889->890
890->891
890->892
892->893
893->894
893->895
895->896
895->897
897->898
898->899
897->900
848->901
901->902
902->903
902->904
902->905
905->906
906->907
848->908
908->909
909->910
909->911
909->912
912->913
848->914
914->915
915->916
915->917
915->918
918->919
919->920
919->921
921->922
922->923
922->924
924->925
848->926
926->927
927->928
927->929
927->930
927->931
931->932
931->933
927->934
934->935
935->936
934->937
934->938
938->939
939->940
940->941
940->942
939->943
943->944
943->945
927->946
840->947
947->948
947->949
949->950
950->951
950->952
947->953
953->954
954->955
955->956
956->957
840->958
958->959
959->960
960->961
958->962
958->963
958->964
964->965
965->966
966->967
967->968
967->969
969->970
838->971
971->972
837->973
973->974
973->975
975->976
976->977
976->978
978->979
979->980
980->981
981->982
982->983
982->984
981->985
979->986
986->987
987->988
988->989
988->990
975->991
991->992
991->993
993->994
994->995
994->996
991->997
997->998
998->999
999->1000
1000->1001
975->1002
1002->1003
1003->1004
1004->1005
1002->1006
1002->1007
1002->1008
1008->1009
1009->1010
1010->1011
1011->1012
1011->1013
1013->1014
975->1015
1015->1016
1016->1017
1017->1018
1015->1019
1015->1020
1015->1021
1021->1022
1022->1023
1022->1024
1021->1025
1025->1026
1025->1027
1015->1028
1028->1029
1029->1030
1030->1031
1031->1032
1031->1033
1033->1034
1034->1035
1034->1036
1036->1037
1036->1038
1036->1039
1039->1040
1040->1041
1040->1042
1029->1043
1043->1044
1044->1045
1044->1046
1046->1047
1047->1048
1047->1049
1049->1050
1049->1051
1049->1052
1052->1053
1053->1054
1053->1055
1029->1056
1056->1057
1057->1058
1058->1059
1058->1060
1057->1061
1061->1062
1061->1063
1056->1064
1064->1065
1065->1066
1066->1067
1029->1068
1068->1069
1069->1070
1069->1071
1071->1072
1072->1073
1072->1074
1074->1075
1029->1076
1076->1077
1077->1078
1077->1079
1079->1080
1080->1081
1080->1082
1082->1083
1082->1084
1082->1085
1085->1086
1086->1087
1087->1088
1087->1089
1086->1090
1085->1091
1029->1092
1092->1093
1093->1094
1093->1095
1092->1096
1096->1097
1097->1098
1097->1099
1099->1100
1100->1101
1100->1102
1092->1103
1103->1104
1104->1105
1092->1106
1106->1107
1107->1108
1108->1109
1109->1110
1109->1111
1111->1112
1112->1113
1112->1114
1114->1115
1115->1116
1115->1117
1114->1118
1114->1119
1119->1120
1107->1121
1121->1122
1122->1123
1122->1124
1121->1125
1125->1126
1126->1127
1127->1128
1128->1129
1128->1130
1128->1131
1131->1132
1029->1133
1133->1134
1134->1135
1134->1136
1134->1137
1137->1138
1137->1139
1137->1140
1029->1141
1141->1142
1142->1143
1142->1144
1142->1145
1145->1146
1145->1147
1145->1148
1145->1149
1029->1150
1150->1151
973->1152
1152->1153
