AST
0[CompilationUnit
1[NodeList
2[ClassOrInterfaceDeclaration
3[(?)AvenMimeomancer
4[NodeList
5[ConstructorDeclaration
6[(?)AvenMimeomancer
7[NodeList
8[Parameter
9[VariableDeclaratorId
10[ClassOrInterfaceType
11[BlockStmt
12[NodeList
13[ExpressionStmt
14[AssignExpr
15[FieldAccessExpr
16[(?)this
17[(?)expansionSetCode
18[(?)"ARB"
19[ExpressionStmt
20[MethodCallExpr
21[FieldAccessExpr
22[(?)this
23[(?)subtype
24[(?)add
25[NodeList
26[(?)"Bird"
27[ExpressionStmt
28[MethodCallExpr
29[FieldAccessExpr
30[(?)this
31[(?)subtype
32[(?)add
33[NodeList
34[(?)"Wizard"
35[ExpressionStmt
36[AssignExpr
37[FieldAccessExpr
38[(?)this
39[(?)power
40[ObjectCreationExpr
41[ClassOrInterfaceType
42[NodeList
43[(?)3
44[ExpressionStmt
45[AssignExpr
46[FieldAccessExpr
47[(?)this
48[(?)toughness
49[ObjectCreationExpr
50[ClassOrInterfaceType
51[NodeList
52[(?)1
53[ExpressionStmt
54[MethodCallExpr
55[(?)this
56[(?)addAbility
57[NodeList
58[MethodCallExpr
59[(?)FlyingAbility
60[(?)getInstance
61[ExpressionStmt
62[VariableDeclarationExpr
63[ClassOrInterfaceType
64[NodeList
65[VariableDeclarator
66[VariableDeclaratorId
67[ObjectCreationExpr
68[ClassOrInterfaceType
69[NodeList
70[FieldAccessExpr
71[(?)Zone
72[(?)BATTLEFIELD
73[ObjectCreationExpr
74[ClassOrInterfaceType
75[NodeList
76[MethodCallExpr
77[FieldAccessExpr
78[(?)CounterType
79[(?)FEATHER
80[(?)createInstance
81[FieldAccessExpr
82[(?)TargetController
83[(?)YOU
84[(?)true
85[ExpressionStmt
86[MethodCallExpr
87[(?)ability
88[(?)addTarget
89[NodeList
90[ObjectCreationExpr
91[ClassOrInterfaceType
92[ExpressionStmt
93[MethodCallExpr
94[(?)ability
95[(?)addEffect
96[NodeList
97[ObjectCreationExpr
98[ClassOrInterfaceType
99[ExpressionStmt
100[MethodCallExpr
101[(?)ability
102[(?)addEffect
103[NodeList
104[ObjectCreationExpr
105[ClassOrInterfaceType
106[ExpressionStmt
107[MethodCallExpr
108[(?)this
109[(?)addAbility
110[NodeList
111[(?)ability
112[ExplicitConstructorInvocationStmt
113[NodeList
114[(?)ownerId
115[(?)2
116[(?)"Aven Mimeomancer"
117[FieldAccessExpr
118[(?)Rarity
119[(?)RARE
120[ArrayCreationExpr
121[NodeList
122[ArrayCreationLevel
123[ClassOrInterfaceType
124[ArrayInitializerExpr
125[NodeList
126[FieldAccessExpr
127[(?)CardType
128[(?)CREATURE
129[(?)"{1}{W}{U}"
130[ConstructorDeclaration
131[(?)AvenMimeomancer
132[NodeList
133[Parameter
134[VariableDeclaratorId
135[ClassOrInterfaceType
136[BlockStmt
137[NodeList
138[ExplicitConstructorInvocationStmt
139[NodeList
140[(?)card
141[@Overridepublic AvenMimeomancer copy() { return new AvenMimeomancer(this);}
142[NodeList
143[MarkerAnnotationExpr
144[(?)Override
145[ClassOrInterfaceType
146[(?)copy
147[BlockStmt
148[NodeList
149[ReturnStmt
150[ObjectCreationExpr
151[ClassOrInterfaceType
152[NodeList
153[(?)this
154[NodeList
155[ClassOrInterfaceType
156[ClassOrInterfaceDeclaration
157[(?)AvenEffect
158[NodeList
159[ConstructorDeclaration
160[(?)AvenEffect
161[BlockStmt
162[NodeList
163[ExplicitConstructorInvocationStmt
164[NodeList
165[FieldAccessExpr
166[(?)Duration
167[(?)Custom
168[FieldAccessExpr
169[(?)Layer
170[(?)PTChangingEffects_7
171[FieldAccessExpr
172[(?)SubLayer
173[(?)SetPT_7b
174[FieldAccessExpr
175[(?)Outcome
176[(?)BoostCreature
177[ConstructorDeclaration
178[(?)AvenEffect
179[NodeList
180[Parameter
181[VariableDeclaratorId
182[ClassOrInterfaceType
183[BlockStmt
184[NodeList
185[ExplicitConstructorInvocationStmt
186[NodeList
187[(?)effect
188[@Overridepublic AvenEffect copy() { return new AvenEffect(this);}
189[NodeList
190[MarkerAnnotationExpr
191[(?)Override
192[ClassOrInterfaceType
193[(?)copy
194[BlockStmt
195[NodeList
196[ReturnStmt
197[ObjectCreationExpr
198[ClassOrInterfaceType
199[NodeList
200[(?)this
201[@Overridepublic boolean apply(Game game, Ability source) { Permanent target = game.getPermanent(source.getFirstTarget()); if (target != null) { target.getPower().setValue(3); target.getToughness().setValue(1); return true; } return false;}
202[NodeList
203[MarkerAnnotationExpr
204[(?)Override
205[PrimitiveType
206[(?)apply
207[NodeList
208[Parameter
209[VariableDeclaratorId
210[ClassOrInterfaceType
211[Parameter
212[VariableDeclaratorId
213[ClassOrInterfaceType
214[BlockStmt
215[NodeList
216[ExpressionStmt
217[VariableDeclarationExpr
218[ClassOrInterfaceType
219[NodeList
220[VariableDeclarator
221[VariableDeclaratorId
222[MethodCallExpr
223[(?)game
224[(?)getPermanent
225[NodeList
226[MethodCallExpr
227[(?)source
228[(?)getFirstTarget
229[IfStmt
230[BinaryExpr
231[(?)target
232[(?)null
233[BlockStmt
234[NodeList
235[ExpressionStmt
236[MethodCallExpr
237[MethodCallExpr
238[(?)target
239[(?)getPower
240[(?)setValue
241[NodeList
242[(?)3
243[ExpressionStmt
244[MethodCallExpr
245[MethodCallExpr
246[(?)target
247[(?)getToughness
248[(?)setValue
249[NodeList
250[(?)1
251[ReturnStmt
252[(?)true
253[ReturnStmt
254[(?)false
255[@Overridepublic boolean isInactive(Ability source, Game game) { Permanent creature = game.getPermanent(this.targetPointer.getFirst(game, source)); if (creature != null && creature.getCounters().getCount(CounterType.FEATHER) < 1) { return true; } return false;}
256[NodeList
257[MarkerAnnotationExpr
258[(?)Override
259[PrimitiveType
260[(?)isInactive
261[NodeList
262[Parameter
263[VariableDeclaratorId
264[ClassOrInterfaceType
265[Parameter
266[VariableDeclaratorId
267[ClassOrInterfaceType
268[BlockStmt
269[NodeList
270[ExpressionStmt
271[VariableDeclarationExpr
272[ClassOrInterfaceType
273[NodeList
274[VariableDeclarator
275[VariableDeclaratorId
276[MethodCallExpr
277[(?)game
278[(?)getPermanent
279[NodeList
280[MethodCallExpr
281[FieldAccessExpr
282[(?)this
283[(?)targetPointer
284[(?)getFirst
285[NodeList
286[(?)game
287[(?)source
288[IfStmt
289[BinaryExpr
290[BinaryExpr
291[(?)creature
292[(?)null
293[BinaryExpr
294[MethodCallExpr
295[MethodCallExpr
296[(?)creature
297[(?)getCounters
298[(?)getCount
299[NodeList
300[FieldAccessExpr
301[(?)CounterType
302[(?)FEATHER
303[(?)1
304[BlockStmt
305[NodeList
306[ReturnStmt
307[(?)true
308[ReturnStmt
309[(?)false
310[@Overridepublic String getText(Mode mode) { StringBuilder sb = new StringBuilder(); sb.append("If you do, that creature has base power and toughness 3/1 and has flying for as long as it has a feather counter on it"); return sb.toString();}
311[NodeList
312[MarkerAnnotationExpr
313[(?)Override
314[ClassOrInterfaceType
315[(?)getText
316[NodeList
317[Parameter
318[VariableDeclaratorId
319[ClassOrInterfaceType
320[BlockStmt
321[NodeList
322[ExpressionStmt
323[VariableDeclarationExpr
324[ClassOrInterfaceType
325[NodeList
326[VariableDeclarator
327[VariableDeclaratorId
328[ObjectCreationExpr
329[ClassOrInterfaceType
330[ExpressionStmt
331[MethodCallExpr
332[(?)sb
333[(?)append
334[NodeList
335[(?)"If you do, that creature has base power and toughness 3/1 and has flying for as long as it has a feather counter on it"
336[ReturnStmt
337[MethodCallExpr
338[(?)sb
339[(?)toString
340[NodeList
341[ClassOrInterfaceType
342[ClassOrInterfaceDeclaration
343[(?)AvenEffect2
344[NodeList
345[ConstructorDeclaration
346[(?)AvenEffect2
347[BlockStmt
348[NodeList
349[ExplicitConstructorInvocationStmt
350[NodeList
351[FieldAccessExpr
352[(?)Duration
353[(?)Custom
354[FieldAccessExpr
355[(?)Layer
356[(?)AbilityAddingRemovingEffects_6
357[FieldAccessExpr
358[(?)SubLayer
359[(?)NA
360[FieldAccessExpr
361[(?)Outcome
362[(?)BoostCreature
363[ConstructorDeclaration
364[(?)AvenEffect2
365[NodeList
366[Parameter
367[VariableDeclaratorId
368[ClassOrInterfaceType
369[BlockStmt
370[NodeList
371[ExplicitConstructorInvocationStmt
372[NodeList
373[(?)effect
374[@Overridepublic AvenEffect2 copy() { return new AvenEffect2(this);}
375[NodeList
376[MarkerAnnotationExpr
377[(?)Override
378[ClassOrInterfaceType
379[(?)copy
380[BlockStmt
381[NodeList
382[ReturnStmt
383[ObjectCreationExpr
384[ClassOrInterfaceType
385[NodeList
386[(?)this
387[@Overridepublic boolean apply(Game game, Ability source) { Permanent target = game.getPermanent(source.getFirstTarget()); if (target != null) { if (!target.getAbilities().contains(FlyingAbility.getInstance())) { target.addAbility(FlyingAbility.getInstance(), source.getSourceId(), game); return true; } } return false;}
388[NodeList
389[MarkerAnnotationExpr
390[(?)Override
391[PrimitiveType
392[(?)apply
393[NodeList
394[Parameter
395[VariableDeclaratorId
396[ClassOrInterfaceType
397[Parameter
398[VariableDeclaratorId
399[ClassOrInterfaceType
400[BlockStmt
401[NodeList
402[ExpressionStmt
403[VariableDeclarationExpr
404[ClassOrInterfaceType
405[NodeList
406[VariableDeclarator
407[VariableDeclaratorId
408[MethodCallExpr
409[(?)game
410[(?)getPermanent
411[NodeList
412[MethodCallExpr
413[(?)source
414[(?)getFirstTarget
415[IfStmt
416[BinaryExpr
417[(?)target
418[(?)null
419[BlockStmt
420[NodeList
421[IfStmt
422[UnaryExpr
423[MethodCallExpr
424[MethodCallExpr
425[(?)target
426[(?)getAbilities
427[(?)contains
428[NodeList
429[MethodCallExpr
430[(?)FlyingAbility
431[(?)getInstance
432[BlockStmt
433[NodeList
434[ExpressionStmt
435[MethodCallExpr
436[(?)target
437[(?)addAbility
438[NodeList
439[MethodCallExpr
440[(?)FlyingAbility
441[(?)getInstance
442[MethodCallExpr
443[(?)source
444[(?)getSourceId
445[(?)game
446[ReturnStmt
447[(?)true
448[ReturnStmt
449[(?)false
450[@Overridepublic boolean isInactive(Ability source, Game game) { Permanent creature = game.getPermanent(this.targetPointer.getFirst(game, source)); if (creature != null && creature.getCounters().getCount(CounterType.FEATHER) < 1) { return true; } return false;}
451[NodeList
452[MarkerAnnotationExpr
453[(?)Override
454[PrimitiveType
455[(?)isInactive
456[NodeList
457[Parameter
458[VariableDeclaratorId
459[ClassOrInterfaceType
460[Parameter
461[VariableDeclaratorId
462[ClassOrInterfaceType
463[BlockStmt
464[NodeList
465[ExpressionStmt
466[VariableDeclarationExpr
467[ClassOrInterfaceType
468[NodeList
469[VariableDeclarator
470[VariableDeclaratorId
471[MethodCallExpr
472[(?)game
473[(?)getPermanent
474[NodeList
475[MethodCallExpr
476[FieldAccessExpr
477[(?)this
478[(?)targetPointer
479[(?)getFirst
480[NodeList
481[(?)game
482[(?)source
483[IfStmt
484[BinaryExpr
485[BinaryExpr
486[(?)creature
487[(?)null
488[BinaryExpr
489[MethodCallExpr
490[MethodCallExpr
491[(?)creature
492[(?)getCounters
493[(?)getCount
494[NodeList
495[FieldAccessExpr
496[(?)CounterType
497[(?)FEATHER
498[(?)1
499[BlockStmt
500[NodeList
501[ReturnStmt
502[(?)true
503[ReturnStmt
504[(?)false
505[NodeList
506[ClassOrInterfaceType
1564->1565
1565->1566
1566->1567
1566->1568
1568->1569
1569->1570
1569->1571
1571->1572
1572->1573
1572->1574
1569->1575
1575->1576
1576->1577
1577->1578
1578->1579
1579->1580
1579->1581
1578->1582
1576->1583
1583->1584
1584->1585
1585->1586
1585->1587
1584->1588
1584->1589
1589->1590
1576->1591
1591->1592
1592->1593
1593->1594
1593->1595
1592->1596
1592->1597
1597->1598
1576->1599
1599->1600
1600->1601
1601->1602
1601->1603
1600->1604
1604->1605
1604->1606
1606->1607
1576->1608
1608->1609
1609->1610
1610->1611
1610->1612
1609->1613
1613->1614
1613->1615
1615->1616
1576->1617
1617->1618
1618->1619
1618->1620
1618->1621
1621->1622
1622->1623
1622->1624
1576->1625
1625->1626
1626->1627
1626->1628
1628->1629
1629->1630
1629->1631
1631->1632
1631->1633
1633->1634
1634->1635
1634->1636
1633->1637
1637->1638
1637->1639
1639->1640
1640->1641
1641->1642
1641->1643
1640->1644
1633->1645
1645->1646
1645->1647
1633->1648
1576->1649
1649->1650
1650->1651
1650->1652
1650->1653
1653->1654
1654->1655
1576->1656
1656->1657
1657->1658
1657->1659
1657->1660
1660->1661
1661->1662
1576->1663
1663->1664
1664->1665
1664->1666
1664->1667
1667->1668
1668->1669
1576->1670
1670->1671
1671->1672
1671->1673
1671->1674
1674->1675
1576->1676
1676->1677
1677->1678
1677->1679
1677->1680
1677->1681
1681->1682
1681->1683
1677->1684
1684->1685
1685->1686
1684->1687
1684->1688
1688->1689
1689->1690
1690->1691
1690->1692
1677->1693
1568->1694
1694->1695
1694->1696
1696->1697
1697->1698
1697->1699
1694->1700
1700->1701
1701->1702
1702->1703
1703->1704
1568->1705
1705->1706
1706->1707
1707->1708
1705->1709
1705->1710
1705->1711
1711->1712
1712->1713
1713->1714
1714->1715
1714->1716
1716->1717
1566->1718
1718->1719
1565->1720
1720->1721
1720->1722
1722->1723
1723->1724
1723->1725
1725->1726
1726->1727
1727->1728
1728->1729
1729->1730
1729->1731
1728->1732
1732->1733
1732->1734
1728->1735
1735->1736
1735->1737
1728->1738
1738->1739
1738->1740
1722->1741
1741->1742
1741->1743
1743->1744
1744->1745
1744->1746
1741->1747
1747->1748
1748->1749
1749->1750
1750->1751
1722->1752
1752->1753
1753->1754
1754->1755
1752->1756
1752->1757
1752->1758
1758->1759
1759->1760
1760->1761
1761->1762
1761->1763
1763->1764
1722->1765
1765->1766
1766->1767
1767->1768
1765->1769
1765->1770
1765->1771
1771->1772
1772->1773
1772->1774
1771->1775
1775->1776
1775->1777
1765->1778
1778->1779
1779->1780
1780->1781
1781->1782
1781->1783
1783->1784
1784->1785
1784->1786
1786->1787
1786->1788
1786->1789
1789->1790
1790->1791
1790->1792
1779->1793
1793->1794
1794->1795
1794->1796
1793->1797
1797->1798
1798->1799
1799->1800
1800->1801
1801->1802
1801->1803
1800->1804
1800->1805
1805->1806
1798->1807
1807->1808
1808->1809
1809->1810
1809->1811
1808->1812
1808->1813
1813->1814
1798->1815
1815->1816
1779->1817
1817->1818
1722->1819
1819->1820
1820->1821
1821->1822
1819->1823
1819->1824
1819->1825
1825->1826
1826->1827
1826->1828
1825->1829
1829->1830
1829->1831
1819->1832
1832->1833
1833->1834
1834->1835
1835->1836
1835->1837
1837->1838
1838->1839
1838->1840
1840->1841
1840->1842
1840->1843
1843->1844
1844->1845
1845->1846
1845->1847
1844->1848
1844->1849
1849->1850
1849->1851
1833->1852
1852->1853
1853->1854
1854->1855
1854->1856
1853->1857
1857->1858
1858->1859
1859->1860
1859->1861
1858->1862
1858->1863
1863->1864
1864->1865
1864->1866
1857->1867
1852->1868
1868->1869
1869->1870
1870->1871
1833->1872
1872->1873
1722->1874
1874->1875
1875->1876
1876->1877
1874->1878
1874->1879
1874->1880
1880->1881
1881->1882
1881->1883
1874->1884
1884->1885
1885->1886
1886->1887
1887->1888
1887->1889
1889->1890
1890->1891
1890->1892
1892->1893
1885->1894
1894->1895
1895->1896
1895->1897
1895->1898
1898->1899
1885->1900
1900->1901
1901->1902
1901->1903
1720->1904
1904->1905
1565->1906
1906->1907
1906->1908
1908->1909
1909->1910
1909->1911
1911->1912
1912->1913
1913->1914
1914->1915
1915->1916
1915->1917
1914->1918
1918->1919
1918->1920
1914->1921
1921->1922
1921->1923
1914->1924
1924->1925
1924->1926
1908->1927
1927->1928
1927->1929
1929->1930
1930->1931
1930->1932
1927->1933
1933->1934
1934->1935
1935->1936
1936->1937
1908->1938
1938->1939
1939->1940
1940->1941
1938->1942
1938->1943
1938->1944
1944->1945
1945->1946
1946->1947
1947->1948
1947->1949
1949->1950
1908->1951
1951->1952
1952->1953
1953->1954
1951->1955
1951->1956
1951->1957
1957->1958
1958->1959
1958->1960
1957->1961
1961->1962
1961->1963
1951->1964
1964->1965
1965->1966
1966->1967
1967->1968
1967->1969
1969->1970
1970->1971
1970->1972
1972->1973
1972->1974
1972->1975
1975->1976
1976->1977
1976->1978
1965->1979
1979->1980
1980->1981
1980->1982
1979->1983
1983->1984
1984->1985
1985->1986
1986->1987
1987->1988
1988->1989
1988->1990
1987->1991
1987->1992
1992->1993
1993->1994
1993->1995
1985->1996
1996->1997
1997->1998
1998->1999
1999->2000
1999->2001
1999->2002
2002->2003
2003->2004
2003->2005
2002->2006
2006->2007
2006->2008
2002->2009
1997->2010
2010->2011
1965->2012
2012->2013
1908->2014
2014->2015
2015->2016
2016->2017
2014->2018
2014->2019
2014->2020
2020->2021
2021->2022
2021->2023
2020->2024
2024->2025
2024->2026
2014->2027
2027->2028
2028->2029
2029->2030
2030->2031
2030->2032
2032->2033
2033->2034
2033->2035
2035->2036
2035->2037
2035->2038
2038->2039
2039->2040
2040->2041
2040->2042
2039->2043
2039->2044
2044->2045
2044->2046
2028->2047
2047->2048
2048->2049
2049->2050
2049->2051
2048->2052
2052->2053
2053->2054
2054->2055
2054->2056
2053->2057
2053->2058
2058->2059
2059->2060
2059->2061
2052->2062
2047->2063
2063->2064
2064->2065
2065->2066
2028->2067
2067->2068
1906->2069
2069->2070
