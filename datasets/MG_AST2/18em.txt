AST
3233[CompilationUnit
3234[NodeList
3235[ClassOrInterfaceDeclaration
3236[Crystallization
3237[NodeList
3238[ConstructorDeclaration
3239[Crystallization
3240[NodeList
3241[Parameter
3242[VariableDeclaratorId
3243[ClassOrInterfaceType
3244[BlockStmt
3245[NodeList
3246[ExpressionStmt
3247[AssignExpr
3248[FieldAccessExpr
3249[this
3250[expansionSetCode
3251["ARB"
3252[ExpressionStmt
3253[MethodCallExpr
3254[FieldAccessExpr
3255[this
3256[subtype
3257[add
3258[NodeList
3259["Aura"
3260[ExpressionStmt
3261[VariableDeclarationExpr
3262[ClassOrInterfaceType
3263[NodeList
3264[VariableDeclarator
3265[VariableDeclaratorId
3266[ObjectCreationExpr
3267[ClassOrInterfaceType
3268[ExpressionStmt
3269[MethodCallExpr
3270[MethodCallExpr
3271[this
3272[getSpellAbility
3273[addTarget
3274[NodeList
3275[auraTarget
3276[ExpressionStmt
3277[MethodCallExpr
3278[MethodCallExpr
3279[this
3280[getSpellAbility
3281[addEffect
3282[NodeList
3283[ObjectCreationExpr
3284[ClassOrInterfaceType
3285[NodeList
3286[FieldAccessExpr
3287[Outcome
3288[AddAbility
3289[ExpressionStmt
3290[VariableDeclarationExpr
3291[ClassOrInterfaceType
3292[NodeList
3293[VariableDeclarator
3294[VariableDeclaratorId
3295[ObjectCreationExpr
3296[ClassOrInterfaceType
3297[NodeList
3298[MethodCallExpr
3299[auraTarget
3300[getTargetName
3301[ExpressionStmt
3302[MethodCallExpr
3303[this
3304[addAbility
3305[NodeList
3306[ability
3307[ExpressionStmt
3308[MethodCallExpr
3309[this
3310[addAbility
3311[NodeList
3312[ObjectCreationExpr
3313[ClassOrInterfaceType
3314[NodeList
3315[FieldAccessExpr
3316[Zone
3317[BATTLEFIELD
3318[ObjectCreationExpr
3319[ClassOrInterfaceType
3320[NodeList
3321[FieldAccessExpr
3322[AttachmentType
3323[AURA
3324[ExpressionStmt
3325[MethodCallExpr
3326[this
3327[addAbility
3328[NodeList
3329[ObjectCreationExpr
3330[ClassOrInterfaceType
3331[ExplicitConstructorInvocationStmt
3332[NodeList
3333[ownerId
3334[144
3335["Crystallization"
3336[FieldAccessExpr
3337[Rarity
3338[COMMON
3339[ArrayCreationExpr
3340[NodeList
3341[ArrayCreationLevel
3342[ClassOrInterfaceType
3343[ArrayInitializerExpr
3344[NodeList
3345[FieldAccessExpr
3346[CardType
3347[ENCHANTMENT
3348["{G/U}{W}"
3349[ConstructorDeclaration
3350[Crystallization
3351[NodeList
3352[Parameter
3353[VariableDeclaratorId
3354[ClassOrInterfaceType
3355[BlockStmt
3356[NodeList
3357[ExplicitConstructorInvocationStmt
3358[NodeList
3359[card
3360[@Overridepublic Crystallization copy() { return new Crystallization(this);}
3361[NodeList
3362[MarkerAnnotationExpr
3363[Override
3364[ClassOrInterfaceType
3365[copy
3366[BlockStmt
3367[NodeList
3368[ReturnStmt
3369[ObjectCreationExpr
3370[ClassOrInterfaceType
3371[NodeList
3372[this
3373[NodeList
3374[ClassOrInterfaceType
3375[ClassOrInterfaceDeclaration
3376[CrystallizationTriggeredAbility
3377[NodeList
3378[ConstructorDeclaration
3379[CrystallizationTriggeredAbility
3380[BlockStmt
3381[NodeList
3382[ExplicitConstructorInvocationStmt
3383[NodeList
3384[FieldAccessExpr
3385[Zone
3386[BATTLEFIELD
3387[ObjectCreationExpr
3388[ClassOrInterfaceType
3389[ConstructorDeclaration
3390[CrystallizationTriggeredAbility
3391[NodeList
3392[Parameter
3393[VariableDeclaratorId
3394[ClassOrInterfaceType
3395[BlockStmt
3396[NodeList
3397[ExplicitConstructorInvocationStmt
3398[NodeList
3399[ability
3400[@Overridepublic CrystallizationTriggeredAbility copy() { return new CrystallizationTriggeredAbility(this);}
3401[NodeList
3402[MarkerAnnotationExpr
3403[Override
3404[ClassOrInterfaceType
3405[copy
3406[BlockStmt
3407[NodeList
3408[ReturnStmt
3409[ObjectCreationExpr
3410[ClassOrInterfaceType
3411[NodeList
3412[this
3413[@Overridepublic boolean checkEventType(GameEvent event, Game game) { return event.getType() == EventType.TARGETED;}
3414[NodeList
3415[MarkerAnnotationExpr
3416[Override
3417[PrimitiveType
3418[checkEventType
3419[NodeList
3420[Parameter
3421[VariableDeclaratorId
3422[ClassOrInterfaceType
3423[Parameter
3424[VariableDeclaratorId
3425[ClassOrInterfaceType
3426[BlockStmt
3427[NodeList
3428[ReturnStmt
3429[BinaryExpr
3430[MethodCallExpr
3431[event
3432[getType
3433[FieldAccessExpr
3434[EventType
3435[TARGETED
3436[@Overridepublic boolean checkTrigger(GameEvent event, Game game) { Permanent enchantment = game.getPermanent(sourceId); if (enchantment != null && enchantment.getAttachedTo() != null) { UUID enchanted = enchantment.getAttachedTo(); if (event.getTargetId().equals(enchanted)) { getEffects().get(0).setTargetPointer(new FixedTarget(enchanted)); return true; } } return false;}
3437[NodeList
3438[MarkerAnnotationExpr
3439[Override
3440[PrimitiveType
3441[checkTrigger
3442[NodeList
3443[Parameter
3444[VariableDeclaratorId
3445[ClassOrInterfaceType
3446[Parameter
3447[VariableDeclaratorId
3448[ClassOrInterfaceType
3449[BlockStmt
3450[NodeList
3451[ExpressionStmt
3452[VariableDeclarationExpr
3453[ClassOrInterfaceType
3454[NodeList
3455[VariableDeclarator
3456[VariableDeclaratorId
3457[MethodCallExpr
3458[game
3459[getPermanent
3460[NodeList
3461[sourceId
3462[IfStmt
3463[BinaryExpr
3464[BinaryExpr
3465[enchantment
3466[null
3467[BinaryExpr
3468[MethodCallExpr
3469[enchantment
3470[getAttachedTo
3471[null
3472[BlockStmt
3473[NodeList
3474[ExpressionStmt
3475[VariableDeclarationExpr
3476[ClassOrInterfaceType
3477[NodeList
3478[VariableDeclarator
3479[VariableDeclaratorId
3480[MethodCallExpr
3481[enchantment
3482[getAttachedTo
3483[IfStmt
3484[MethodCallExpr
3485[MethodCallExpr
3486[event
3487[getTargetId
3488[equals
3489[NodeList
3490[enchanted
3491[BlockStmt
3492[NodeList
3493[ExpressionStmt
3494[MethodCallExpr
3495[MethodCallExpr
3496[MethodCallExpr
3497[getEffects
3498[get
3499[NodeList
3500[0
3501[setTargetPointer
3502[NodeList
3503[ObjectCreationExpr
3504[ClassOrInterfaceType
3505[NodeList
3506[enchanted
3507[ReturnStmt
3508[true
3509[ReturnStmt
3510[false
3511[@Overridepublic String getRule() { return "When enchanted creature becomes the target of a spell or ability, exile that creature.";}
3512[NodeList
3513[MarkerAnnotationExpr
3514[Override
3515[ClassOrInterfaceType
3516[getRule
3517[BlockStmt
3518[NodeList
3519[ReturnStmt
3520["When enchanted creature becomes the target of a spell or ability, exile that creature."
3521[NodeList
3522[ClassOrInterfaceType
3233->3234
3234->3235
3235->3236
3235->3237
3237->3238
3238->3239
3238->3240
3240->3241
3241->3242
3241->3243
3238->3244
3244->3245
3245->3246
3246->3247
3247->3248
3248->3249
3248->3250
3247->3251
3245->3252
3252->3253
3253->3254
3254->3255
3254->3256
3253->3257
3253->3258
3258->3259
3245->3260
3260->3261
3261->3262
3261->3263
3263->3264
3264->3265
3264->3266
3266->3267
3245->3268
3268->3269
3269->3270
3270->3271
3270->3272
3269->3273
3269->3274
3274->3275
3245->3276
3276->3277
3277->3278
3278->3279
3278->3280
3277->3281
3277->3282
3282->3283
3283->3284
3283->3285
3285->3286
3286->3287
3286->3288
3245->3289
3289->3290
3290->3291
3290->3292
3292->3293
3293->3294
3293->3295
3295->3296
3295->3297
3297->3298
3298->3299
3298->3300
3245->3301
3301->3302
3302->3303
3302->3304
3302->3305
3305->3306
3245->3307
3307->3308
3308->3309
3308->3310
3308->3311
3311->3312
3312->3313
3312->3314
3314->3315
3315->3316
3315->3317
3314->3318
3318->3319
3318->3320
3320->3321
3321->3322
3321->3323
3245->3324
3324->3325
3325->3326
3325->3327
3325->3328
3328->3329
3329->3330
3245->3331
3331->3332
3332->3333
3332->3334
3332->3335
3332->3336
3336->3337
3336->3338
3332->3339
3339->3340
3340->3341
3339->3342
3339->3343
3343->3344
3344->3345
3345->3346
3345->3347
3332->3348
3237->3349
3349->3350
3349->3351
3351->3352
3352->3353
3352->3354
3349->3355
3355->3356
3356->3357
3357->3358
3358->3359
3237->3360
3360->3361
3361->3362
3362->3363
3360->3364
3360->3365
3360->3366
3366->3367
3367->3368
3368->3369
3369->3370
3369->3371
3371->3372
3235->3373
3373->3374
3234->3375
3375->3376
3375->3377
3377->3378
3378->3379
3378->3380
3380->3381
3381->3382
3382->3383
3383->3384
3384->3385
3384->3386
3383->3387
3387->3388
3377->3389
3389->3390
3389->3391
3391->3392
3392->3393
3392->3394
3389->3395
3395->3396
3396->3397
3397->3398
3398->3399
3377->3400
3400->3401
3401->3402
3402->3403
3400->3404
3400->3405
3400->3406
3406->3407
3407->3408
3408->3409
3409->3410
3409->3411
3411->3412
3377->3413
3413->3414
3414->3415
3415->3416
3413->3417
3413->3418
3413->3419
3419->3420
3420->3421
3420->3422
3419->3423
3423->3424
3423->3425
3413->3426
3426->3427
3427->3428
3428->3429
3429->3430
3430->3431
3430->3432
3429->3433
3433->3434
3433->3435
3377->3436
3436->3437
3437->3438
3438->3439
3436->3440
3436->3441
3436->3442
3442->3443
3443->3444
3443->3445
3442->3446
3446->3447
3446->3448
3436->3449
3449->3450
3450->3451
3451->3452
3452->3453
3452->3454
3454->3455
3455->3456
3455->3457
3457->3458
3457->3459
3457->3460
3460->3461
3450->3462
3462->3463
3463->3464
3464->3465
3464->3466
3463->3467
3467->3468
3468->3469
3468->3470
3467->3471
3462->3472
3472->3473
3473->3474
3474->3475
3475->3476
3475->3477
3477->3478
3478->3479
3478->3480
3480->3481
3480->3482
3473->3483
3483->3484
3484->3485
3485->3486
3485->3487
3484->3488
3484->3489
3489->3490
3483->3491
3491->3492
3492->3493
3493->3494
3494->3495
3495->3496
3496->3497
3495->3498
3495->3499
3499->3500
3494->3501
3494->3502
3502->3503
3503->3504
3503->3505
3505->3506
3492->3507
3507->3508
3450->3509
3509->3510
3377->3511
3511->3512
3512->3513
3513->3514
3511->3515
3511->3516
3511->3517
3517->3518
3518->3519
3519->3520
3375->3521
3521->3522
