AST
0[CompilationUnit
1[NodeList
2[ClassOrInterfaceDeclaration
3[(?)ArsenalThresher
4[NodeList
5[ConstructorDeclaration
6[(?)ArsenalThresher
7[NodeList
8[Parameter
9[VariableDeclaratorId
10[ClassOrInterfaceType
11[BlockStmt
12[NodeList
13[ExpressionStmt
14[AssignExpr
15[FieldAccessExpr
16[(?)this
17[(?)expansionSetCode
18[(?)"ARB"
19[ExpressionStmt
20[MethodCallExpr
21[FieldAccessExpr
22[(?)this
23[(?)subtype
24[(?)add
25[NodeList
26[(?)"Construct"
27[ExpressionStmt
28[AssignExpr
29[FieldAccessExpr
30[(?)this
31[(?)power
32[ObjectCreationExpr
33[ClassOrInterfaceType
34[NodeList
35[(?)2
36[ExpressionStmt
37[AssignExpr
38[FieldAccessExpr
39[(?)this
40[(?)toughness
41[ObjectCreationExpr
42[ClassOrInterfaceType
43[NodeList
44[(?)2
45[ExpressionStmt
46[MethodCallExpr
47[(?)this
48[(?)addAbility
49[NodeList
50[ObjectCreationExpr
51[ClassOrInterfaceType
52[NodeList
53[ObjectCreationExpr
54[ClassOrInterfaceType
55[(?)"you may reveal any number of other artifact cards from your hand. {this} enters the battlefield with a +1/+1 counter on it for each card revealed this way"
56[ExplicitConstructorInvocationStmt
57[NodeList
58[(?)ownerId
59[(?)131
60[(?)"Arsenal Thresher"
61[FieldAccessExpr
62[(?)Rarity
63[(?)COMMON
64[ArrayCreationExpr
65[NodeList
66[ArrayCreationLevel
67[ClassOrInterfaceType
68[ArrayInitializerExpr
69[NodeList
70[FieldAccessExpr
71[(?)CardType
72[(?)ARTIFACT
73[FieldAccessExpr
74[(?)CardType
75[(?)CREATURE
76[(?)"{2}{W/B}{U}"
77[ConstructorDeclaration
78[(?)ArsenalThresher
79[NodeList
80[Parameter
81[VariableDeclaratorId
82[ClassOrInterfaceType
83[BlockStmt
84[NodeList
85[ExplicitConstructorInvocationStmt
86[NodeList
87[(?)card
88[@Overridepublic ArsenalThresher copy() { return new ArsenalThresher(this);}
89[NodeList
90[MarkerAnnotationExpr
91[(?)Override
92[ClassOrInterfaceType
93[(?)copy
94[BlockStmt
95[NodeList
96[ReturnStmt
97[ObjectCreationExpr
98[ClassOrInterfaceType
99[NodeList
100[(?)this
101[NodeList
102[ClassOrInterfaceType
103[ClassOrInterfaceDeclaration
104[(?)ArsenalThresherEffect
105[NodeList
106[ConstructorDeclaration
107[(?)ArsenalThresherEffect
108[BlockStmt
109[NodeList
110[ExplicitConstructorInvocationStmt
111[NodeList
112[FieldAccessExpr
113[(?)Outcome
114[(?)Benefit
115[ConstructorDeclaration
116[(?)ArsenalThresherEffect
117[NodeList
118[Parameter
119[VariableDeclaratorId
120[ClassOrInterfaceType
121[BlockStmt
122[NodeList
123[ExplicitConstructorInvocationStmt
124[NodeList
125[(?)effect
126[@Overridepublic ArsenalThresherEffect copy() { return new ArsenalThresherEffect(this);}
127[NodeList
128[MarkerAnnotationExpr
129[(?)Override
130[ClassOrInterfaceType
131[(?)copy
132[BlockStmt
133[NodeList
134[ReturnStmt
135[ObjectCreationExpr
136[ClassOrInterfaceType
137[NodeList
138[(?)this
139[@Overridepublic boolean apply(Game game, Ability source) { Player controller = game.getPlayer(source.getControllerId()); if (controller == null) { return false; } Permanent arsenalThresher = game.getPermanentEntering(source.getSourceId()); FilterArtifactCard filter = new FilterArtifactCard(); filter.add(new AnotherCardPredicate()); if (controller.chooseUse(Outcome.Benefit, "Do you want to reveal other artifacts in your hand?", source, game)) { Cards cards = new CardsImpl(); if (controller.getHand().count(filter, source.getSourceId(), source.getControllerId(), game) > 0) { TargetCardInHand target = new TargetCardInHand(0, Integer.MAX_VALUE, filter); if (controller.choose(Outcome.Benefit, target, source.getSourceId(), game)) { for (UUID uuid : target.getTargets()) { cards.add(controller.getHand().get(uuid, game)); } if (arsenalThresher != null) { controller.revealCards(arsenalThresher.getIdName(), cards, game); arsenalThresher.addCounters(CounterType.P1P1.createInstance(cards.size()), game); } } } return true; } return false;}
140[NodeList
141[MarkerAnnotationExpr
142[(?)Override
143[PrimitiveType
144[(?)apply
145[NodeList
146[Parameter
147[VariableDeclaratorId
148[ClassOrInterfaceType
149[Parameter
150[VariableDeclaratorId
151[ClassOrInterfaceType
152[BlockStmt
153[NodeList
154[ExpressionStmt
155[VariableDeclarationExpr
156[ClassOrInterfaceType
157[NodeList
158[VariableDeclarator
159[VariableDeclaratorId
160[MethodCallExpr
161[(?)game
162[(?)getPlayer
163[NodeList
164[MethodCallExpr
165[(?)source
166[(?)getControllerId
167[IfStmt
168[BinaryExpr
169[(?)controller
170[(?)null
171[BlockStmt
172[NodeList
173[ReturnStmt
174[(?)false
175[ExpressionStmt
176[VariableDeclarationExpr
177[ClassOrInterfaceType
178[NodeList
179[VariableDeclarator
180[VariableDeclaratorId
181[MethodCallExpr
182[(?)game
183[(?)getPermanentEntering
184[NodeList
185[MethodCallExpr
186[(?)source
187[(?)getSourceId
188[ExpressionStmt
189[VariableDeclarationExpr
190[ClassOrInterfaceType
191[NodeList
192[VariableDeclarator
193[VariableDeclaratorId
194[ObjectCreationExpr
195[ClassOrInterfaceType
196[ExpressionStmt
197[MethodCallExpr
198[(?)filter
199[(?)add
200[NodeList
201[ObjectCreationExpr
202[ClassOrInterfaceType
203[IfStmt
204[MethodCallExpr
205[(?)controller
206[(?)chooseUse
207[NodeList
208[FieldAccessExpr
209[(?)Outcome
210[(?)Benefit
211[(?)"Do you want to reveal other artifacts in your hand?"
212[(?)source
213[(?)game
214[BlockStmt
215[NodeList
216[ExpressionStmt
217[VariableDeclarationExpr
218[ClassOrInterfaceType
219[NodeList
220[VariableDeclarator
221[VariableDeclaratorId
222[ObjectCreationExpr
223[ClassOrInterfaceType
224[IfStmt
225[BinaryExpr
226[MethodCallExpr
227[MethodCallExpr
228[(?)controller
229[(?)getHand
230[(?)count
231[NodeList
232[(?)filter
233[MethodCallExpr
234[(?)source
235[(?)getSourceId
236[MethodCallExpr
237[(?)source
238[(?)getControllerId
239[(?)game
240[(?)0
241[BlockStmt
242[NodeList
243[ExpressionStmt
244[VariableDeclarationExpr
245[ClassOrInterfaceType
246[NodeList
247[VariableDeclarator
248[VariableDeclaratorId
249[ObjectCreationExpr
250[ClassOrInterfaceType
251[NodeList
252[(?)0
253[FieldAccessExpr
254[(?)Integer
255[(?)MAX_VALUE
256[(?)filter
257[IfStmt
258[MethodCallExpr
259[(?)controller
260[(?)choose
261[NodeList
262[FieldAccessExpr
263[(?)Outcome
264[(?)Benefit
265[(?)target
266[MethodCallExpr
267[(?)source
268[(?)getSourceId
269[(?)game
270[BlockStmt
271[NodeList
272[ForeachStmt
273[VariableDeclarationExpr
274[ClassOrInterfaceType
275[NodeList
276[VariableDeclarator
277[VariableDeclaratorId
278[MethodCallExpr
279[(?)target
280[(?)getTargets
281[BlockStmt
282[NodeList
283[ExpressionStmt
284[MethodCallExpr
285[(?)cards
286[(?)add
287[NodeList
288[MethodCallExpr
289[MethodCallExpr
290[(?)controller
291[(?)getHand
292[(?)get
293[NodeList
294[(?)uuid
295[(?)game
296[IfStmt
297[BinaryExpr
298[(?)arsenalThresher
299[(?)null
300[BlockStmt
301[NodeList
302[ExpressionStmt
303[MethodCallExpr
304[(?)controller
305[(?)revealCards
306[NodeList
307[MethodCallExpr
308[(?)arsenalThresher
309[(?)getIdName
310[(?)cards
311[(?)game
312[ExpressionStmt
313[MethodCallExpr
314[(?)arsenalThresher
315[(?)addCounters
316[NodeList
317[MethodCallExpr
318[FieldAccessExpr
319[(?)CounterType
320[(?)P1P1
321[(?)createInstance
322[NodeList
323[MethodCallExpr
324[(?)cards
325[(?)size
326[(?)game
327[ReturnStmt
328[(?)true
329[ReturnStmt
330[(?)false
331[NodeList
332[ClassOrInterfaceType
1231->1232
1232->1233
1233->1234
1233->1235
1235->1236
1236->1237
1236->1238
1238->1239
1239->1240
1239->1241
1236->1242
1242->1243
1243->1244
1244->1245
1245->1246
1246->1247
1246->1248
1245->1249
1243->1250
1250->1251
1251->1252
1252->1253
1252->1254
1251->1255
1251->1256
1256->1257
1243->1258
1258->1259
1259->1260
1260->1261
1260->1262
1259->1263
1263->1264
1263->1265
1265->1266
1243->1267
1267->1268
1268->1269
1269->1270
1269->1271
1268->1272
1272->1273
1272->1274
1274->1275
1243->1276
1276->1277
1277->1278
1277->1279
1277->1280
1280->1281
1281->1282
1281->1283
1283->1284
1284->1285
1283->1286
1243->1287
1287->1288
1288->1289
1288->1290
1288->1291
1288->1292
1292->1293
1292->1294
1288->1295
1295->1296
1296->1297
1295->1298
1295->1299
1299->1300
1300->1301
1301->1302
1301->1303
1300->1304
1304->1305
1304->1306
1288->1307
1235->1308
1308->1309
1308->1310
1310->1311
1311->1312
1311->1313
1308->1314
1314->1315
1315->1316
1316->1317
1317->1318
1235->1319
1319->1320
1320->1321
1321->1322
1319->1323
1319->1324
1319->1325
1325->1326
1326->1327
1327->1328
1328->1329
1328->1330
1330->1331
1233->1332
1332->1333
1232->1334
1334->1335
1334->1336
1336->1337
1337->1338
1337->1339
1339->1340
1340->1341
1341->1342
1342->1343
1343->1344
1343->1345
1336->1346
1346->1347
1346->1348
1348->1349
1349->1350
1349->1351
1346->1352
1352->1353
1353->1354
1354->1355
1355->1356
1336->1357
1357->1358
1358->1359
1359->1360
1357->1361
1357->1362
1357->1363
1363->1364
1364->1365
1365->1366
1366->1367
1366->1368
1368->1369
1336->1370
1370->1371
1371->1372
1372->1373
1370->1374
1370->1375
1370->1376
1376->1377
1377->1378
1377->1379
1376->1380
1380->1381
1380->1382
1370->1383
1383->1384
1384->1385
1385->1386
1386->1387
1386->1388
1388->1389
1389->1390
1389->1391
1391->1392
1391->1393
1391->1394
1394->1395
1395->1396
1395->1397
1384->1398
1398->1399
1399->1400
1399->1401
1398->1402
1402->1403
1403->1404
1404->1405
1384->1406
1406->1407
1407->1408
1407->1409
1409->1410
1410->1411
1410->1412
1412->1413
1412->1414
1412->1415
1415->1416
1416->1417
1416->1418
1384->1419
1419->1420
1420->1421
1420->1422
1422->1423
1423->1424
1423->1425
1425->1426
1384->1427
1427->1428
1428->1429
1428->1430
1428->1431
1431->1432
1432->1433
1384->1434
1434->1435
1435->1436
1435->1437
1435->1438
1438->1439
1439->1440
1439->1441
1438->1442
1438->1443
1438->1444
1434->1445
1445->1446
1446->1447
1447->1448
1448->1449
1448->1450
1450->1451
1451->1452
1451->1453
1453->1454
1446->1455
1455->1456
1456->1457
1457->1458
1458->1459
1458->1460
1457->1461
1457->1462
1462->1463
1462->1464
1464->1465
1464->1466
1462->1467
1467->1468
1467->1469
1462->1470
1456->1471
1455->1472
1472->1473
1473->1474
1474->1475
1475->1476
1475->1477
1477->1478
1478->1479
1478->1480
1480->1481
1480->1482
1482->1483
1482->1484
1484->1485
1484->1486
1482->1487
1473->1488
1488->1489
1489->1490
1489->1491
1489->1492
1492->1493
1493->1494
1493->1495
1492->1496
1492->1497
1497->1498
1497->1499
1492->1500
1488->1501
1501->1502
1502->1503
1503->1504
1504->1505
1504->1506
1506->1507
1507->1508
1503->1509
1509->1510
1509->1511
1503->1512
1512->1513
1513->1514
1514->1515
1515->1516
1515->1517
1515->1518
1518->1519
1519->1520
1520->1521
1520->1522
1519->1523
1519->1524
1524->1525
1524->1526
1502->1527
1527->1528
1528->1529
1528->1530
1527->1531
1531->1532
1532->1533
1533->1534
1534->1535
1534->1536
1534->1537
1537->1538
1538->1539
1538->1540
1537->1541
1537->1542
1532->1543
1543->1544
1544->1545
1544->1546
1544->1547
1547->1548
1548->1549
1549->1550
1549->1551
1548->1552
1548->1553
1553->1554
1554->1555
1554->1556
1547->1557
1446->1558
1558->1559
1384->1560
1560->1561
1334->1562
1562->1563
