AST
0[CompilationUnit
1[NodeList
2[ClassOrInterfaceDeclaration
3[(?)Anathemancer
4[NodeList
5[ConstructorDeclaration
6[(?)Anathemancer
7[NodeList
8[Parameter
9[VariableDeclaratorId
10[ClassOrInterfaceType
11[BlockStmt
12[NodeList
13[ExpressionStmt
14[AssignExpr
15[FieldAccessExpr
16[(?)this
17[(?)expansionSetCode
18[(?)"ARB"
19[ExpressionStmt
20[MethodCallExpr
21[FieldAccessExpr
22[(?)this
23[(?)subtype
24[(?)add
25[NodeList
26[(?)"Zombie"
27[ExpressionStmt
28[MethodCallExpr
29[FieldAccessExpr
30[(?)this
31[(?)subtype
32[(?)add
33[NodeList
34[(?)"Wizard"
35[ExpressionStmt
36[AssignExpr
37[FieldAccessExpr
38[(?)this
39[(?)power
40[ObjectCreationExpr
41[ClassOrInterfaceType
42[NodeList
43[(?)2
44[ExpressionStmt
45[AssignExpr
46[FieldAccessExpr
47[(?)this
48[(?)toughness
49[ObjectCreationExpr
50[ClassOrInterfaceType
51[NodeList
52[(?)2
53[ExpressionStmt
54[VariableDeclarationExpr
55[ClassOrInterfaceType
56[NodeList
57[VariableDeclarator
58[VariableDeclaratorId
59[ObjectCreationExpr
60[ClassOrInterfaceType
61[NodeList
62[ObjectCreationExpr
63[ClassOrInterfaceType
64[NodeList
65[ObjectCreationExpr
66[ClassOrInterfaceType
67[ExpressionStmt
68[MethodCallExpr
69[(?)ability
70[(?)addTarget
71[NodeList
72[ObjectCreationExpr
73[ClassOrInterfaceType
74[ExpressionStmt
75[MethodCallExpr
76[(?)this
77[(?)addAbility
78[NodeList
79[(?)ability
80[ExpressionStmt
81[MethodCallExpr
82[(?)this
83[(?)addAbility
84[NodeList
85[ObjectCreationExpr
86[ClassOrInterfaceType
87[NodeList
88[ObjectCreationExpr
89[ClassOrInterfaceType
90[NodeList
91[(?)"{5}{B}{R}"
92[ExplicitConstructorInvocationStmt
93[NodeList
94[(?)ownerId
95[(?)33
96[(?)"Anathemancer"
97[FieldAccessExpr
98[(?)Rarity
99[(?)UNCOMMON
100[ArrayCreationExpr
101[NodeList
102[ArrayCreationLevel
103[ClassOrInterfaceType
104[ArrayInitializerExpr
105[NodeList
106[FieldAccessExpr
107[(?)CardType
108[(?)CREATURE
109[(?)"{1}{B}{R}"
110[ConstructorDeclaration
111[(?)Anathemancer
112[NodeList
113[Parameter
114[VariableDeclaratorId
115[ClassOrInterfaceType
116[BlockStmt
117[NodeList
118[ExplicitConstructorInvocationStmt
119[NodeList
120[(?)card
121[@Overridepublic Anathemancer copy() { return new Anathemancer(this);}
122[NodeList
123[MarkerAnnotationExpr
124[(?)Override
125[ClassOrInterfaceType
126[(?)copy
127[BlockStmt
128[NodeList
129[ReturnStmt
130[ObjectCreationExpr
131[ClassOrInterfaceType
132[NodeList
133[(?)this
134[NodeList
135[ClassOrInterfaceType
136[ClassOrInterfaceDeclaration
137[(?)AnathemancerCount
138[NodeList
139[@Overridepublic int calculate(Game game, Ability sourceAbility, Effect effect) { if (sourceAbility.getFirstTarget() == null) { return 0; } FilterLandPermanent filter = new FilterLandPermanent(); filter.add(Predicates.not(new SupertypePredicate("Basic"))); filter.add(new ControllerIdPredicate(sourceAbility.getFirstTarget())); return game.getBattlefield().count(filter, sourceAbility.getSourceId(), sourceAbility.getControllerId(), game);}
140[NodeList
141[MarkerAnnotationExpr
142[(?)Override
143[PrimitiveType
144[(?)calculate
145[NodeList
146[Parameter
147[VariableDeclaratorId
148[ClassOrInterfaceType
149[Parameter
150[VariableDeclaratorId
151[ClassOrInterfaceType
152[Parameter
153[VariableDeclaratorId
154[ClassOrInterfaceType
155[BlockStmt
156[NodeList
157[IfStmt
158[BinaryExpr
159[MethodCallExpr
160[(?)sourceAbility
161[(?)getFirstTarget
162[(?)null
163[BlockStmt
164[NodeList
165[ReturnStmt
166[(?)0
167[ExpressionStmt
168[VariableDeclarationExpr
169[ClassOrInterfaceType
170[NodeList
171[VariableDeclarator
172[VariableDeclaratorId
173[ObjectCreationExpr
174[ClassOrInterfaceType
175[ExpressionStmt
176[MethodCallExpr
177[(?)filter
178[(?)add
179[NodeList
180[MethodCallExpr
181[(?)Predicates
182[(?)not
183[NodeList
184[ObjectCreationExpr
185[ClassOrInterfaceType
186[NodeList
187[(?)"Basic"
188[ExpressionStmt
189[MethodCallExpr
190[(?)filter
191[(?)add
192[NodeList
193[ObjectCreationExpr
194[ClassOrInterfaceType
195[NodeList
196[MethodCallExpr
197[(?)sourceAbility
198[(?)getFirstTarget
199[ReturnStmt
200[MethodCallExpr
201[MethodCallExpr
202[(?)game
203[(?)getBattlefield
204[(?)count
205[NodeList
206[(?)filter
207[MethodCallExpr
208[(?)sourceAbility
209[(?)getSourceId
210[MethodCallExpr
211[(?)sourceAbility
212[(?)getControllerId
213[(?)game
214[@Overridepublic DynamicValue copy() { return new AnathemancerCount();}
215[NodeList
216[MarkerAnnotationExpr
217[(?)Override
218[ClassOrInterfaceType
219[(?)copy
220[BlockStmt
221[NodeList
222[ReturnStmt
223[ObjectCreationExpr
224[ClassOrInterfaceType
225[@Overridepublic String toString() { return "1";}
226[NodeList
227[MarkerAnnotationExpr
228[(?)Override
229[ClassOrInterfaceType
230[(?)toString
231[BlockStmt
232[NodeList
233[ReturnStmt
234[(?)"1"
235[@Overridepublic String getMessage() { return "nonbasic lands that player controls";}
236[NodeList
237[MarkerAnnotationExpr
238[(?)Override
239[ClassOrInterfaceType
240[(?)getMessage
241[BlockStmt
242[NodeList
243[ReturnStmt
244[(?)"nonbasic lands that player controls"
245[NodeList
246[ClassOrInterfaceType
589->590
590->591
591->592
591->593
593->594
594->595
594->596
596->597
597->598
597->599
594->600
600->601
601->602
602->603
603->604
604->605
604->606
603->607
601->608
608->609
609->610
610->611
610->612
609->613
609->614
614->615
601->616
616->617
617->618
618->619
618->620
617->621
617->622
622->623
601->624
624->625
625->626
626->627
626->628
625->629
629->630
629->631
631->632
601->633
633->634
634->635
635->636
635->637
634->638
638->639
638->640
640->641
601->642
642->643
643->644
643->645
645->646
646->647
646->648
648->649
648->650
650->651
651->652
651->653
653->654
654->655
601->656
656->657
657->658
657->659
657->660
660->661
661->662
601->663
663->664
664->665
664->666
664->667
667->668
601->669
669->670
670->671
670->672
670->673
673->674
674->675
674->676
676->677
677->678
677->679
679->680
601->681
681->682
682->683
682->684
682->685
682->686
686->687
686->688
682->689
689->690
690->691
689->692
689->693
693->694
694->695
695->696
695->697
682->698
593->699
699->700
699->701
701->702
702->703
702->704
699->705
705->706
706->707
707->708
708->709
593->710
710->711
711->712
712->713
710->714
710->715
710->716
716->717
717->718
718->719
719->720
719->721
721->722
591->723
723->724
590->725
725->726
725->727
727->728
728->729
729->730
730->731
728->732
728->733
728->734
734->735
735->736
735->737
734->738
738->739
738->740
734->741
741->742
741->743
728->744
744->745
745->746
746->747
747->748
748->749
748->750
747->751
746->752
752->753
753->754
754->755
745->756
756->757
757->758
757->759
759->760
760->761
760->762
762->763
745->764
764->765
765->766
765->767
765->768
768->769
769->770
769->771
769->772
772->773
773->774
773->775
775->776
745->777
777->778
778->779
778->780
778->781
781->782
782->783
782->784
784->785
785->786
785->787
745->788
788->789
789->790
790->791
790->792
789->793
789->794
794->795
794->796
796->797
796->798
794->799
799->800
799->801
794->802
727->803
803->804
804->805
805->806
803->807
803->808
803->809
809->810
810->811
811->812
812->813
727->814
814->815
815->816
816->817
814->818
814->819
814->820
820->821
821->822
822->823
727->824
824->825
825->826
826->827
824->828
824->829
824->830
830->831
831->832
832->833
725->834
834->835
