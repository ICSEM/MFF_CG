AST
7066[CompilationUnit
7067[NodeList
7068[ClassOrInterfaceDeclaration
7069[FinestHour
7070[NodeList
7071[ConstructorDeclaration
7072[FinestHour
7073[NodeList
7074[Parameter
7075[VariableDeclaratorId
7076[ClassOrInterfaceType
7077[BlockStmt
7078[NodeList
7079[ExpressionStmt
7080[AssignExpr
7081[FieldAccessExpr
7082[this
7083[expansionSetCode
7084["ARB"
7085[ExpressionStmt
7086[MethodCallExpr
7087[this
7088[addAbility
7089[NodeList
7090[ObjectCreationExpr
7091[ClassOrInterfaceType
7092[ExpressionStmt
7093[MethodCallExpr
7094[this
7095[addAbility
7096[NodeList
7097[ObjectCreationExpr
7098[ClassOrInterfaceType
7099[ExplicitConstructorInvocationStmt
7100[NodeList
7101[ownerId
7102[126
7103["Finest Hour"
7104[FieldAccessExpr
7105[Rarity
7106[RARE
7107[ArrayCreationExpr
7108[NodeList
7109[ArrayCreationLevel
7110[ClassOrInterfaceType
7111[ArrayInitializerExpr
7112[NodeList
7113[FieldAccessExpr
7114[CardType
7115[ENCHANTMENT
7116["{2}{G}{W}{U}"
7117[ConstructorDeclaration
7118[FinestHour
7119[NodeList
7120[Parameter
7121[VariableDeclaratorId
7122[ClassOrInterfaceType
7123[BlockStmt
7124[NodeList
7125[ExplicitConstructorInvocationStmt
7126[NodeList
7127[card
7128[@Overridepublic FinestHour copy() { return new FinestHour(this);}
7129[NodeList
7130[MarkerAnnotationExpr
7131[Override
7132[ClassOrInterfaceType
7133[copy
7134[BlockStmt
7135[NodeList
7136[ReturnStmt
7137[ObjectCreationExpr
7138[ClassOrInterfaceType
7139[NodeList
7140[this
7141[NodeList
7142[ClassOrInterfaceType
7143[ClassOrInterfaceDeclaration
7144[FinestHourAbility
7145[NodeList
7146[ConstructorDeclaration
7147[FinestHourAbility
7148[BlockStmt
7149[NodeList
7150[ExplicitConstructorInvocationStmt
7151[NodeList
7152[FieldAccessExpr
7153[Zone
7154[BATTLEFIELD
7155[ObjectCreationExpr
7156[ClassOrInterfaceType
7157[ConstructorDeclaration
7158[FinestHourAbility
7159[NodeList
7160[Parameter
7161[VariableDeclaratorId
7162[ClassOrInterfaceType
7163[BlockStmt
7164[NodeList
7165[ExplicitConstructorInvocationStmt
7166[NodeList
7167[ability
7168[@Overridepublic FinestHourAbility copy() { return new FinestHourAbility(this);}
7169[NodeList
7170[MarkerAnnotationExpr
7171[Override
7172[ClassOrInterfaceType
7173[copy
7174[BlockStmt
7175[NodeList
7176[ReturnStmt
7177[ObjectCreationExpr
7178[ClassOrInterfaceType
7179[NodeList
7180[this
7181[@Overridepublic boolean checkEventType(GameEvent event, Game game) { return event.getType() == EventType.DECLARED_ATTACKERS;}
7182[NodeList
7183[MarkerAnnotationExpr
7184[Override
7185[PrimitiveType
7186[checkEventType
7187[NodeList
7188[Parameter
7189[VariableDeclaratorId
7190[ClassOrInterfaceType
7191[Parameter
7192[VariableDeclaratorId
7193[ClassOrInterfaceType
7194[BlockStmt
7195[NodeList
7196[ReturnStmt
7197[BinaryExpr
7198[MethodCallExpr
7199[event
7200[getType
7201[FieldAccessExpr
7202[EventType
7203[DECLARED_ATTACKERS
7204[@Overridepublic boolean checkTrigger(GameEvent event, Game game) { if (game.getActivePlayerId().equals(this.controllerId)) { if (game.getCombat().attacksAlone()) { for (Effect effect : this.getEffects()) { effect.setTargetPointer(new FixedTarget(game.getCombat().getAttackers().get(0))); } return true; } } return false;}
7205[NodeList
7206[MarkerAnnotationExpr
7207[Override
7208[PrimitiveType
7209[checkTrigger
7210[NodeList
7211[Parameter
7212[VariableDeclaratorId
7213[ClassOrInterfaceType
7214[Parameter
7215[VariableDeclaratorId
7216[ClassOrInterfaceType
7217[BlockStmt
7218[NodeList
7219[IfStmt
7220[MethodCallExpr
7221[MethodCallExpr
7222[game
7223[getActivePlayerId
7224[equals
7225[NodeList
7226[FieldAccessExpr
7227[this
7228[controllerId
7229[BlockStmt
7230[NodeList
7231[IfStmt
7232[MethodCallExpr
7233[MethodCallExpr
7234[game
7235[getCombat
7236[attacksAlone
7237[BlockStmt
7238[NodeList
7239[ForeachStmt
7240[VariableDeclarationExpr
7241[ClassOrInterfaceType
7242[NodeList
7243[VariableDeclarator
7244[VariableDeclaratorId
7245[MethodCallExpr
7246[this
7247[getEffects
7248[BlockStmt
7249[NodeList
7250[ExpressionStmt
7251[MethodCallExpr
7252[effect
7253[setTargetPointer
7254[NodeList
7255[ObjectCreationExpr
7256[ClassOrInterfaceType
7257[NodeList
7258[MethodCallExpr
7259[MethodCallExpr
7260[MethodCallExpr
7261[game
7262[getCombat
7263[getAttackers
7264[get
7265[NodeList
7266[0
7267[ReturnStmt
7268[true
7269[ReturnStmt
7270[false
7271[@Overridepublic boolean checkInterveningIfClause(Game game) { return game.getTurn().getPhase(TurnPhase.COMBAT).getCount() == 0;}
7272[NodeList
7273[MarkerAnnotationExpr
7274[Override
7275[PrimitiveType
7276[checkInterveningIfClause
7277[NodeList
7278[Parameter
7279[VariableDeclaratorId
7280[ClassOrInterfaceType
7281[BlockStmt
7282[NodeList
7283[ReturnStmt
7284[BinaryExpr
7285[MethodCallExpr
7286[MethodCallExpr
7287[MethodCallExpr
7288[game
7289[getTurn
7290[getPhase
7291[NodeList
7292[FieldAccessExpr
7293[TurnPhase
7294[COMBAT
7295[getCount
7296[0
7297[@Overridepublic String getRule() { return "Whenever a creature you control attacks alone, if it's the first combat phase of the turn, untap that creature. After this phase, there is an additional combat phase.";}
7298[NodeList
7299[MarkerAnnotationExpr
7300[Override
7301[ClassOrInterfaceType
7302[getRule
7303[BlockStmt
7304[NodeList
7305[ReturnStmt
7306["Whenever a creature you control attacks alone, if it's the first combat phase of the turn, untap that creature. After this phase, there is an additional combat phase."
7307[NodeList
7308[ClassOrInterfaceType
7309[ClassOrInterfaceDeclaration
7310[FinestHourEffect
7311[NodeList
7312[ConstructorDeclaration
7313[FinestHourEffect
7314[BlockStmt
7315[NodeList
7316[ExplicitConstructorInvocationStmt
7317[NodeList
7318[FieldAccessExpr
7319[Outcome
7320[Benefit
7321[ConstructorDeclaration
7322[FinestHourEffect
7323[NodeList
7324[Parameter
7325[VariableDeclaratorId
7326[ClassOrInterfaceType
7327[BlockStmt
7328[NodeList
7329[ExplicitConstructorInvocationStmt
7330[NodeList
7331[effect
7332[@Overridepublic FinestHourEffect copy() { return new FinestHourEffect(this);}
7333[NodeList
7334[MarkerAnnotationExpr
7335[Override
7336[ClassOrInterfaceType
7337[copy
7338[BlockStmt
7339[NodeList
7340[ReturnStmt
7341[ObjectCreationExpr
7342[ClassOrInterfaceType
7343[NodeList
7344[this
7345[@Overridepublic boolean apply(Game game, Ability source) { Permanent permanent = game.getPermanent(this.getTargetPointer().getFirst(game, source)); if (permanent != null) { permanent.untap(game); game.getState().getTurnMods().add(new TurnMod(source.getControllerId(), TurnPhase.COMBAT, null, false)); return true; } return false;}
7346[NodeList
7347[MarkerAnnotationExpr
7348[Override
7349[PrimitiveType
7350[apply
7351[NodeList
7352[Parameter
7353[VariableDeclaratorId
7354[ClassOrInterfaceType
7355[Parameter
7356[VariableDeclaratorId
7357[ClassOrInterfaceType
7358[BlockStmt
7359[NodeList
7360[ExpressionStmt
7361[VariableDeclarationExpr
7362[ClassOrInterfaceType
7363[NodeList
7364[VariableDeclarator
7365[VariableDeclaratorId
7366[MethodCallExpr
7367[game
7368[getPermanent
7369[NodeList
7370[MethodCallExpr
7371[MethodCallExpr
7372[this
7373[getTargetPointer
7374[getFirst
7375[NodeList
7376[game
7377[source
7378[IfStmt
7379[BinaryExpr
7380[permanent
7381[null
7382[BlockStmt
7383[NodeList
7384[ExpressionStmt
7385[MethodCallExpr
7386[permanent
7387[untap
7388[NodeList
7389[game
7390[ExpressionStmt
7391[MethodCallExpr
7392[MethodCallExpr
7393[MethodCallExpr
7394[game
7395[getState
7396[getTurnMods
7397[add
7398[NodeList
7399[ObjectCreationExpr
7400[ClassOrInterfaceType
7401[NodeList
7402[MethodCallExpr
7403[source
7404[getControllerId
7405[FieldAccessExpr
7406[TurnPhase
7407[COMBAT
7408[null
7409[false
7410[ReturnStmt
7411[true
7412[ReturnStmt
7413[false
7414[NodeList
7415[ClassOrInterfaceType
7066->7067
7067->7068
7068->7069
7068->7070
7070->7071
7071->7072
7071->7073
7073->7074
7074->7075
7074->7076
7071->7077
7077->7078
7078->7079
7079->7080
7080->7081
7081->7082
7081->7083
7080->7084
7078->7085
7085->7086
7086->7087
7086->7088
7086->7089
7089->7090
7090->7091
7078->7092
7092->7093
7093->7094
7093->7095
7093->7096
7096->7097
7097->7098
7078->7099
7099->7100
7100->7101
7100->7102
7100->7103
7100->7104
7104->7105
7104->7106
7100->7107
7107->7108
7108->7109
7107->7110
7107->7111
7111->7112
7112->7113
7113->7114
7113->7115
7100->7116
7070->7117
7117->7118
7117->7119
7119->7120
7120->7121
7120->7122
7117->7123
7123->7124
7124->7125
7125->7126
7126->7127
7070->7128
7128->7129
7129->7130
7130->7131
7128->7132
7128->7133
7128->7134
7134->7135
7135->7136
7136->7137
7137->7138
7137->7139
7139->7140
7068->7141
7141->7142
7067->7143
7143->7144
7143->7145
7145->7146
7146->7147
7146->7148
7148->7149
7149->7150
7150->7151
7151->7152
7152->7153
7152->7154
7151->7155
7155->7156
7145->7157
7157->7158
7157->7159
7159->7160
7160->7161
7160->7162
7157->7163
7163->7164
7164->7165
7165->7166
7166->7167
7145->7168
7168->7169
7169->7170
7170->7171
7168->7172
7168->7173
7168->7174
7174->7175
7175->7176
7176->7177
7177->7178
7177->7179
7179->7180
7145->7181
7181->7182
7182->7183
7183->7184
7181->7185
7181->7186
7181->7187
7187->7188
7188->7189
7188->7190
7187->7191
7191->7192
7191->7193
7181->7194
7194->7195
7195->7196
7196->7197
7197->7198
7198->7199
7198->7200
7197->7201
7201->7202
7201->7203
7145->7204
7204->7205
7205->7206
7206->7207
7204->7208
7204->7209
7204->7210
7210->7211
7211->7212
7211->7213
7210->7214
7214->7215
7214->7216
7204->7217
7217->7218
7218->7219
7219->7220
7220->7221
7221->7222
7221->7223
7220->7224
7220->7225
7225->7226
7226->7227
7226->7228
7219->7229
7229->7230
7230->7231
7231->7232
7232->7233
7233->7234
7233->7235
7232->7236
7231->7237
7237->7238
7238->7239
7239->7240
7240->7241
7240->7242
7242->7243
7243->7244
7239->7245
7245->7246
7245->7247
7239->7248
7248->7249
7249->7250
7250->7251
7251->7252
7251->7253
7251->7254
7254->7255
7255->7256
7255->7257
7257->7258
7258->7259
7259->7260
7260->7261
7260->7262
7259->7263
7258->7264
7258->7265
7265->7266
7238->7267
7267->7268
7218->7269
7269->7270
7145->7271
7271->7272
7272->7273
7273->7274
7271->7275
7271->7276
7271->7277
7277->7278
7278->7279
7278->7280
7271->7281
7281->7282
7282->7283
7283->7284
7284->7285
7285->7286
7286->7287
7287->7288
7287->7289
7286->7290
7286->7291
7291->7292
7292->7293
7292->7294
7285->7295
7284->7296
7145->7297
7297->7298
7298->7299
7299->7300
7297->7301
7297->7302
7297->7303
7303->7304
7304->7305
7305->7306
7143->7307
7307->7308
7067->7309
7309->7310
7309->7311
7311->7312
7312->7313
7312->7314
7314->7315
7315->7316
7316->7317
7317->7318
7318->7319
7318->7320
7311->7321
7321->7322
7321->7323
7323->7324
7324->7325
7324->7326
7321->7327
7327->7328
7328->7329
7329->7330
7330->7331
7311->7332
7332->7333
7333->7334
7334->7335
7332->7336
7332->7337
7332->7338
7338->7339
7339->7340
7340->7341
7341->7342
7341->7343
7343->7344
7311->7345
7345->7346
7346->7347
7347->7348
7345->7349
7345->7350
7345->7351
7351->7352
7352->7353
7352->7354
7351->7355
7355->7356
7355->7357
7345->7358
7358->7359
7359->7360
7360->7361
7361->7362
7361->7363
7363->7364
7364->7365
7364->7366
7366->7367
7366->7368
7366->7369
7369->7370
7370->7371
7371->7372
7371->7373
7370->7374
7370->7375
7375->7376
7375->7377
7359->7378
7378->7379
7379->7380
7379->7381
7378->7382
7382->7383
7383->7384
7384->7385
7385->7386
7385->7387
7385->7388
7388->7389
7383->7390
7390->7391
7391->7392
7392->7393
7393->7394
7393->7395
7392->7396
7391->7397
7391->7398
7398->7399
7399->7400
7399->7401
7401->7402
7402->7403
7402->7404
7401->7405
7405->7406
7405->7407
7401->7408
7401->7409
7383->7410
7410->7411
7359->7412
7412->7413
7309->7414
7414->7415
