AST
4811[CompilationUnit
4812[NodeList
4813[ClassOrInterfaceDeclaration
4814[DragonAppeasement
4815[NodeList
4816[ConstructorDeclaration
4817[DragonAppeasement
4818[NodeList
4819[Parameter
4820[VariableDeclaratorId
4821[ClassOrInterfaceType
4822[BlockStmt
4823[NodeList
4824[ExpressionStmt
4825[AssignExpr
4826[FieldAccessExpr
4827[this
4828[expansionSetCode
4829["ARB"
4830[ExpressionStmt
4831[MethodCallExpr
4832[this
4833[addAbility
4834[NodeList
4835[ObjectCreationExpr
4836[ClassOrInterfaceType
4837[NodeList
4838[FieldAccessExpr
4839[Zone
4840[BATTLEFIELD
4841[ObjectCreationExpr
4842[ClassOrInterfaceType
4843[ExpressionStmt
4844[MethodCallExpr
4845[this
4846[addAbility
4847[NodeList
4848[ObjectCreationExpr
4849[ClassOrInterfaceType
4850[ExplicitConstructorInvocationStmt
4851[NodeList
4852[ownerId
4853[115
4854["Dragon Appeasement"
4855[FieldAccessExpr
4856[Rarity
4857[UNCOMMON
4858[ArrayCreationExpr
4859[NodeList
4860[ArrayCreationLevel
4861[ClassOrInterfaceType
4862[ArrayInitializerExpr
4863[NodeList
4864[FieldAccessExpr
4865[CardType
4866[ENCHANTMENT
4867["{3}{B}{R}{G}"
4868[ConstructorDeclaration
4869[DragonAppeasement
4870[NodeList
4871[Parameter
4872[VariableDeclaratorId
4873[ClassOrInterfaceType
4874[BlockStmt
4875[NodeList
4876[ExplicitConstructorInvocationStmt
4877[NodeList
4878[card
4879[@Overridepublic DragonAppeasement copy() { return new DragonAppeasement(this);}
4880[NodeList
4881[MarkerAnnotationExpr
4882[Override
4883[ClassOrInterfaceType
4884[copy
4885[BlockStmt
4886[NodeList
4887[ReturnStmt
4888[ObjectCreationExpr
4889[ClassOrInterfaceType
4890[NodeList
4891[this
4892[NodeList
4893[ClassOrInterfaceType
4894[ClassOrInterfaceDeclaration
4895[DragonAppeasementTriggeredAbility
4896[NodeList
4897[ConstructorDeclaration
4898[DragonAppeasementTriggeredAbility
4899[BlockStmt
4900[NodeList
4901[ExpressionStmt
4902[MethodCallExpr
4903[setLeavesTheBattlefieldTrigger
4904[NodeList
4905[true
4906[ExplicitConstructorInvocationStmt
4907[NodeList
4908[FieldAccessExpr
4909[Zone
4910[BATTLEFIELD
4911[ObjectCreationExpr
4912[ClassOrInterfaceType
4913[NodeList
4914[1
4915[true
4916[ConstructorDeclaration
4917[DragonAppeasementTriggeredAbility
4918[NodeList
4919[Parameter
4920[VariableDeclaratorId
4921[ClassOrInterfaceType
4922[BlockStmt
4923[NodeList
4924[ExplicitConstructorInvocationStmt
4925[NodeList
4926[ability
4927[@Overridepublic DragonAppeasementTriggeredAbility copy() { return new DragonAppeasementTriggeredAbility(this);}
4928[NodeList
4929[MarkerAnnotationExpr
4930[Override
4931[ClassOrInterfaceType
4932[copy
4933[BlockStmt
4934[NodeList
4935[ReturnStmt
4936[ObjectCreationExpr
4937[ClassOrInterfaceType
4938[NodeList
4939[this
4940[@Overridepublic boolean checkEventType(GameEvent event, Game game) { return event.getType() == EventType.SACRIFICED_PERMANENT;}
4941[NodeList
4942[MarkerAnnotationExpr
4943[Override
4944[PrimitiveType
4945[checkEventType
4946[NodeList
4947[Parameter
4948[VariableDeclaratorId
4949[ClassOrInterfaceType
4950[Parameter
4951[VariableDeclaratorId
4952[ClassOrInterfaceType
4953[BlockStmt
4954[NodeList
4955[ReturnStmt
4956[BinaryExpr
4957[MethodCallExpr
4958[event
4959[getType
4960[FieldAccessExpr
4961[EventType
4962[SACRIFICED_PERMANENT
4963[@Overridepublic boolean checkTrigger(GameEvent event, Game game) { return event.getPlayerId().equals(this.getControllerId()) && game.getLastKnownInformation(event.getTargetId(), Zone.BATTLEFIELD).getCardType().contains(CardType.CREATURE);}
4964[NodeList
4965[MarkerAnnotationExpr
4966[Override
4967[PrimitiveType
4968[checkTrigger
4969[NodeList
4970[Parameter
4971[VariableDeclaratorId
4972[ClassOrInterfaceType
4973[Parameter
4974[VariableDeclaratorId
4975[ClassOrInterfaceType
4976[BlockStmt
4977[NodeList
4978[ReturnStmt
4979[BinaryExpr
4980[MethodCallExpr
4981[MethodCallExpr
4982[event
4983[getPlayerId
4984[equals
4985[NodeList
4986[MethodCallExpr
4987[this
4988[getControllerId
4989[MethodCallExpr
4990[MethodCallExpr
4991[MethodCallExpr
4992[game
4993[getLastKnownInformation
4994[NodeList
4995[MethodCallExpr
4996[event
4997[getTargetId
4998[FieldAccessExpr
4999[Zone
5000[BATTLEFIELD
5001[getCardType
5002[contains
5003[NodeList
5004[FieldAccessExpr
5005[CardType
5006[CREATURE
5007[@Overridepublic String getRule() { return "Whenever you sacrifice a creature, " + super.getRule();}
5008[NodeList
5009[MarkerAnnotationExpr
5010[Override
5011[ClassOrInterfaceType
5012[getRule
5013[BlockStmt
5014[NodeList
5015[ReturnStmt
5016[BinaryExpr
5017["Whenever you sacrifice a creature, "
5018[MethodCallExpr
5019[super
5020[getRule
5021[NodeList
5022[ClassOrInterfaceType
4811->4812
4812->4813
4813->4814
4813->4815
4815->4816
4816->4817
4816->4818
4818->4819
4819->4820
4819->4821
4816->4822
4822->4823
4823->4824
4824->4825
4825->4826
4826->4827
4826->4828
4825->4829
4823->4830
4830->4831
4831->4832
4831->4833
4831->4834
4834->4835
4835->4836
4835->4837
4837->4838
4838->4839
4838->4840
4837->4841
4841->4842
4823->4843
4843->4844
4844->4845
4844->4846
4844->4847
4847->4848
4848->4849
4823->4850
4850->4851
4851->4852
4851->4853
4851->4854
4851->4855
4855->4856
4855->4857
4851->4858
4858->4859
4859->4860
4858->4861
4858->4862
4862->4863
4863->4864
4864->4865
4864->4866
4851->4867
4815->4868
4868->4869
4868->4870
4870->4871
4871->4872
4871->4873
4868->4874
4874->4875
4875->4876
4876->4877
4877->4878
4815->4879
4879->4880
4880->4881
4881->4882
4879->4883
4879->4884
4879->4885
4885->4886
4886->4887
4887->4888
4888->4889
4888->4890
4890->4891
4813->4892
4892->4893
4812->4894
4894->4895
4894->4896
4896->4897
4897->4898
4897->4899
4899->4900
4900->4901
4901->4902
4902->4903
4902->4904
4904->4905
4900->4906
4906->4907
4907->4908
4908->4909
4908->4910
4907->4911
4911->4912
4911->4913
4913->4914
4907->4915
4896->4916
4916->4917
4916->4918
4918->4919
4919->4920
4919->4921
4916->4922
4922->4923
4923->4924
4924->4925
4925->4926
4896->4927
4927->4928
4928->4929
4929->4930
4927->4931
4927->4932
4927->4933
4933->4934
4934->4935
4935->4936
4936->4937
4936->4938
4938->4939
4896->4940
4940->4941
4941->4942
4942->4943
4940->4944
4940->4945
4940->4946
4946->4947
4947->4948
4947->4949
4946->4950
4950->4951
4950->4952
4940->4953
4953->4954
4954->4955
4955->4956
4956->4957
4957->4958
4957->4959
4956->4960
4960->4961
4960->4962
4896->4963
4963->4964
4964->4965
4965->4966
4963->4967
4963->4968
4963->4969
4969->4970
4970->4971
4970->4972
4969->4973
4973->4974
4973->4975
4963->4976
4976->4977
4977->4978
4978->4979
4979->4980
4980->4981
4981->4982
4981->4983
4980->4984
4980->4985
4985->4986
4986->4987
4986->4988
4979->4989
4989->4990
4990->4991
4991->4992
4991->4993
4991->4994
4994->4995
4995->4996
4995->4997
4994->4998
4998->4999
4998->5000
4990->5001
4989->5002
4989->5003
5003->5004
5004->5005
5004->5006
4896->5007
5007->5008
5008->5009
5009->5010
5007->5011
5007->5012
5007->5013
5013->5014
5014->5015
5015->5016
5016->5017
5016->5018
5018->5019
5018->5020
4894->5021
5021->5022
