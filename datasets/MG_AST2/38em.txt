AST
6828[CompilationUnit
6829[NodeList
6830[ClassOrInterfaceDeclaration
6831[FiligreeAngel
6832[NodeList
6833[ConstructorDeclaration
6834[FiligreeAngel
6835[NodeList
6836[Parameter
6837[VariableDeclaratorId
6838[ClassOrInterfaceType
6839[BlockStmt
6840[NodeList
6841[ExpressionStmt
6842[AssignExpr
6843[FieldAccessExpr
6844[this
6845[expansionSetCode
6846["ARB"
6847[ExpressionStmt
6848[MethodCallExpr
6849[FieldAccessExpr
6850[this
6851[subtype
6852[add
6853[NodeList
6854["Angel"
6855[ExpressionStmt
6856[AssignExpr
6857[FieldAccessExpr
6858[this
6859[power
6860[ObjectCreationExpr
6861[ClassOrInterfaceType
6862[NodeList
6863[4
6864[ExpressionStmt
6865[AssignExpr
6866[FieldAccessExpr
6867[this
6868[toughness
6869[ObjectCreationExpr
6870[ClassOrInterfaceType
6871[NodeList
6872[4
6873[ExpressionStmt
6874[MethodCallExpr
6875[this
6876[addAbility
6877[NodeList
6878[MethodCallExpr
6879[FlyingAbility
6880[getInstance
6881[ExpressionStmt
6882[MethodCallExpr
6883[this
6884[addAbility
6885[NodeList
6886[ObjectCreationExpr
6887[ClassOrInterfaceType
6888[NodeList
6889[ObjectCreationExpr
6890[ClassOrInterfaceType
6891[ExplicitConstructorInvocationStmt
6892[NodeList
6893[ownerId
6894[6
6895["Filigree Angel"
6896[FieldAccessExpr
6897[Rarity
6898[RARE
6899[ArrayCreationExpr
6900[NodeList
6901[ArrayCreationLevel
6902[ClassOrInterfaceType
6903[ArrayInitializerExpr
6904[NodeList
6905[FieldAccessExpr
6906[CardType
6907[ARTIFACT
6908[FieldAccessExpr
6909[CardType
6910[CREATURE
6911["{5}{W}{W}{U}"
6912[ConstructorDeclaration
6913[FiligreeAngel
6914[NodeList
6915[Parameter
6916[VariableDeclaratorId
6917[ClassOrInterfaceType
6918[BlockStmt
6919[NodeList
6920[ExplicitConstructorInvocationStmt
6921[NodeList
6922[card
6923[@Overridepublic FiligreeAngel copy() { return new FiligreeAngel(this);}
6924[NodeList
6925[MarkerAnnotationExpr
6926[Override
6927[ClassOrInterfaceType
6928[copy
6929[BlockStmt
6930[NodeList
6931[ReturnStmt
6932[ObjectCreationExpr
6933[ClassOrInterfaceType
6934[NodeList
6935[this
6936[NodeList
6937[ClassOrInterfaceType
6938[ClassOrInterfaceDeclaration
6939[FiligreeAngelEffect
6940[NodeList
6941[FieldDeclaration
6942[ClassOrInterfaceType
6943[NodeList
6944[VariableDeclarator
6945[VariableDeclaratorId
6946[ObjectCreationExpr
6947[ClassOrInterfaceType
6948[InitializerDeclaration
6949[BlockStmt
6950[NodeList
6951[ExpressionStmt
6952[MethodCallExpr
6953[filter
6954[add
6955[NodeList
6956[ObjectCreationExpr
6957[ClassOrInterfaceType
6958[NodeList
6959[FieldAccessExpr
6960[CardType
6961[ARTIFACT
6962[ConstructorDeclaration
6963[FiligreeAngelEffect
6964[BlockStmt
6965[NodeList
6966[ExpressionStmt
6967[AssignExpr
6968[staticText
6969["you gain 3 life for each artifact you control"
6970[ExplicitConstructorInvocationStmt
6971[NodeList
6972[FieldAccessExpr
6973[Outcome
6974[GainLife
6975[ConstructorDeclaration
6976[FiligreeAngelEffect
6977[NodeList
6978[Parameter
6979[VariableDeclaratorId
6980[ClassOrInterfaceType
6981[BlockStmt
6982[NodeList
6983[ExplicitConstructorInvocationStmt
6984[NodeList
6985[effect
6986[@Overridepublic boolean apply(Game game, Ability source) { Player player = game.getPlayer(source.getControllerId()); if (player != null) { int life = game.getBattlefield().count(filter, source.getSourceId(), source.getControllerId(), game) * 3; player.gainLife(life, game); } return true;}
6987[NodeList
6988[MarkerAnnotationExpr
6989[Override
6990[PrimitiveType
6991[apply
6992[NodeList
6993[Parameter
6994[VariableDeclaratorId
6995[ClassOrInterfaceType
6996[Parameter
6997[VariableDeclaratorId
6998[ClassOrInterfaceType
6999[BlockStmt
7000[NodeList
7001[ExpressionStmt
7002[VariableDeclarationExpr
7003[ClassOrInterfaceType
7004[NodeList
7005[VariableDeclarator
7006[VariableDeclaratorId
7007[MethodCallExpr
7008[game
7009[getPlayer
7010[NodeList
7011[MethodCallExpr
7012[source
7013[getControllerId
7014[IfStmt
7015[BinaryExpr
7016[player
7017[null
7018[BlockStmt
7019[NodeList
7020[ExpressionStmt
7021[VariableDeclarationExpr
7022[PrimitiveType
7023[NodeList
7024[VariableDeclarator
7025[VariableDeclaratorId
7026[BinaryExpr
7027[MethodCallExpr
7028[MethodCallExpr
7029[game
7030[getBattlefield
7031[count
7032[NodeList
7033[filter
7034[MethodCallExpr
7035[source
7036[getSourceId
7037[MethodCallExpr
7038[source
7039[getControllerId
7040[game
7041[3
7042[ExpressionStmt
7043[MethodCallExpr
7044[player
7045[gainLife
7046[NodeList
7047[life
7048[game
7049[ReturnStmt
7050[true
7051[@Overridepublic FiligreeAngelEffect copy() { return new FiligreeAngelEffect(this);}
7052[NodeList
7053[MarkerAnnotationExpr
7054[Override
7055[ClassOrInterfaceType
7056[copy
7057[BlockStmt
7058[NodeList
7059[ReturnStmt
7060[ObjectCreationExpr
7061[ClassOrInterfaceType
7062[NodeList
7063[this
7064[NodeList
7065[ClassOrInterfaceType
6828->6829
6829->6830
6830->6831
6830->6832
6832->6833
6833->6834
6833->6835
6835->6836
6836->6837
6836->6838
6833->6839
6839->6840
6840->6841
6841->6842
6842->6843
6843->6844
6843->6845
6842->6846
6840->6847
6847->6848
6848->6849
6849->6850
6849->6851
6848->6852
6848->6853
6853->6854
6840->6855
6855->6856
6856->6857
6857->6858
6857->6859
6856->6860
6860->6861
6860->6862
6862->6863
6840->6864
6864->6865
6865->6866
6866->6867
6866->6868
6865->6869
6869->6870
6869->6871
6871->6872
6840->6873
6873->6874
6874->6875
6874->6876
6874->6877
6877->6878
6878->6879
6878->6880
6840->6881
6881->6882
6882->6883
6882->6884
6882->6885
6885->6886
6886->6887
6886->6888
6888->6889
6889->6890
6840->6891
6891->6892
6892->6893
6892->6894
6892->6895
6892->6896
6896->6897
6896->6898
6892->6899
6899->6900
6900->6901
6899->6902
6899->6903
6903->6904
6904->6905
6905->6906
6905->6907
6904->6908
6908->6909
6908->6910
6892->6911
6832->6912
6912->6913
6912->6914
6914->6915
6915->6916
6915->6917
6912->6918
6918->6919
6919->6920
6920->6921
6921->6922
6832->6923
6923->6924
6924->6925
6925->6926
6923->6927
6923->6928
6923->6929
6929->6930
6930->6931
6931->6932
6932->6933
6932->6934
6934->6935
6830->6936
6936->6937
6829->6938
6938->6939
6938->6940
6940->6941
6941->6942
6941->6943
6943->6944
6944->6945
6944->6946
6946->6947
6940->6948
6948->6949
6949->6950
6950->6951
6951->6952
6952->6953
6952->6954
6952->6955
6955->6956
6956->6957
6956->6958
6958->6959
6959->6960
6959->6961
6940->6962
6962->6963
6962->6964
6964->6965
6965->6966
6966->6967
6967->6968
6967->6969
6965->6970
6970->6971
6971->6972
6972->6973
6972->6974
6940->6975
6975->6976
6975->6977
6977->6978
6978->6979
6978->6980
6975->6981
6981->6982
6982->6983
6983->6984
6984->6985
6940->6986
6986->6987
6987->6988
6988->6989
6986->6990
6986->6991
6986->6992
6992->6993
6993->6994
6993->6995
6992->6996
6996->6997
6996->6998
6986->6999
6999->7000
7000->7001
7001->7002
7002->7003
7002->7004
7004->7005
7005->7006
7005->7007
7007->7008
7007->7009
7007->7010
7010->7011
7011->7012
7011->7013
7000->7014
7014->7015
7015->7016
7015->7017
7014->7018
7018->7019
7019->7020
7020->7021
7021->7022
7021->7023
7023->7024
7024->7025
7024->7026
7026->7027
7027->7028
7028->7029
7028->7030
7027->7031
7027->7032
7032->7033
7032->7034
7034->7035
7034->7036
7032->7037
7037->7038
7037->7039
7032->7040
7026->7041
7019->7042
7042->7043
7043->7044
7043->7045
7043->7046
7046->7047
7046->7048
7000->7049
7049->7050
6940->7051
7051->7052
7052->7053
7053->7054
7051->7055
7051->7056
7051->7057
7057->7058
7058->7059
7059->7060
7060->7061
7060->7062
7062->7063
6938->7064
7064->7065
