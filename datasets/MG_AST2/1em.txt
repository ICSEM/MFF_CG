AST
197[CompilationUnit
198[NodeList
199[ClassOrInterfaceDeclaration
200[AgonizingDemise
201[NodeList
202[FieldDeclaration
203[ClassOrInterfaceType
204[NodeList
205[VariableDeclarator
206[VariableDeclaratorId
207[ObjectCreationExpr
208[ClassOrInterfaceType
209[NodeList
210["nonblack creature"
211[InitializerDeclaration
212[BlockStmt
213[NodeList
214[ExpressionStmt
215[MethodCallExpr
216[filterNonBlackCreature
217[add
218[NodeList
219[MethodCallExpr
220[Predicates
221[not
222[NodeList
223[ObjectCreationExpr
224[ClassOrInterfaceType
225[NodeList
226[FieldAccessExpr
227[ObjectColor
228[BLACK
229[ConstructorDeclaration
230[AgonizingDemise
231[NodeList
232[Parameter
233[VariableDeclaratorId
234[ClassOrInterfaceType
235[BlockStmt
236[NodeList
237[ExpressionStmt
238[AssignExpr
239[FieldAccessExpr
240[this
241[expansionSetCode
242["DDH"
243[ExpressionStmt
244[MethodCallExpr
245[this
246[addAbility
247[NodeList
248[ObjectCreationExpr
249[ClassOrInterfaceType
250[NodeList
251["{1}{R}"
252[ExpressionStmt
253[MethodCallExpr
254[MethodCallExpr
255[this
256[getSpellAbility
257[addEffect
258[NodeList
259[ObjectCreationExpr
260[ClassOrInterfaceType
261[ExpressionStmt
262[MethodCallExpr
263[MethodCallExpr
264[this
265[getSpellAbility
266[addTarget
267[NodeList
268[ObjectCreationExpr
269[ClassOrInterfaceType
270[NodeList
271[filterNonBlackCreature
272[ExpressionStmt
273[MethodCallExpr
274[MethodCallExpr
275[this
276[getSpellAbility
277[addEffect
278[NodeList
279[ObjectCreationExpr
280[ClassOrInterfaceType
281[NodeList
282[ObjectCreationExpr
283[ClassOrInterfaceType
284[MethodCallExpr
285[KickedCondition
286[getInstance
287["If {this} was kicked, it deals damage equal to that creature's power to the creature's controller."
288[ExplicitConstructorInvocationStmt
289[NodeList
290[ownerId
291[66
292["Agonizing Demise"
293[FieldAccessExpr
294[Rarity
295[COMMON
296[ArrayCreationExpr
297[NodeList
298[ArrayCreationLevel
299[ClassOrInterfaceType
300[ArrayInitializerExpr
301[NodeList
302[FieldAccessExpr
303[CardType
304[INSTANT
305["{3}{B}"
306[ConstructorDeclaration
307[AgonizingDemise
308[NodeList
309[Parameter
310[VariableDeclaratorId
311[ClassOrInterfaceType
312[BlockStmt
313[NodeList
314[ExplicitConstructorInvocationStmt
315[NodeList
316[card
317[@Overridepublic AgonizingDemise copy() { return new AgonizingDemise(this);}
318[NodeList
319[MarkerAnnotationExpr
320[Override
321[ClassOrInterfaceType
322[copy
323[BlockStmt
324[NodeList
325[ReturnStmt
326[ObjectCreationExpr
327[ClassOrInterfaceType
328[NodeList
329[this
330[NodeList
331[ClassOrInterfaceType
332[ClassOrInterfaceDeclaration
333[AgonizingDemiseEffect
334[NodeList
335[ConstructorDeclaration
336[AgonizingDemiseEffect
337[BlockStmt
338[NodeList
339[ExplicitConstructorInvocationStmt
340[NodeList
341[FieldAccessExpr
342[Outcome
343[Damage
344[ConstructorDeclaration
345[AgonizingDemiseEffect
346[NodeList
347[Parameter
348[VariableDeclaratorId
349[ClassOrInterfaceType
350[BlockStmt
351[NodeList
352[ExplicitConstructorInvocationStmt
353[NodeList
354[effect
355[@Overridepublic AgonizingDemiseEffect copy() { return new AgonizingDemiseEffect(this);}
356[NodeList
357[MarkerAnnotationExpr
358[Override
359[ClassOrInterfaceType
360[copy
361[BlockStmt
362[NodeList
363[ReturnStmt
364[ObjectCreationExpr
365[ClassOrInterfaceType
366[NodeList
367[this
368[@Overridepublic boolean apply(Game game, Ability source) { Permanent permanent = game.getPermanentOrLKIBattlefield(this.getTargetPointer().getFirst(game, source)); if (permanent != null) { Player controller = game.getPlayer(permanent.getControllerId()); if (controller != null) { int amount = permanent.getPower().getValue(); controller.damage(amount, source.getSourceId(), game, false, true); return true; } } return false;}
369[NodeList
370[MarkerAnnotationExpr
371[Override
372[PrimitiveType
373[apply
374[NodeList
375[Parameter
376[VariableDeclaratorId
377[ClassOrInterfaceType
378[Parameter
379[VariableDeclaratorId
380[ClassOrInterfaceType
381[BlockStmt
382[NodeList
383[ExpressionStmt
384[VariableDeclarationExpr
385[ClassOrInterfaceType
386[NodeList
387[VariableDeclarator
388[VariableDeclaratorId
389[MethodCallExpr
390[game
391[getPermanentOrLKIBattlefield
392[NodeList
393[MethodCallExpr
394[MethodCallExpr
395[this
396[getTargetPointer
397[getFirst
398[NodeList
399[game
400[source
401[IfStmt
402[BinaryExpr
403[permanent
404[null
405[BlockStmt
406[NodeList
407[ExpressionStmt
408[VariableDeclarationExpr
409[ClassOrInterfaceType
410[NodeList
411[VariableDeclarator
412[VariableDeclaratorId
413[MethodCallExpr
414[game
415[getPlayer
416[NodeList
417[MethodCallExpr
418[permanent
419[getControllerId
420[IfStmt
421[BinaryExpr
422[controller
423[null
424[BlockStmt
425[NodeList
426[ExpressionStmt
427[VariableDeclarationExpr
428[PrimitiveType
429[NodeList
430[VariableDeclarator
431[VariableDeclaratorId
432[MethodCallExpr
433[MethodCallExpr
434[permanent
435[getPower
436[getValue
437[ExpressionStmt
438[MethodCallExpr
439[controller
440[damage
441[NodeList
442[amount
443[MethodCallExpr
444[source
445[getSourceId
446[game
447[false
448[true
449[ReturnStmt
450[true
451[ReturnStmt
452[false
453[NodeList
454[ClassOrInterfaceType
197->198
198->199
199->200
199->201
201->202
202->203
202->204
204->205
205->206
205->207
207->208
207->209
209->210
201->211
211->212
212->213
213->214
214->215
215->216
215->217
215->218
218->219
219->220
219->221
219->222
222->223
223->224
223->225
225->226
226->227
226->228
201->229
229->230
229->231
231->232
232->233
232->234
229->235
235->236
236->237
237->238
238->239
239->240
239->241
238->242
236->243
243->244
244->245
244->246
244->247
247->248
248->249
248->250
250->251
236->252
252->253
253->254
254->255
254->256
253->257
253->258
258->259
259->260
236->261
261->262
262->263
263->264
263->265
262->266
262->267
267->268
268->269
268->270
270->271
236->272
272->273
273->274
274->275
274->276
273->277
273->278
278->279
279->280
279->281
281->282
282->283
281->284
284->285
284->286
281->287
236->288
288->289
289->290
289->291
289->292
289->293
293->294
293->295
289->296
296->297
297->298
296->299
296->300
300->301
301->302
302->303
302->304
289->305
201->306
306->307
306->308
308->309
309->310
309->311
306->312
312->313
313->314
314->315
315->316
201->317
317->318
318->319
319->320
317->321
317->322
317->323
323->324
324->325
325->326
326->327
326->328
328->329
199->330
330->331
198->332
332->333
332->334
334->335
335->336
335->337
337->338
338->339
339->340
340->341
341->342
341->343
334->344
344->345
344->346
346->347
347->348
347->349
344->350
350->351
351->352
352->353
353->354
334->355
355->356
356->357
357->358
355->359
355->360
355->361
361->362
362->363
363->364
364->365
364->366
366->367
334->368
368->369
369->370
370->371
368->372
368->373
368->374
374->375
375->376
375->377
374->378
378->379
378->380
368->381
381->382
382->383
383->384
384->385
384->386
386->387
387->388
387->389
389->390
389->391
389->392
392->393
393->394
394->395
394->396
393->397
393->398
398->399
398->400
382->401
401->402
402->403
402->404
401->405
405->406
406->407
407->408
408->409
408->410
410->411
411->412
411->413
413->414
413->415
413->416
416->417
417->418
417->419
406->420
420->421
421->422
421->423
420->424
424->425
425->426
426->427
427->428
427->429
429->430
430->431
430->432
432->433
433->434
433->435
432->436
425->437
437->438
438->439
438->440
438->441
441->442
441->443
443->444
443->445
441->446
441->447
441->448
425->449
449->450
382->451
451->452
332->453
453->454
