AST
1564[CompilationUnit
1565[NodeList
1566[ClassOrInterfaceDeclaration
1567[AvenMimeomancer
1568[NodeList
1569[ConstructorDeclaration
1570[AvenMimeomancer
1571[NodeList
1572[Parameter
1573[VariableDeclaratorId
1574[ClassOrInterfaceType
1575[BlockStmt
1576[NodeList
1577[ExpressionStmt
1578[AssignExpr
1579[FieldAccessExpr
1580[this
1581[expansionSetCode
1582["ARB"
1583[ExpressionStmt
1584[MethodCallExpr
1585[FieldAccessExpr
1586[this
1587[subtype
1588[add
1589[NodeList
1590["Bird"
1591[ExpressionStmt
1592[MethodCallExpr
1593[FieldAccessExpr
1594[this
1595[subtype
1596[add
1597[NodeList
1598["Wizard"
1599[ExpressionStmt
1600[AssignExpr
1601[FieldAccessExpr
1602[this
1603[power
1604[ObjectCreationExpr
1605[ClassOrInterfaceType
1606[NodeList
1607[3
1608[ExpressionStmt
1609[AssignExpr
1610[FieldAccessExpr
1611[this
1612[toughness
1613[ObjectCreationExpr
1614[ClassOrInterfaceType
1615[NodeList
1616[1
1617[ExpressionStmt
1618[MethodCallExpr
1619[this
1620[addAbility
1621[NodeList
1622[MethodCallExpr
1623[FlyingAbility
1624[getInstance
1625[ExpressionStmt
1626[VariableDeclarationExpr
1627[ClassOrInterfaceType
1628[NodeList
1629[VariableDeclarator
1630[VariableDeclaratorId
1631[ObjectCreationExpr
1632[ClassOrInterfaceType
1633[NodeList
1634[FieldAccessExpr
1635[Zone
1636[BATTLEFIELD
1637[ObjectCreationExpr
1638[ClassOrInterfaceType
1639[NodeList
1640[MethodCallExpr
1641[FieldAccessExpr
1642[CounterType
1643[FEATHER
1644[createInstance
1645[FieldAccessExpr
1646[TargetController
1647[YOU
1648[true
1649[ExpressionStmt
1650[MethodCallExpr
1651[ability
1652[addTarget
1653[NodeList
1654[ObjectCreationExpr
1655[ClassOrInterfaceType
1656[ExpressionStmt
1657[MethodCallExpr
1658[ability
1659[addEffect
1660[NodeList
1661[ObjectCreationExpr
1662[ClassOrInterfaceType
1663[ExpressionStmt
1664[MethodCallExpr
1665[ability
1666[addEffect
1667[NodeList
1668[ObjectCreationExpr
1669[ClassOrInterfaceType
1670[ExpressionStmt
1671[MethodCallExpr
1672[this
1673[addAbility
1674[NodeList
1675[ability
1676[ExplicitConstructorInvocationStmt
1677[NodeList
1678[ownerId
1679[2
1680["Aven Mimeomancer"
1681[FieldAccessExpr
1682[Rarity
1683[RARE
1684[ArrayCreationExpr
1685[NodeList
1686[ArrayCreationLevel
1687[ClassOrInterfaceType
1688[ArrayInitializerExpr
1689[NodeList
1690[FieldAccessExpr
1691[CardType
1692[CREATURE
1693["{1}{W}{U}"
1694[ConstructorDeclaration
1695[AvenMimeomancer
1696[NodeList
1697[Parameter
1698[VariableDeclaratorId
1699[ClassOrInterfaceType
1700[BlockStmt
1701[NodeList
1702[ExplicitConstructorInvocationStmt
1703[NodeList
1704[card
1705[@Overridepublic AvenMimeomancer copy() { return new AvenMimeomancer(this);}
1706[NodeList
1707[MarkerAnnotationExpr
1708[Override
1709[ClassOrInterfaceType
1710[copy
1711[BlockStmt
1712[NodeList
1713[ReturnStmt
1714[ObjectCreationExpr
1715[ClassOrInterfaceType
1716[NodeList
1717[this
1718[NodeList
1719[ClassOrInterfaceType
1720[ClassOrInterfaceDeclaration
1721[AvenEffect
1722[NodeList
1723[ConstructorDeclaration
1724[AvenEffect
1725[BlockStmt
1726[NodeList
1727[ExplicitConstructorInvocationStmt
1728[NodeList
1729[FieldAccessExpr
1730[Duration
1731[Custom
1732[FieldAccessExpr
1733[Layer
1734[PTChangingEffects_7
1735[FieldAccessExpr
1736[SubLayer
1737[SetPT_7b
1738[FieldAccessExpr
1739[Outcome
1740[BoostCreature
1741[ConstructorDeclaration
1742[AvenEffect
1743[NodeList
1744[Parameter
1745[VariableDeclaratorId
1746[ClassOrInterfaceType
1747[BlockStmt
1748[NodeList
1749[ExplicitConstructorInvocationStmt
1750[NodeList
1751[effect
1752[@Overridepublic AvenEffect copy() { return new AvenEffect(this);}
1753[NodeList
1754[MarkerAnnotationExpr
1755[Override
1756[ClassOrInterfaceType
1757[copy
1758[BlockStmt
1759[NodeList
1760[ReturnStmt
1761[ObjectCreationExpr
1762[ClassOrInterfaceType
1763[NodeList
1764[this
1765[@Overridepublic boolean apply(Game game, Ability source) { Permanent target = game.getPermanent(source.getFirstTarget()); if (target != null) { target.getPower().setValue(3); target.getToughness().setValue(1); return true; } return false;}
1766[NodeList
1767[MarkerAnnotationExpr
1768[Override
1769[PrimitiveType
1770[apply
1771[NodeList
1772[Parameter
1773[VariableDeclaratorId
1774[ClassOrInterfaceType
1775[Parameter
1776[VariableDeclaratorId
1777[ClassOrInterfaceType
1778[BlockStmt
1779[NodeList
1780[ExpressionStmt
1781[VariableDeclarationExpr
1782[ClassOrInterfaceType
1783[NodeList
1784[VariableDeclarator
1785[VariableDeclaratorId
1786[MethodCallExpr
1787[game
1788[getPermanent
1789[NodeList
1790[MethodCallExpr
1791[source
1792[getFirstTarget
1793[IfStmt
1794[BinaryExpr
1795[target
1796[null
1797[BlockStmt
1798[NodeList
1799[ExpressionStmt
1800[MethodCallExpr
1801[MethodCallExpr
1802[target
1803[getPower
1804[setValue
1805[NodeList
1806[3
1807[ExpressionStmt
1808[MethodCallExpr
1809[MethodCallExpr
1810[target
1811[getToughness
1812[setValue
1813[NodeList
1814[1
1815[ReturnStmt
1816[true
1817[ReturnStmt
1818[false
1819[@Overridepublic boolean isInactive(Ability source, Game game) { Permanent creature = game.getPermanent(this.targetPointer.getFirst(game, source)); if (creature != null && creature.getCounters().getCount(CounterType.FEATHER) < 1) { return true; } return false;}
1820[NodeList
1821[MarkerAnnotationExpr
1822[Override
1823[PrimitiveType
1824[isInactive
1825[NodeList
1826[Parameter
1827[VariableDeclaratorId
1828[ClassOrInterfaceType
1829[Parameter
1830[VariableDeclaratorId
1831[ClassOrInterfaceType
1832[BlockStmt
1833[NodeList
1834[ExpressionStmt
1835[VariableDeclarationExpr
1836[ClassOrInterfaceType
1837[NodeList
1838[VariableDeclarator
1839[VariableDeclaratorId
1840[MethodCallExpr
1841[game
1842[getPermanent
1843[NodeList
1844[MethodCallExpr
1845[FieldAccessExpr
1846[this
1847[targetPointer
1848[getFirst
1849[NodeList
1850[game
1851[source
1852[IfStmt
1853[BinaryExpr
1854[BinaryExpr
1855[creature
1856[null
1857[BinaryExpr
1858[MethodCallExpr
1859[MethodCallExpr
1860[creature
1861[getCounters
1862[getCount
1863[NodeList
1864[FieldAccessExpr
1865[CounterType
1866[FEATHER
1867[1
1868[BlockStmt
1869[NodeList
1870[ReturnStmt
1871[true
1872[ReturnStmt
1873[false
1874[@Overridepublic String getText(Mode mode) { StringBuilder sb = new StringBuilder(); sb.append("If you do, that creature has base power and toughness 3/1 and has flying for as long as it has a feather counter on it"); return sb.toString();}
1875[NodeList
1876[MarkerAnnotationExpr
1877[Override
1878[ClassOrInterfaceType
1879[getText
1880[NodeList
1881[Parameter
1882[VariableDeclaratorId
1883[ClassOrInterfaceType
1884[BlockStmt
1885[NodeList
1886[ExpressionStmt
1887[VariableDeclarationExpr
1888[ClassOrInterfaceType
1889[NodeList
1890[VariableDeclarator
1891[VariableDeclaratorId
1892[ObjectCreationExpr
1893[ClassOrInterfaceType
1894[ExpressionStmt
1895[MethodCallExpr
1896[sb
1897[append
1898[NodeList
1899["If you do, that creature has base power and toughness 3/1 and has flying for as long as it has a feather counter on it"
1900[ReturnStmt
1901[MethodCallExpr
1902[sb
1903[toString
1904[NodeList
1905[ClassOrInterfaceType
1906[ClassOrInterfaceDeclaration
1907[AvenEffect2
1908[NodeList
1909[ConstructorDeclaration
1910[AvenEffect2
1911[BlockStmt
1912[NodeList
1913[ExplicitConstructorInvocationStmt
1914[NodeList
1915[FieldAccessExpr
1916[Duration
1917[Custom
1918[FieldAccessExpr
1919[Layer
1920[AbilityAddingRemovingEffects_6
1921[FieldAccessExpr
1922[SubLayer
1923[NA
1924[FieldAccessExpr
1925[Outcome
1926[BoostCreature
1927[ConstructorDeclaration
1928[AvenEffect2
1929[NodeList
1930[Parameter
1931[VariableDeclaratorId
1932[ClassOrInterfaceType
1933[BlockStmt
1934[NodeList
1935[ExplicitConstructorInvocationStmt
1936[NodeList
1937[effect
1938[@Overridepublic AvenEffect2 copy() { return new AvenEffect2(this);}
1939[NodeList
1940[MarkerAnnotationExpr
1941[Override
1942[ClassOrInterfaceType
1943[copy
1944[BlockStmt
1945[NodeList
1946[ReturnStmt
1947[ObjectCreationExpr
1948[ClassOrInterfaceType
1949[NodeList
1950[this
1951[@Overridepublic boolean apply(Game game, Ability source) { Permanent target = game.getPermanent(source.getFirstTarget()); if (target != null) { if (!target.getAbilities().contains(FlyingAbility.getInstance())) { target.addAbility(FlyingAbility.getInstance(), source.getSourceId(), game); return true; } } return false;}
1952[NodeList
1953[MarkerAnnotationExpr
1954[Override
1955[PrimitiveType
1956[apply
1957[NodeList
1958[Parameter
1959[VariableDeclaratorId
1960[ClassOrInterfaceType
1961[Parameter
1962[VariableDeclaratorId
1963[ClassOrInterfaceType
1964[BlockStmt
1965[NodeList
1966[ExpressionStmt
1967[VariableDeclarationExpr
1968[ClassOrInterfaceType
1969[NodeList
1970[VariableDeclarator
1971[VariableDeclaratorId
1972[MethodCallExpr
1973[game
1974[getPermanent
1975[NodeList
1976[MethodCallExpr
1977[source
1978[getFirstTarget
1979[IfStmt
1980[BinaryExpr
1981[target
1982[null
1983[BlockStmt
1984[NodeList
1985[IfStmt
1986[UnaryExpr
1987[MethodCallExpr
1988[MethodCallExpr
1989[target
1990[getAbilities
1991[contains
1992[NodeList
1993[MethodCallExpr
1994[FlyingAbility
1995[getInstance
1996[BlockStmt
1997[NodeList
1998[ExpressionStmt
1999[MethodCallExpr
2000[target
2001[addAbility
2002[NodeList
2003[MethodCallExpr
2004[FlyingAbility
2005[getInstance
2006[MethodCallExpr
2007[source
2008[getSourceId
2009[game
2010[ReturnStmt
2011[true
2012[ReturnStmt
2013[false
2014[@Overridepublic boolean isInactive(Ability source, Game game) { Permanent creature = game.getPermanent(this.targetPointer.getFirst(game, source)); if (creature != null && creature.getCounters().getCount(CounterType.FEATHER) < 1) { return true; } return false;}
2015[NodeList
2016[MarkerAnnotationExpr
2017[Override
2018[PrimitiveType
2019[isInactive
2020[NodeList
2021[Parameter
2022[VariableDeclaratorId
2023[ClassOrInterfaceType
2024[Parameter
2025[VariableDeclaratorId
2026[ClassOrInterfaceType
2027[BlockStmt
2028[NodeList
2029[ExpressionStmt
2030[VariableDeclarationExpr
2031[ClassOrInterfaceType
2032[NodeList
2033[VariableDeclarator
2034[VariableDeclaratorId
2035[MethodCallExpr
2036[game
2037[getPermanent
2038[NodeList
2039[MethodCallExpr
2040[FieldAccessExpr
2041[this
2042[targetPointer
2043[getFirst
2044[NodeList
2045[game
2046[source
2047[IfStmt
2048[BinaryExpr
2049[BinaryExpr
2050[creature
2051[null
2052[BinaryExpr
2053[MethodCallExpr
2054[MethodCallExpr
2055[creature
2056[getCounters
2057[getCount
2058[NodeList
2059[FieldAccessExpr
2060[CounterType
2061[FEATHER
2062[1
2063[BlockStmt
2064[NodeList
2065[ReturnStmt
2066[true
2067[ReturnStmt
2068[false
2069[NodeList
2070[ClassOrInterfaceType
1564->1565
1565->1566
1566->1567
1566->1568
1568->1569
1569->1570
1569->1571
1571->1572
1572->1573
1572->1574
1569->1575
1575->1576
1576->1577
1577->1578
1578->1579
1579->1580
1579->1581
1578->1582
1576->1583
1583->1584
1584->1585
1585->1586
1585->1587
1584->1588
1584->1589
1589->1590
1576->1591
1591->1592
1592->1593
1593->1594
1593->1595
1592->1596
1592->1597
1597->1598
1576->1599
1599->1600
1600->1601
1601->1602
1601->1603
1600->1604
1604->1605
1604->1606
1606->1607
1576->1608
1608->1609
1609->1610
1610->1611
1610->1612
1609->1613
1613->1614
1613->1615
1615->1616
1576->1617
1617->1618
1618->1619
1618->1620
1618->1621
1621->1622
1622->1623
1622->1624
1576->1625
1625->1626
1626->1627
1626->1628
1628->1629
1629->1630
1629->1631
1631->1632
1631->1633
1633->1634
1634->1635
1634->1636
1633->1637
1637->1638
1637->1639
1639->1640
1640->1641
1641->1642
1641->1643
1640->1644
1633->1645
1645->1646
1645->1647
1633->1648
1576->1649
1649->1650
1650->1651
1650->1652
1650->1653
1653->1654
1654->1655
1576->1656
1656->1657
1657->1658
1657->1659
1657->1660
1660->1661
1661->1662
1576->1663
1663->1664
1664->1665
1664->1666
1664->1667
1667->1668
1668->1669
1576->1670
1670->1671
1671->1672
1671->1673
1671->1674
1674->1675
1576->1676
1676->1677
1677->1678
1677->1679
1677->1680
1677->1681
1681->1682
1681->1683
1677->1684
1684->1685
1685->1686
1684->1687
1684->1688
1688->1689
1689->1690
1690->1691
1690->1692
1677->1693
1568->1694
1694->1695
1694->1696
1696->1697
1697->1698
1697->1699
1694->1700
1700->1701
1701->1702
1702->1703
1703->1704
1568->1705
1705->1706
1706->1707
1707->1708
1705->1709
1705->1710
1705->1711
1711->1712
1712->1713
1713->1714
1714->1715
1714->1716
1716->1717
1566->1718
1718->1719
1565->1720
1720->1721
1720->1722
1722->1723
1723->1724
1723->1725
1725->1726
1726->1727
1727->1728
1728->1729
1729->1730
1729->1731
1728->1732
1732->1733
1732->1734
1728->1735
1735->1736
1735->1737
1728->1738
1738->1739
1738->1740
1722->1741
1741->1742
1741->1743
1743->1744
1744->1745
1744->1746
1741->1747
1747->1748
1748->1749
1749->1750
1750->1751
1722->1752
1752->1753
1753->1754
1754->1755
1752->1756
1752->1757
1752->1758
1758->1759
1759->1760
1760->1761
1761->1762
1761->1763
1763->1764
1722->1765
1765->1766
1766->1767
1767->1768
1765->1769
1765->1770
1765->1771
1771->1772
1772->1773
1772->1774
1771->1775
1775->1776
1775->1777
1765->1778
1778->1779
1779->1780
1780->1781
1781->1782
1781->1783
1783->1784
1784->1785
1784->1786
1786->1787
1786->1788
1786->1789
1789->1790
1790->1791
1790->1792
1779->1793
1793->1794
1794->1795
1794->1796
1793->1797
1797->1798
1798->1799
1799->1800
1800->1801
1801->1802
1801->1803
1800->1804
1800->1805
1805->1806
1798->1807
1807->1808
1808->1809
1809->1810
1809->1811
1808->1812
1808->1813
1813->1814
1798->1815
1815->1816
1779->1817
1817->1818
1722->1819
1819->1820
1820->1821
1821->1822
1819->1823
1819->1824
1819->1825
1825->1826
1826->1827
1826->1828
1825->1829
1829->1830
1829->1831
1819->1832
1832->1833
1833->1834
1834->1835
1835->1836
1835->1837
1837->1838
1838->1839
1838->1840
1840->1841
1840->1842
1840->1843
1843->1844
1844->1845
1845->1846
1845->1847
1844->1848
1844->1849
1849->1850
1849->1851
1833->1852
1852->1853
1853->1854
1854->1855
1854->1856
1853->1857
1857->1858
1858->1859
1859->1860
1859->1861
1858->1862
1858->1863
1863->1864
1864->1865
1864->1866
1857->1867
1852->1868
1868->1869
1869->1870
1870->1871
1833->1872
1872->1873
1722->1874
1874->1875
1875->1876
1876->1877
1874->1878
1874->1879
1874->1880
1880->1881
1881->1882
1881->1883
1874->1884
1884->1885
1885->1886
1886->1887
1887->1888
1887->1889
1889->1890
1890->1891
1890->1892
1892->1893
1885->1894
1894->1895
1895->1896
1895->1897
1895->1898
1898->1899
1885->1900
1900->1901
1901->1902
1901->1903
1720->1904
1904->1905
1565->1906
1906->1907
1906->1908
1908->1909
1909->1910
1909->1911
1911->1912
1912->1913
1913->1914
1914->1915
1915->1916
1915->1917
1914->1918
1918->1919
1918->1920
1914->1921
1921->1922
1921->1923
1914->1924
1924->1925
1924->1926
1908->1927
1927->1928
1927->1929
1929->1930
1930->1931
1930->1932
1927->1933
1933->1934
1934->1935
1935->1936
1936->1937
1908->1938
1938->1939
1939->1940
1940->1941
1938->1942
1938->1943
1938->1944
1944->1945
1945->1946
1946->1947
1947->1948
1947->1949
1949->1950
1908->1951
1951->1952
1952->1953
1953->1954
1951->1955
1951->1956
1951->1957
1957->1958
1958->1959
1958->1960
1957->1961
1961->1962
1961->1963
1951->1964
1964->1965
1965->1966
1966->1967
1967->1968
1967->1969
1969->1970
1970->1971
1970->1972
1972->1973
1972->1974
1972->1975
1975->1976
1976->1977
1976->1978
1965->1979
1979->1980
1980->1981
1980->1982
1979->1983
1983->1984
1984->1985
1985->1986
1986->1987
1987->1988
1988->1989
1988->1990
1987->1991
1987->1992
1992->1993
1993->1994
1993->1995
1985->1996
1996->1997
1997->1998
1998->1999
1999->2000
1999->2001
1999->2002
2002->2003
2003->2004
2003->2005
2002->2006
2006->2007
2006->2008
2002->2009
1997->2010
2010->2011
1965->2012
2012->2013
1908->2014
2014->2015
2015->2016
2016->2017
2014->2018
2014->2019
2014->2020
2020->2021
2021->2022
2021->2023
2020->2024
2024->2025
2024->2026
2014->2027
2027->2028
2028->2029
2029->2030
2030->2031
2030->2032
2032->2033
2033->2034
2033->2035
2035->2036
2035->2037
2035->2038
2038->2039
2039->2040
2040->2041
2040->2042
2039->2043
2039->2044
2044->2045
2044->2046
2028->2047
2047->2048
2048->2049
2049->2050
2049->2051
2048->2052
2052->2053
2053->2054
2054->2055
2054->2056
2053->2057
2053->2058
2058->2059
2059->2060
2059->2061
2052->2062
2047->2063
2063->2064
2064->2065
2065->2066
2028->2067
2067->2068
1906->2069
2069->2070
