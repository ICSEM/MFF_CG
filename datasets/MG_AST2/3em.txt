AST
589[CompilationUnit
590[NodeList
591[ClassOrInterfaceDeclaration
592[Anathemancer
593[NodeList
594[ConstructorDeclaration
595[Anathemancer
596[NodeList
597[Parameter
598[VariableDeclaratorId
599[ClassOrInterfaceType
600[BlockStmt
601[NodeList
602[ExpressionStmt
603[AssignExpr
604[FieldAccessExpr
605[this
606[expansionSetCode
607["ARB"
608[ExpressionStmt
609[MethodCallExpr
610[FieldAccessExpr
611[this
612[subtype
613[add
614[NodeList
615["Zombie"
616[ExpressionStmt
617[MethodCallExpr
618[FieldAccessExpr
619[this
620[subtype
621[add
622[NodeList
623["Wizard"
624[ExpressionStmt
625[AssignExpr
626[FieldAccessExpr
627[this
628[power
629[ObjectCreationExpr
630[ClassOrInterfaceType
631[NodeList
632[2
633[ExpressionStmt
634[AssignExpr
635[FieldAccessExpr
636[this
637[toughness
638[ObjectCreationExpr
639[ClassOrInterfaceType
640[NodeList
641[2
642[ExpressionStmt
643[VariableDeclarationExpr
644[ClassOrInterfaceType
645[NodeList
646[VariableDeclarator
647[VariableDeclaratorId
648[ObjectCreationExpr
649[ClassOrInterfaceType
650[NodeList
651[ObjectCreationExpr
652[ClassOrInterfaceType
653[NodeList
654[ObjectCreationExpr
655[ClassOrInterfaceType
656[ExpressionStmt
657[MethodCallExpr
658[ability
659[addTarget
660[NodeList
661[ObjectCreationExpr
662[ClassOrInterfaceType
663[ExpressionStmt
664[MethodCallExpr
665[this
666[addAbility
667[NodeList
668[ability
669[ExpressionStmt
670[MethodCallExpr
671[this
672[addAbility
673[NodeList
674[ObjectCreationExpr
675[ClassOrInterfaceType
676[NodeList
677[ObjectCreationExpr
678[ClassOrInterfaceType
679[NodeList
680["{5}{B}{R}"
681[ExplicitConstructorInvocationStmt
682[NodeList
683[ownerId
684[33
685["Anathemancer"
686[FieldAccessExpr
687[Rarity
688[UNCOMMON
689[ArrayCreationExpr
690[NodeList
691[ArrayCreationLevel
692[ClassOrInterfaceType
693[ArrayInitializerExpr
694[NodeList
695[FieldAccessExpr
696[CardType
697[CREATURE
698["{1}{B}{R}"
699[ConstructorDeclaration
700[Anathemancer
701[NodeList
702[Parameter
703[VariableDeclaratorId
704[ClassOrInterfaceType
705[BlockStmt
706[NodeList
707[ExplicitConstructorInvocationStmt
708[NodeList
709[card
710[@Overridepublic Anathemancer copy() { return new Anathemancer(this);}
711[NodeList
712[MarkerAnnotationExpr
713[Override
714[ClassOrInterfaceType
715[copy
716[BlockStmt
717[NodeList
718[ReturnStmt
719[ObjectCreationExpr
720[ClassOrInterfaceType
721[NodeList
722[this
723[NodeList
724[ClassOrInterfaceType
725[ClassOrInterfaceDeclaration
726[AnathemancerCount
727[NodeList
728[@Overridepublic int calculate(Game game, Ability sourceAbility, Effect effect) { if (sourceAbility.getFirstTarget() == null) { return 0; } FilterLandPermanent filter = new FilterLandPermanent(); filter.add(Predicates.not(new SupertypePredicate("Basic"))); filter.add(new ControllerIdPredicate(sourceAbility.getFirstTarget())); return game.getBattlefield().count(filter, sourceAbility.getSourceId(), sourceAbility.getControllerId(), game);}
729[NodeList
730[MarkerAnnotationExpr
731[Override
732[PrimitiveType
733[calculate
734[NodeList
735[Parameter
736[VariableDeclaratorId
737[ClassOrInterfaceType
738[Parameter
739[VariableDeclaratorId
740[ClassOrInterfaceType
741[Parameter
742[VariableDeclaratorId
743[ClassOrInterfaceType
744[BlockStmt
745[NodeList
746[IfStmt
747[BinaryExpr
748[MethodCallExpr
749[sourceAbility
750[getFirstTarget
751[null
752[BlockStmt
753[NodeList
754[ReturnStmt
755[0
756[ExpressionStmt
757[VariableDeclarationExpr
758[ClassOrInterfaceType
759[NodeList
760[VariableDeclarator
761[VariableDeclaratorId
762[ObjectCreationExpr
763[ClassOrInterfaceType
764[ExpressionStmt
765[MethodCallExpr
766[filter
767[add
768[NodeList
769[MethodCallExpr
770[Predicates
771[not
772[NodeList
773[ObjectCreationExpr
774[ClassOrInterfaceType
775[NodeList
776["Basic"
777[ExpressionStmt
778[MethodCallExpr
779[filter
780[add
781[NodeList
782[ObjectCreationExpr
783[ClassOrInterfaceType
784[NodeList
785[MethodCallExpr
786[sourceAbility
787[getFirstTarget
788[ReturnStmt
789[MethodCallExpr
790[MethodCallExpr
791[game
792[getBattlefield
793[count
794[NodeList
795[filter
796[MethodCallExpr
797[sourceAbility
798[getSourceId
799[MethodCallExpr
800[sourceAbility
801[getControllerId
802[game
803[@Overridepublic DynamicValue copy() { return new AnathemancerCount();}
804[NodeList
805[MarkerAnnotationExpr
806[Override
807[ClassOrInterfaceType
808[copy
809[BlockStmt
810[NodeList
811[ReturnStmt
812[ObjectCreationExpr
813[ClassOrInterfaceType
814[@Overridepublic String toString() { return "1";}
815[NodeList
816[MarkerAnnotationExpr
817[Override
818[ClassOrInterfaceType
819[toString
820[BlockStmt
821[NodeList
822[ReturnStmt
823["1"
824[@Overridepublic String getMessage() { return "nonbasic lands that player controls";}
825[NodeList
826[MarkerAnnotationExpr
827[Override
828[ClassOrInterfaceType
829[getMessage
830[BlockStmt
831[NodeList
832[ReturnStmt
833["nonbasic lands that player controls"
834[NodeList
835[ClassOrInterfaceType
589->590
590->591
591->592
591->593
593->594
594->595
594->596
596->597
597->598
597->599
594->600
600->601
601->602
602->603
603->604
604->605
604->606
603->607
601->608
608->609
609->610
610->611
610->612
609->613
609->614
614->615
601->616
616->617
617->618
618->619
618->620
617->621
617->622
622->623
601->624
624->625
625->626
626->627
626->628
625->629
629->630
629->631
631->632
601->633
633->634
634->635
635->636
635->637
634->638
638->639
638->640
640->641
601->642
642->643
643->644
643->645
645->646
646->647
646->648
648->649
648->650
650->651
651->652
651->653
653->654
654->655
601->656
656->657
657->658
657->659
657->660
660->661
661->662
601->663
663->664
664->665
664->666
664->667
667->668
601->669
669->670
670->671
670->672
670->673
673->674
674->675
674->676
676->677
677->678
677->679
679->680
601->681
681->682
682->683
682->684
682->685
682->686
686->687
686->688
682->689
689->690
690->691
689->692
689->693
693->694
694->695
695->696
695->697
682->698
593->699
699->700
699->701
701->702
702->703
702->704
699->705
705->706
706->707
707->708
708->709
593->710
710->711
711->712
712->713
710->714
710->715
710->716
716->717
717->718
718->719
719->720
719->721
721->722
591->723
723->724
590->725
725->726
725->727
727->728
728->729
729->730
730->731
728->732
728->733
728->734
734->735
735->736
735->737
734->738
738->739
738->740
734->741
741->742
741->743
728->744
744->745
745->746
746->747
747->748
748->749
748->750
747->751
746->752
752->753
753->754
754->755
745->756
756->757
757->758
757->759
759->760
760->761
760->762
762->763
745->764
764->765
765->766
765->767
765->768
768->769
769->770
769->771
769->772
772->773
773->774
773->775
775->776
745->777
777->778
778->779
778->780
778->781
781->782
782->783
782->784
784->785
785->786
785->787
745->788
788->789
789->790
790->791
790->792
789->793
789->794
794->795
794->796
796->797
796->798
794->799
799->800
799->801
794->802
727->803
803->804
804->805
805->806
803->807
803->808
803->809
809->810
810->811
811->812
812->813
727->814
814->815
815->816
816->817
814->818
814->819
814->820
820->821
821->822
822->823
727->824
824->825
825->826
826->827
824->828
824->829
824->830
830->831
831->832
832->833
725->834
834->835
