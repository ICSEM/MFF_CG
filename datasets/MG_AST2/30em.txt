AST
5416[CompilationUnit
5417[NodeList
5418[ClassOrInterfaceDeclaration
5419[EnigmaSphinx
5420[NodeList
5421[ConstructorDeclaration
5422[EnigmaSphinx
5423[NodeList
5424[Parameter
5425[VariableDeclaratorId
5426[ClassOrInterfaceType
5427[BlockStmt
5428[NodeList
5429[ExpressionStmt
5430[AssignExpr
5431[FieldAccessExpr
5432[this
5433[expansionSetCode
5434["ARB"
5435[ExpressionStmt
5436[MethodCallExpr
5437[FieldAccessExpr
5438[this
5439[subtype
5440[add
5441[NodeList
5442["Sphinx"
5443[ExpressionStmt
5444[AssignExpr
5445[FieldAccessExpr
5446[this
5447[power
5448[ObjectCreationExpr
5449[ClassOrInterfaceType
5450[NodeList
5451[5
5452[ExpressionStmt
5453[AssignExpr
5454[FieldAccessExpr
5455[this
5456[toughness
5457[ObjectCreationExpr
5458[ClassOrInterfaceType
5459[NodeList
5460[4
5461[ExpressionStmt
5462[MethodCallExpr
5463[this
5464[addAbility
5465[NodeList
5466[MethodCallExpr
5467[FlyingAbility
5468[getInstance
5469[ExpressionStmt
5470[MethodCallExpr
5471[this
5472[addAbility
5473[NodeList
5474[ObjectCreationExpr
5475[ClassOrInterfaceType
5476[NodeList
5477[ObjectCreationExpr
5478[ClassOrInterfaceType
5479[ExpressionStmt
5480[MethodCallExpr
5481[this
5482[addAbility
5483[NodeList
5484[ObjectCreationExpr
5485[ClassOrInterfaceType
5486[ExplicitConstructorInvocationStmt
5487[NodeList
5488[ownerId
5489[106
5490["Enigma Sphinx"
5491[FieldAccessExpr
5492[Rarity
5493[RARE
5494[ArrayCreationExpr
5495[NodeList
5496[ArrayCreationLevel
5497[ClassOrInterfaceType
5498[ArrayInitializerExpr
5499[NodeList
5500[FieldAccessExpr
5501[CardType
5502[ARTIFACT
5503[FieldAccessExpr
5504[CardType
5505[CREATURE
5506["{4}{W}{U}{B}"
5507[ConstructorDeclaration
5508[EnigmaSphinx
5509[NodeList
5510[Parameter
5511[VariableDeclaratorId
5512[ClassOrInterfaceType
5513[BlockStmt
5514[NodeList
5515[ExplicitConstructorInvocationStmt
5516[NodeList
5517[card
5518[@Overridepublic EnigmaSphinx copy() { return new EnigmaSphinx(this);}
5519[NodeList
5520[MarkerAnnotationExpr
5521[Override
5522[ClassOrInterfaceType
5523[copy
5524[BlockStmt
5525[NodeList
5526[ReturnStmt
5527[ObjectCreationExpr
5528[ClassOrInterfaceType
5529[NodeList
5530[this
5531[NodeList
5532[ClassOrInterfaceType
5533[ClassOrInterfaceDeclaration
5534[EnigmaSphinxTriggeredAbility
5535[NodeList
5536[ConstructorDeclaration
5537[EnigmaSphinxTriggeredAbility
5538[NodeList
5539[Parameter
5540[VariableDeclaratorId
5541[ClassOrInterfaceType
5542[BlockStmt
5543[NodeList
5544[ExplicitConstructorInvocationStmt
5545[NodeList
5546[effect
5547[false
5548[ConstructorDeclaration
5549[EnigmaSphinxTriggeredAbility
5550[NodeList
5551[Parameter
5552[VariableDeclaratorId
5553[ClassOrInterfaceType
5554[Parameter
5555[VariableDeclaratorId
5556[PrimitiveType
5557[BlockStmt
5558[NodeList
5559[ExplicitConstructorInvocationStmt
5560[NodeList
5561[FieldAccessExpr
5562[Zone
5563[ALL
5564[effect
5565[optional
5566[ConstructorDeclaration
5567[EnigmaSphinxTriggeredAbility
5568[NodeList
5569[Parameter
5570[VariableDeclaratorId
5571[ClassOrInterfaceType
5572[BlockStmt
5573[NodeList
5574[ExplicitConstructorInvocationStmt
5575[NodeList
5576[ability
5577[@Overridepublic EnigmaSphinxTriggeredAbility copy() { return new EnigmaSphinxTriggeredAbility(this);}
5578[NodeList
5579[MarkerAnnotationExpr
5580[Override
5581[ClassOrInterfaceType
5582[copy
5583[BlockStmt
5584[NodeList
5585[ReturnStmt
5586[ObjectCreationExpr
5587[ClassOrInterfaceType
5588[NodeList
5589[this
5590[@Overridepublic boolean checkEventType(GameEvent event, Game game) { return event.getType() == EventType.ZONE_CHANGE;}
5591[NodeList
5592[MarkerAnnotationExpr
5593[Override
5594[PrimitiveType
5595[checkEventType
5596[NodeList
5597[Parameter
5598[VariableDeclaratorId
5599[ClassOrInterfaceType
5600[Parameter
5601[VariableDeclaratorId
5602[ClassOrInterfaceType
5603[BlockStmt
5604[NodeList
5605[ReturnStmt
5606[BinaryExpr
5607[MethodCallExpr
5608[event
5609[getType
5610[FieldAccessExpr
5611[EventType
5612[ZONE_CHANGE
5613[@Overridepublic boolean checkTrigger(GameEvent event, Game game) { ZoneChangeEvent zEvent = (ZoneChangeEvent) event; Permanent permanent = zEvent.getTarget(); if (permanent != null && zEvent.getToZone() == Zone.GRAVEYARD && zEvent.getFromZone() == Zone.BATTLEFIELD && permanent.getId().equals(this.getSourceId()) && permanent.getOwnerId().equals(permanent.getControllerId())) { return true; } return false;}
5614[NodeList
5615[MarkerAnnotationExpr
5616[Override
5617[PrimitiveType
5618[checkTrigger
5619[NodeList
5620[Parameter
5621[VariableDeclaratorId
5622[ClassOrInterfaceType
5623[Parameter
5624[VariableDeclaratorId
5625[ClassOrInterfaceType
5626[BlockStmt
5627[NodeList
5628[ExpressionStmt
5629[VariableDeclarationExpr
5630[ClassOrInterfaceType
5631[NodeList
5632[VariableDeclarator
5633[VariableDeclaratorId
5634[CastExpr
5635[ClassOrInterfaceType
5636[event
5637[ExpressionStmt
5638[VariableDeclarationExpr
5639[ClassOrInterfaceType
5640[NodeList
5641[VariableDeclarator
5642[VariableDeclaratorId
5643[MethodCallExpr
5644[zEvent
5645[getTarget
5646[IfStmt
5647[BinaryExpr
5648[BinaryExpr
5649[BinaryExpr
5650[BinaryExpr
5651[BinaryExpr
5652[permanent
5653[null
5654[BinaryExpr
5655[MethodCallExpr
5656[zEvent
5657[getToZone
5658[FieldAccessExpr
5659[Zone
5660[GRAVEYARD
5661[BinaryExpr
5662[MethodCallExpr
5663[zEvent
5664[getFromZone
5665[FieldAccessExpr
5666[Zone
5667[BATTLEFIELD
5668[MethodCallExpr
5669[MethodCallExpr
5670[permanent
5671[getId
5672[equals
5673[NodeList
5674[MethodCallExpr
5675[this
5676[getSourceId
5677[MethodCallExpr
5678[MethodCallExpr
5679[permanent
5680[getOwnerId
5681[equals
5682[NodeList
5683[MethodCallExpr
5684[permanent
5685[getControllerId
5686[BlockStmt
5687[NodeList
5688[ReturnStmt
5689[true
5690[ReturnStmt
5691[false
5692[@Overridepublic String getRule() { return "When {this} is put into your graveyard from the battlefield, " + super.getRule();}
5693[NodeList
5694[MarkerAnnotationExpr
5695[Override
5696[ClassOrInterfaceType
5697[getRule
5698[BlockStmt
5699[NodeList
5700[ReturnStmt
5701[BinaryExpr
5702["When {this} is put into your graveyard from the battlefield, "
5703[MethodCallExpr
5704[super
5705[getRule
5706[NodeList
5707[ClassOrInterfaceType
5708[ClassOrInterfaceDeclaration
5709[EnigmaSphinxEffect
5710[NodeList
5711[ConstructorDeclaration
5712[EnigmaSphinxEffect
5713[BlockStmt
5714[NodeList
5715[ExpressionStmt
5716[AssignExpr
5717[staticText
5718["put it into your library third from the top"
5719[ExplicitConstructorInvocationStmt
5720[NodeList
5721[FieldAccessExpr
5722[Outcome
5723[ReturnToHand
5724[ConstructorDeclaration
5725[EnigmaSphinxEffect
5726[NodeList
5727[Parameter
5728[VariableDeclaratorId
5729[ClassOrInterfaceType
5730[BlockStmt
5731[NodeList
5732[ExplicitConstructorInvocationStmt
5733[NodeList
5734[effect
5735[@Overridepublic EnigmaSphinxEffect copy() { return new EnigmaSphinxEffect(this);}
5736[NodeList
5737[MarkerAnnotationExpr
5738[Override
5739[ClassOrInterfaceType
5740[copy
5741[BlockStmt
5742[NodeList
5743[ReturnStmt
5744[ObjectCreationExpr
5745[ClassOrInterfaceType
5746[NodeList
5747[this
5748[@Overridepublic boolean apply(Game game, Ability source) { Card card = game.getCard(source.getSourceId()); if (card != null && game.getState().getZone(source.getSourceId()) == Zone.GRAVEYARD) { Player owner = game.getPlayer(card.getOwnerId()); if (owner != null && card.moveToZone(Zone.LIBRARY, source.getSourceId(), game, true)) { game.informPlayers(card.getLogName() + " is put into " + owner.getLogName() + "'s library third from the top"); Library lib = owner.getLibrary(); if (lib != null) { Card card1 = lib.removeFromTop(game); if (card1 != null && card1.getId().equals(source.getSourceId())) { Card card2 = lib.removeFromTop(game); Card card3 = lib.removeFromTop(game); lib.putOnTop(card1, game); if (card3 != null) { lib.putOnTop(card3, game); } if (card2 != null) { lib.putOnTop(card2, game); } return true; } } } } return false;}
5749[NodeList
5750[MarkerAnnotationExpr
5751[Override
5752[PrimitiveType
5753[apply
5754[NodeList
5755[Parameter
5756[VariableDeclaratorId
5757[ClassOrInterfaceType
5758[Parameter
5759[VariableDeclaratorId
5760[ClassOrInterfaceType
5761[BlockStmt
5762[NodeList
5763[ExpressionStmt
5764[VariableDeclarationExpr
5765[ClassOrInterfaceType
5766[NodeList
5767[VariableDeclarator
5768[VariableDeclaratorId
5769[MethodCallExpr
5770[game
5771[getCard
5772[NodeList
5773[MethodCallExpr
5774[source
5775[getSourceId
5776[IfStmt
5777[BinaryExpr
5778[BinaryExpr
5779[card
5780[null
5781[BinaryExpr
5782[MethodCallExpr
5783[MethodCallExpr
5784[game
5785[getState
5786[getZone
5787[NodeList
5788[MethodCallExpr
5789[source
5790[getSourceId
5791[FieldAccessExpr
5792[Zone
5793[GRAVEYARD
5794[BlockStmt
5795[NodeList
5796[ExpressionStmt
5797[VariableDeclarationExpr
5798[ClassOrInterfaceType
5799[NodeList
5800[VariableDeclarator
5801[VariableDeclaratorId
5802[MethodCallExpr
5803[game
5804[getPlayer
5805[NodeList
5806[MethodCallExpr
5807[card
5808[getOwnerId
5809[IfStmt
5810[BinaryExpr
5811[BinaryExpr
5812[owner
5813[null
5814[MethodCallExpr
5815[card
5816[moveToZone
5817[NodeList
5818[FieldAccessExpr
5819[Zone
5820[LIBRARY
5821[MethodCallExpr
5822[source
5823[getSourceId
5824[game
5825[true
5826[BlockStmt
5827[NodeList
5828[ExpressionStmt
5829[MethodCallExpr
5830[game
5831[informPlayers
5832[NodeList
5833[BinaryExpr
5834[BinaryExpr
5835[BinaryExpr
5836[MethodCallExpr
5837[card
5838[getLogName
5839[" is put into "
5840[MethodCallExpr
5841[owner
5842[getLogName
5843["'s library third from the top"
5844[ExpressionStmt
5845[VariableDeclarationExpr
5846[ClassOrInterfaceType
5847[NodeList
5848[VariableDeclarator
5849[VariableDeclaratorId
5850[MethodCallExpr
5851[owner
5852[getLibrary
5853[IfStmt
5854[BinaryExpr
5855[lib
5856[null
5857[BlockStmt
5858[NodeList
5859[ExpressionStmt
5860[VariableDeclarationExpr
5861[ClassOrInterfaceType
5862[NodeList
5863[VariableDeclarator
5864[VariableDeclaratorId
5865[MethodCallExpr
5866[lib
5867[removeFromTop
5868[NodeList
5869[game
5870[IfStmt
5871[BinaryExpr
5872[BinaryExpr
5873[card1
5874[null
5875[MethodCallExpr
5876[MethodCallExpr
5877[card1
5878[getId
5879[equals
5880[NodeList
5881[MethodCallExpr
5882[source
5883[getSourceId
5884[BlockStmt
5885[NodeList
5886[ExpressionStmt
5887[VariableDeclarationExpr
5888[ClassOrInterfaceType
5889[NodeList
5890[VariableDeclarator
5891[VariableDeclaratorId
5892[MethodCallExpr
5893[lib
5894[removeFromTop
5895[NodeList
5896[game
5897[ExpressionStmt
5898[VariableDeclarationExpr
5899[ClassOrInterfaceType
5900[NodeList
5901[VariableDeclarator
5902[VariableDeclaratorId
5903[MethodCallExpr
5904[lib
5905[removeFromTop
5906[NodeList
5907[game
5908[ExpressionStmt
5909[MethodCallExpr
5910[lib
5911[putOnTop
5912[NodeList
5913[card1
5914[game
5915[IfStmt
5916[BinaryExpr
5917[card3
5918[null
5919[BlockStmt
5920[NodeList
5921[ExpressionStmt
5922[MethodCallExpr
5923[lib
5924[putOnTop
5925[NodeList
5926[card3
5927[game
5928[IfStmt
5929[BinaryExpr
5930[card2
5931[null
5932[BlockStmt
5933[NodeList
5934[ExpressionStmt
5935[MethodCallExpr
5936[lib
5937[putOnTop
5938[NodeList
5939[card2
5940[game
5941[ReturnStmt
5942[true
5943[ReturnStmt
5944[false
5945[NodeList
5946[ClassOrInterfaceType
5416->5417
5417->5418
5418->5419
5418->5420
5420->5421
5421->5422
5421->5423
5423->5424
5424->5425
5424->5426
5421->5427
5427->5428
5428->5429
5429->5430
5430->5431
5431->5432
5431->5433
5430->5434
5428->5435
5435->5436
5436->5437
5437->5438
5437->5439
5436->5440
5436->5441
5441->5442
5428->5443
5443->5444
5444->5445
5445->5446
5445->5447
5444->5448
5448->5449
5448->5450
5450->5451
5428->5452
5452->5453
5453->5454
5454->5455
5454->5456
5453->5457
5457->5458
5457->5459
5459->5460
5428->5461
5461->5462
5462->5463
5462->5464
5462->5465
5465->5466
5466->5467
5466->5468
5428->5469
5469->5470
5470->5471
5470->5472
5470->5473
5473->5474
5474->5475
5474->5476
5476->5477
5477->5478
5428->5479
5479->5480
5480->5481
5480->5482
5480->5483
5483->5484
5484->5485
5428->5486
5486->5487
5487->5488
5487->5489
5487->5490
5487->5491
5491->5492
5491->5493
5487->5494
5494->5495
5495->5496
5494->5497
5494->5498
5498->5499
5499->5500
5500->5501
5500->5502
5499->5503
5503->5504
5503->5505
5487->5506
5420->5507
5507->5508
5507->5509
5509->5510
5510->5511
5510->5512
5507->5513
5513->5514
5514->5515
5515->5516
5516->5517
5420->5518
5518->5519
5519->5520
5520->5521
5518->5522
5518->5523
5518->5524
5524->5525
5525->5526
5526->5527
5527->5528
5527->5529
5529->5530
5418->5531
5531->5532
5417->5533
5533->5534
5533->5535
5535->5536
5536->5537
5536->5538
5538->5539
5539->5540
5539->5541
5536->5542
5542->5543
5543->5544
5544->5545
5545->5546
5545->5547
5535->5548
5548->5549
5548->5550
5550->5551
5551->5552
5551->5553
5550->5554
5554->5555
5554->5556
5548->5557
5557->5558
5558->5559
5559->5560
5560->5561
5561->5562
5561->5563
5560->5564
5560->5565
5535->5566
5566->5567
5566->5568
5568->5569
5569->5570
5569->5571
5566->5572
5572->5573
5573->5574
5574->5575
5575->5576
5535->5577
5577->5578
5578->5579
5579->5580
5577->5581
5577->5582
5577->5583
5583->5584
5584->5585
5585->5586
5586->5587
5586->5588
5588->5589
5535->5590
5590->5591
5591->5592
5592->5593
5590->5594
5590->5595
5590->5596
5596->5597
5597->5598
5597->5599
5596->5600
5600->5601
5600->5602
5590->5603
5603->5604
5604->5605
5605->5606
5606->5607
5607->5608
5607->5609
5606->5610
5610->5611
5610->5612
5535->5613
5613->5614
5614->5615
5615->5616
5613->5617
5613->5618
5613->5619
5619->5620
5620->5621
5620->5622
5619->5623
5623->5624
5623->5625
5613->5626
5626->5627
5627->5628
5628->5629
5629->5630
5629->5631
5631->5632
5632->5633
5632->5634
5634->5635
5634->5636
5627->5637
5637->5638
5638->5639
5638->5640
5640->5641
5641->5642
5641->5643
5643->5644
5643->5645
5627->5646
5646->5647
5647->5648
5648->5649
5649->5650
5650->5651
5651->5652
5651->5653
5650->5654
5654->5655
5655->5656
5655->5657
5654->5658
5658->5659
5658->5660
5649->5661
5661->5662
5662->5663
5662->5664
5661->5665
5665->5666
5665->5667
5648->5668
5668->5669
5669->5670
5669->5671
5668->5672
5668->5673
5673->5674
5674->5675
5674->5676
5647->5677
5677->5678
5678->5679
5678->5680
5677->5681
5677->5682
5682->5683
5683->5684
5683->5685
5646->5686
5686->5687
5687->5688
5688->5689
5627->5690
5690->5691
5535->5692
5692->5693
5693->5694
5694->5695
5692->5696
5692->5697
5692->5698
5698->5699
5699->5700
5700->5701
5701->5702
5701->5703
5703->5704
5703->5705
5533->5706
5706->5707
5417->5708
5708->5709
5708->5710
5710->5711
5711->5712
5711->5713
5713->5714
5714->5715
5715->5716
5716->5717
5716->5718
5714->5719
5719->5720
5720->5721
5721->5722
5721->5723
5710->5724
5724->5725
5724->5726
5726->5727
5727->5728
5727->5729
5724->5730
5730->5731
5731->5732
5732->5733
5733->5734
5710->5735
5735->5736
5736->5737
5737->5738
5735->5739
5735->5740
5735->5741
5741->5742
5742->5743
5743->5744
5744->5745
5744->5746
5746->5747
5710->5748
5748->5749
5749->5750
5750->5751
5748->5752
5748->5753
5748->5754
5754->5755
5755->5756
5755->5757
5754->5758
5758->5759
5758->5760
5748->5761
5761->5762
5762->5763
5763->5764
5764->5765
5764->5766
5766->5767
5767->5768
5767->5769
5769->5770
5769->5771
5769->5772
5772->5773
5773->5774
5773->5775
5762->5776
5776->5777
5777->5778
5778->5779
5778->5780
5777->5781
5781->5782
5782->5783
5783->5784
5783->5785
5782->5786
5782->5787
5787->5788
5788->5789
5788->5790
5781->5791
5791->5792
5791->5793
5776->5794
5794->5795
5795->5796
5796->5797
5797->5798
5797->5799
5799->5800
5800->5801
5800->5802
5802->5803
5802->5804
5802->5805
5805->5806
5806->5807
5806->5808
5795->5809
5809->5810
5810->5811
5811->5812
5811->5813
5810->5814
5814->5815
5814->5816
5814->5817
5817->5818
5818->5819
5818->5820
5817->5821
5821->5822
5821->5823
5817->5824
5817->5825
5809->5826
5826->5827
5827->5828
5828->5829
5829->5830
5829->5831
5829->5832
5832->5833
5833->5834
5834->5835
5835->5836
5836->5837
5836->5838
5835->5839
5834->5840
5840->5841
5840->5842
5833->5843
5827->5844
5844->5845
5845->5846
5845->5847
5847->5848
5848->5849
5848->5850
5850->5851
5850->5852
5827->5853
5853->5854
5854->5855
5854->5856
5853->5857
5857->5858
5858->5859
5859->5860
5860->5861
5860->5862
5862->5863
5863->5864
5863->5865
5865->5866
5865->5867
5865->5868
5868->5869
5858->5870
5870->5871
5871->5872
5872->5873
5872->5874
5871->5875
5875->5876
5876->5877
5876->5878
5875->5879
5875->5880
5880->5881
5881->5882
5881->5883
5870->5884
5884->5885
5885->5886
5886->5887
5887->5888
5887->5889
5889->5890
5890->5891
5890->5892
5892->5893
5892->5894
5892->5895
5895->5896
5885->5897
5897->5898
5898->5899
5898->5900
5900->5901
5901->5902
5901->5903
5903->5904
5903->5905
5903->5906
5906->5907
5885->5908
5908->5909
5909->5910
5909->5911
5909->5912
5912->5913
5912->5914
5885->5915
5915->5916
5916->5917
5916->5918
5915->5919
5919->5920
5920->5921
5921->5922
5922->5923
5922->5924
5922->5925
5925->5926
5925->5927
5885->5928
5928->5929
5929->5930
5929->5931
5928->5932
5932->5933
5933->5934
5934->5935
5935->5936
5935->5937
5935->5938
5938->5939
5938->5940
5885->5941
5941->5942
5762->5943
5943->5944
5708->5945
5945->5946
