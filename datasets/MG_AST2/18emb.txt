AST
0[CompilationUnit
1[NodeList
2[ClassOrInterfaceDeclaration
3[(?)Crystallization
4[NodeList
5[ConstructorDeclaration
6[(?)Crystallization
7[NodeList
8[Parameter
9[VariableDeclaratorId
10[ClassOrInterfaceType
11[BlockStmt
12[NodeList
13[ExpressionStmt
14[AssignExpr
15[FieldAccessExpr
16[(?)this
17[(?)expansionSetCode
18[(?)"ARB"
19[ExpressionStmt
20[MethodCallExpr
21[FieldAccessExpr
22[(?)this
23[(?)subtype
24[(?)add
25[NodeList
26[(?)"Aura"
27[ExpressionStmt
28[VariableDeclarationExpr
29[ClassOrInterfaceType
30[NodeList
31[VariableDeclarator
32[VariableDeclaratorId
33[ObjectCreationExpr
34[ClassOrInterfaceType
35[ExpressionStmt
36[MethodCallExpr
37[MethodCallExpr
38[(?)this
39[(?)getSpellAbility
40[(?)addTarget
41[NodeList
42[(?)auraTarget
43[ExpressionStmt
44[MethodCallExpr
45[MethodCallExpr
46[(?)this
47[(?)getSpellAbility
48[(?)addEffect
49[NodeList
50[ObjectCreationExpr
51[ClassOrInterfaceType
52[NodeList
53[FieldAccessExpr
54[(?)Outcome
55[(?)AddAbility
56[ExpressionStmt
57[VariableDeclarationExpr
58[ClassOrInterfaceType
59[NodeList
60[VariableDeclarator
61[VariableDeclaratorId
62[ObjectCreationExpr
63[ClassOrInterfaceType
64[NodeList
65[MethodCallExpr
66[(?)auraTarget
67[(?)getTargetName
68[ExpressionStmt
69[MethodCallExpr
70[(?)this
71[(?)addAbility
72[NodeList
73[(?)ability
74[ExpressionStmt
75[MethodCallExpr
76[(?)this
77[(?)addAbility
78[NodeList
79[ObjectCreationExpr
80[ClassOrInterfaceType
81[NodeList
82[FieldAccessExpr
83[(?)Zone
84[(?)BATTLEFIELD
85[ObjectCreationExpr
86[ClassOrInterfaceType
87[NodeList
88[FieldAccessExpr
89[(?)AttachmentType
90[(?)AURA
91[ExpressionStmt
92[MethodCallExpr
93[(?)this
94[(?)addAbility
95[NodeList
96[ObjectCreationExpr
97[ClassOrInterfaceType
98[ExplicitConstructorInvocationStmt
99[NodeList
100[(?)ownerId
101[(?)144
102[(?)"Crystallization"
103[FieldAccessExpr
104[(?)Rarity
105[(?)COMMON
106[ArrayCreationExpr
107[NodeList
108[ArrayCreationLevel
109[ClassOrInterfaceType
110[ArrayInitializerExpr
111[NodeList
112[FieldAccessExpr
113[(?)CardType
114[(?)ENCHANTMENT
115[(?)"{G/U}{W}"
116[ConstructorDeclaration
117[(?)Crystallization
118[NodeList
119[Parameter
120[VariableDeclaratorId
121[ClassOrInterfaceType
122[BlockStmt
123[NodeList
124[ExplicitConstructorInvocationStmt
125[NodeList
126[(?)card
127[@Overridepublic Crystallization copy() { return new Crystallization(this);}
128[NodeList
129[MarkerAnnotationExpr
130[(?)Override
131[ClassOrInterfaceType
132[(?)copy
133[BlockStmt
134[NodeList
135[ReturnStmt
136[ObjectCreationExpr
137[ClassOrInterfaceType
138[NodeList
139[(?)this
140[NodeList
141[ClassOrInterfaceType
142[ClassOrInterfaceDeclaration
143[(?)CrystallizationTriggeredAbility
144[NodeList
145[ConstructorDeclaration
146[(?)CrystallizationTriggeredAbility
147[BlockStmt
148[NodeList
149[ExplicitConstructorInvocationStmt
150[NodeList
151[FieldAccessExpr
152[(?)Zone
153[(?)BATTLEFIELD
154[ObjectCreationExpr
155[ClassOrInterfaceType
156[ConstructorDeclaration
157[(?)CrystallizationTriggeredAbility
158[NodeList
159[Parameter
160[VariableDeclaratorId
161[ClassOrInterfaceType
162[BlockStmt
163[NodeList
164[ExplicitConstructorInvocationStmt
165[NodeList
166[(?)ability
167[@Overridepublic CrystallizationTriggeredAbility copy() { return new CrystallizationTriggeredAbility(this);}
168[NodeList
169[MarkerAnnotationExpr
170[(?)Override
171[ClassOrInterfaceType
172[(?)copy
173[BlockStmt
174[NodeList
175[ReturnStmt
176[ObjectCreationExpr
177[ClassOrInterfaceType
178[NodeList
179[(?)this
180[@Overridepublic boolean checkEventType(GameEvent event, Game game) { return event.getType() == EventType.TARGETED;}
181[NodeList
182[MarkerAnnotationExpr
183[(?)Override
184[PrimitiveType
185[(?)checkEventType
186[NodeList
187[Parameter
188[VariableDeclaratorId
189[ClassOrInterfaceType
190[Parameter
191[VariableDeclaratorId
192[ClassOrInterfaceType
193[BlockStmt
194[NodeList
195[ReturnStmt
196[BinaryExpr
197[MethodCallExpr
198[(?)event
199[(?)getType
200[FieldAccessExpr
201[(?)EventType
202[(?)TARGETED
203[@Overridepublic boolean checkTrigger(GameEvent event, Game game) { Permanent enchantment = game.getPermanent(sourceId); if (enchantment != null && enchantment.getAttachedTo() != null) { UUID enchanted = enchantment.getAttachedTo(); if (event.getTargetId().equals(enchanted)) { getEffects().get(0).setTargetPointer(new FixedTarget(enchanted)); return true; } } return false;}
204[NodeList
205[MarkerAnnotationExpr
206[(?)Override
207[PrimitiveType
208[(?)checkTrigger
209[NodeList
210[Parameter
211[VariableDeclaratorId
212[ClassOrInterfaceType
213[Parameter
214[VariableDeclaratorId
215[ClassOrInterfaceType
216[BlockStmt
217[NodeList
218[ExpressionStmt
219[VariableDeclarationExpr
220[ClassOrInterfaceType
221[NodeList
222[VariableDeclarator
223[VariableDeclaratorId
224[MethodCallExpr
225[(?)game
226[(?)getPermanent
227[NodeList
228[(?)sourceId
229[IfStmt
230[BinaryExpr
231[BinaryExpr
232[(?)enchantment
233[(?)null
234[BinaryExpr
235[MethodCallExpr
236[(?)enchantment
237[(?)getAttachedTo
238[(?)null
239[BlockStmt
240[NodeList
241[ExpressionStmt
242[VariableDeclarationExpr
243[ClassOrInterfaceType
244[NodeList
245[VariableDeclarator
246[VariableDeclaratorId
247[MethodCallExpr
248[(?)enchantment
249[(?)getAttachedTo
250[IfStmt
251[MethodCallExpr
252[MethodCallExpr
253[(?)event
254[(?)getTargetId
255[(?)equals
256[NodeList
257[(?)enchanted
258[BlockStmt
259[NodeList
260[ExpressionStmt
261[MethodCallExpr
262[MethodCallExpr
263[MethodCallExpr
264[(?)getEffects
265[(?)get
266[NodeList
267[(?)0
268[(?)setTargetPointer
269[NodeList
270[ObjectCreationExpr
271[ClassOrInterfaceType
272[NodeList
273[(?)enchanted
274[ReturnStmt
275[(?)true
276[ReturnStmt
277[(?)false
278[@Overridepublic String getRule() { return "When enchanted creature becomes the target of a spell or ability, exile that creature.";}
279[NodeList
280[MarkerAnnotationExpr
281[(?)Override
282[ClassOrInterfaceType
283[(?)getRule
284[BlockStmt
285[NodeList
286[ReturnStmt
287[(?)"When enchanted creature becomes the target of a spell or ability, exile that creature."
288[NodeList
289[ClassOrInterfaceType
3233->3234
3234->3235
3235->3236
3235->3237
3237->3238
3238->3239
3238->3240
3240->3241
3241->3242
3241->3243
3238->3244
3244->3245
3245->3246
3246->3247
3247->3248
3248->3249
3248->3250
3247->3251
3245->3252
3252->3253
3253->3254
3254->3255
3254->3256
3253->3257
3253->3258
3258->3259
3245->3260
3260->3261
3261->3262
3261->3263
3263->3264
3264->3265
3264->3266
3266->3267
3245->3268
3268->3269
3269->3270
3270->3271
3270->3272
3269->3273
3269->3274
3274->3275
3245->3276
3276->3277
3277->3278
3278->3279
3278->3280
3277->3281
3277->3282
3282->3283
3283->3284
3283->3285
3285->3286
3286->3287
3286->3288
3245->3289
3289->3290
3290->3291
3290->3292
3292->3293
3293->3294
3293->3295
3295->3296
3295->3297
3297->3298
3298->3299
3298->3300
3245->3301
3301->3302
3302->3303
3302->3304
3302->3305
3305->3306
3245->3307
3307->3308
3308->3309
3308->3310
3308->3311
3311->3312
3312->3313
3312->3314
3314->3315
3315->3316
3315->3317
3314->3318
3318->3319
3318->3320
3320->3321
3321->3322
3321->3323
3245->3324
3324->3325
3325->3326
3325->3327
3325->3328
3328->3329
3329->3330
3245->3331
3331->3332
3332->3333
3332->3334
3332->3335
3332->3336
3336->3337
3336->3338
3332->3339
3339->3340
3340->3341
3339->3342
3339->3343
3343->3344
3344->3345
3345->3346
3345->3347
3332->3348
3237->3349
3349->3350
3349->3351
3351->3352
3352->3353
3352->3354
3349->3355
3355->3356
3356->3357
3357->3358
3358->3359
3237->3360
3360->3361
3361->3362
3362->3363
3360->3364
3360->3365
3360->3366
3366->3367
3367->3368
3368->3369
3369->3370
3369->3371
3371->3372
3235->3373
3373->3374
3234->3375
3375->3376
3375->3377
3377->3378
3378->3379
3378->3380
3380->3381
3381->3382
3382->3383
3383->3384
3384->3385
3384->3386
3383->3387
3387->3388
3377->3389
3389->3390
3389->3391
3391->3392
3392->3393
3392->3394
3389->3395
3395->3396
3396->3397
3397->3398
3398->3399
3377->3400
3400->3401
3401->3402
3402->3403
3400->3404
3400->3405
3400->3406
3406->3407
3407->3408
3408->3409
3409->3410
3409->3411
3411->3412
3377->3413
3413->3414
3414->3415
3415->3416
3413->3417
3413->3418
3413->3419
3419->3420
3420->3421
3420->3422
3419->3423
3423->3424
3423->3425
3413->3426
3426->3427
3427->3428
3428->3429
3429->3430
3430->3431
3430->3432
3429->3433
3433->3434
3433->3435
3377->3436
3436->3437
3437->3438
3438->3439
3436->3440
3436->3441
3436->3442
3442->3443
3443->3444
3443->3445
3442->3446
3446->3447
3446->3448
3436->3449
3449->3450
3450->3451
3451->3452
3452->3453
3452->3454
3454->3455
3455->3456
3455->3457
3457->3458
3457->3459
3457->3460
3460->3461
3450->3462
3462->3463
3463->3464
3464->3465
3464->3466
3463->3467
3467->3468
3468->3469
3468->3470
3467->3471
3462->3472
3472->3473
3473->3474
3474->3475
3475->3476
3475->3477
3477->3478
3478->3479
3478->3480
3480->3481
3480->3482
3473->3483
3483->3484
3484->3485
3485->3486
3485->3487
3484->3488
3484->3489
3489->3490
3483->3491
3491->3492
3492->3493
3493->3494
3494->3495
3495->3496
3496->3497
3495->3498
3495->3499
3499->3500
3494->3501
3494->3502
3502->3503
3503->3504
3503->3505
3505->3506
3492->3507
3507->3508
3450->3509
3509->3510
3377->3511
3511->3512
3512->3513
3513->3514
3511->3515
3511->3516
3511->3517
3517->3518
3518->3519
3519->3520
3375->3521
3521->3522
