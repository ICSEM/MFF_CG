AST
0[CompilationUnit
1[NodeList
2[ClassOrInterfaceDeclaration
3[(?)FiligreeAngel
4[NodeList
5[ConstructorDeclaration
6[(?)FiligreeAngel
7[NodeList
8[Parameter
9[VariableDeclaratorId
10[ClassOrInterfaceType
11[BlockStmt
12[NodeList
13[ExpressionStmt
14[AssignExpr
15[FieldAccessExpr
16[(?)this
17[(?)expansionSetCode
18[(?)"ARB"
19[ExpressionStmt
20[MethodCallExpr
21[FieldAccessExpr
22[(?)this
23[(?)subtype
24[(?)add
25[NodeList
26[(?)"Angel"
27[ExpressionStmt
28[AssignExpr
29[FieldAccessExpr
30[(?)this
31[(?)power
32[ObjectCreationExpr
33[ClassOrInterfaceType
34[NodeList
35[(?)4
36[ExpressionStmt
37[AssignExpr
38[FieldAccessExpr
39[(?)this
40[(?)toughness
41[ObjectCreationExpr
42[ClassOrInterfaceType
43[NodeList
44[(?)4
45[ExpressionStmt
46[MethodCallExpr
47[(?)this
48[(?)addAbility
49[NodeList
50[MethodCallExpr
51[(?)FlyingAbility
52[(?)getInstance
53[ExpressionStmt
54[MethodCallExpr
55[(?)this
56[(?)addAbility
57[NodeList
58[ObjectCreationExpr
59[ClassOrInterfaceType
60[NodeList
61[ObjectCreationExpr
62[ClassOrInterfaceType
63[ExplicitConstructorInvocationStmt
64[NodeList
65[(?)ownerId
66[(?)6
67[(?)"Filigree Angel"
68[FieldAccessExpr
69[(?)Rarity
70[(?)RARE
71[ArrayCreationExpr
72[NodeList
73[ArrayCreationLevel
74[ClassOrInterfaceType
75[ArrayInitializerExpr
76[NodeList
77[FieldAccessExpr
78[(?)CardType
79[(?)ARTIFACT
80[FieldAccessExpr
81[(?)CardType
82[(?)CREATURE
83[(?)"{5}{W}{W}{U}"
84[ConstructorDeclaration
85[(?)FiligreeAngel
86[NodeList
87[Parameter
88[VariableDeclaratorId
89[ClassOrInterfaceType
90[BlockStmt
91[NodeList
92[ExplicitConstructorInvocationStmt
93[NodeList
94[(?)card
95[@Overridepublic FiligreeAngel copy() { return new FiligreeAngel(this);}
96[NodeList
97[MarkerAnnotationExpr
98[(?)Override
99[ClassOrInterfaceType
100[(?)copy
101[BlockStmt
102[NodeList
103[ReturnStmt
104[ObjectCreationExpr
105[ClassOrInterfaceType
106[NodeList
107[(?)this
108[NodeList
109[ClassOrInterfaceType
110[ClassOrInterfaceDeclaration
111[(?)FiligreeAngelEffect
112[NodeList
113[FieldDeclaration
114[ClassOrInterfaceType
115[NodeList
116[VariableDeclarator
117[VariableDeclaratorId
118[ObjectCreationExpr
119[ClassOrInterfaceType
120[InitializerDeclaration
121[BlockStmt
122[NodeList
123[ExpressionStmt
124[MethodCallExpr
125[(?)filter
126[(?)add
127[NodeList
128[ObjectCreationExpr
129[ClassOrInterfaceType
130[NodeList
131[FieldAccessExpr
132[(?)CardType
133[(?)ARTIFACT
134[ConstructorDeclaration
135[(?)FiligreeAngelEffect
136[BlockStmt
137[NodeList
138[ExpressionStmt
139[AssignExpr
140[(?)staticText
141[(?)"you gain 3 life for each artifact you control"
142[ExplicitConstructorInvocationStmt
143[NodeList
144[FieldAccessExpr
145[(?)Outcome
146[(?)GainLife
147[ConstructorDeclaration
148[(?)FiligreeAngelEffect
149[NodeList
150[Parameter
151[VariableDeclaratorId
152[ClassOrInterfaceType
153[BlockStmt
154[NodeList
155[ExplicitConstructorInvocationStmt
156[NodeList
157[(?)effect
158[@Overridepublic boolean apply(Game game, Ability source) { Player player = game.getPlayer(source.getControllerId()); if (player != null) { int life = game.getBattlefield().count(filter, source.getSourceId(), source.getControllerId(), game) * 3; player.gainLife(life, game); } return true;}
159[NodeList
160[MarkerAnnotationExpr
161[(?)Override
162[PrimitiveType
163[(?)apply
164[NodeList
165[Parameter
166[VariableDeclaratorId
167[ClassOrInterfaceType
168[Parameter
169[VariableDeclaratorId
170[ClassOrInterfaceType
171[BlockStmt
172[NodeList
173[ExpressionStmt
174[VariableDeclarationExpr
175[ClassOrInterfaceType
176[NodeList
177[VariableDeclarator
178[VariableDeclaratorId
179[MethodCallExpr
180[(?)game
181[(?)getPlayer
182[NodeList
183[MethodCallExpr
184[(?)source
185[(?)getControllerId
186[IfStmt
187[BinaryExpr
188[(?)player
189[(?)null
190[BlockStmt
191[NodeList
192[ExpressionStmt
193[VariableDeclarationExpr
194[PrimitiveType
195[NodeList
196[VariableDeclarator
197[VariableDeclaratorId
198[BinaryExpr
199[MethodCallExpr
200[MethodCallExpr
201[(?)game
202[(?)getBattlefield
203[(?)count
204[NodeList
205[(?)filter
206[MethodCallExpr
207[(?)source
208[(?)getSourceId
209[MethodCallExpr
210[(?)source
211[(?)getControllerId
212[(?)game
213[(?)3
214[ExpressionStmt
215[MethodCallExpr
216[(?)player
217[(?)gainLife
218[NodeList
219[(?)life
220[(?)game
221[ReturnStmt
222[(?)true
223[@Overridepublic FiligreeAngelEffect copy() { return new FiligreeAngelEffect(this);}
224[NodeList
225[MarkerAnnotationExpr
226[(?)Override
227[ClassOrInterfaceType
228[(?)copy
229[BlockStmt
230[NodeList
231[ReturnStmt
232[ObjectCreationExpr
233[ClassOrInterfaceType
234[NodeList
235[(?)this
236[NodeList
237[ClassOrInterfaceType
6828->6829
6829->6830
6830->6831
6830->6832
6832->6833
6833->6834
6833->6835
6835->6836
6836->6837
6836->6838
6833->6839
6839->6840
6840->6841
6841->6842
6842->6843
6843->6844
6843->6845
6842->6846
6840->6847
6847->6848
6848->6849
6849->6850
6849->6851
6848->6852
6848->6853
6853->6854
6840->6855
6855->6856
6856->6857
6857->6858
6857->6859
6856->6860
6860->6861
6860->6862
6862->6863
6840->6864
6864->6865
6865->6866
6866->6867
6866->6868
6865->6869
6869->6870
6869->6871
6871->6872
6840->6873
6873->6874
6874->6875
6874->6876
6874->6877
6877->6878
6878->6879
6878->6880
6840->6881
6881->6882
6882->6883
6882->6884
6882->6885
6885->6886
6886->6887
6886->6888
6888->6889
6889->6890
6840->6891
6891->6892
6892->6893
6892->6894
6892->6895
6892->6896
6896->6897
6896->6898
6892->6899
6899->6900
6900->6901
6899->6902
6899->6903
6903->6904
6904->6905
6905->6906
6905->6907
6904->6908
6908->6909
6908->6910
6892->6911
6832->6912
6912->6913
6912->6914
6914->6915
6915->6916
6915->6917
6912->6918
6918->6919
6919->6920
6920->6921
6921->6922
6832->6923
6923->6924
6924->6925
6925->6926
6923->6927
6923->6928
6923->6929
6929->6930
6930->6931
6931->6932
6932->6933
6932->6934
6934->6935
6830->6936
6936->6937
6829->6938
6938->6939
6938->6940
6940->6941
6941->6942
6941->6943
6943->6944
6944->6945
6944->6946
6946->6947
6940->6948
6948->6949
6949->6950
6950->6951
6951->6952
6952->6953
6952->6954
6952->6955
6955->6956
6956->6957
6956->6958
6958->6959
6959->6960
6959->6961
6940->6962
6962->6963
6962->6964
6964->6965
6965->6966
6966->6967
6967->6968
6967->6969
6965->6970
6970->6971
6971->6972
6972->6973
6972->6974
6940->6975
6975->6976
6975->6977
6977->6978
6978->6979
6978->6980
6975->6981
6981->6982
6982->6983
6983->6984
6984->6985
6940->6986
6986->6987
6987->6988
6988->6989
6986->6990
6986->6991
6986->6992
6992->6993
6993->6994
6993->6995
6992->6996
6996->6997
6996->6998
6986->6999
6999->7000
7000->7001
7001->7002
7002->7003
7002->7004
7004->7005
7005->7006
7005->7007
7007->7008
7007->7009
7007->7010
7010->7011
7011->7012
7011->7013
7000->7014
7014->7015
7015->7016
7015->7017
7014->7018
7018->7019
7019->7020
7020->7021
7021->7022
7021->7023
7023->7024
7024->7025
7024->7026
7026->7027
7027->7028
7028->7029
7028->7030
7027->7031
7027->7032
7032->7033
7032->7034
7034->7035
7034->7036
7032->7037
7037->7038
7037->7039
7032->7040
7026->7041
7019->7042
7042->7043
7043->7044
7043->7045
7043->7046
7046->7047
7046->7048
7000->7049
7049->7050
6940->7051
7051->7052
7052->7053
7053->7054
7051->7055
7051->7056
7051->7057
7057->7058
7058->7059
7059->7060
7060->7061
7060->7062
7062->7063
6938->7064
7064->7065
