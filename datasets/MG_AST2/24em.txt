AST
4445[CompilationUnit
4446[NodeList
4447[ClassOrInterfaceDeclaration
4448[DemonspineWhip
4449[NodeList
4450[ConstructorDeclaration
4451[DemonspineWhip
4452[NodeList
4453[Parameter
4454[VariableDeclaratorId
4455[ClassOrInterfaceType
4456[BlockStmt
4457[NodeList
4458[ExpressionStmt
4459[AssignExpr
4460[FieldAccessExpr
4461[this
4462[expansionSetCode
4463["ARB"
4464[ExpressionStmt
4465[MethodCallExpr
4466[FieldAccessExpr
4467[this
4468[subtype
4469[add
4470[NodeList
4471["Equipment"
4472[ExpressionStmt
4473[MethodCallExpr
4474[this
4475[addAbility
4476[NodeList
4477[ObjectCreationExpr
4478[ClassOrInterfaceType
4479[NodeList
4480[FieldAccessExpr
4481[Zone
4482[BATTLEFIELD
4483[ObjectCreationExpr
4484[ClassOrInterfaceType
4485[NodeList
4486[ObjectCreationExpr
4487[ClassOrInterfaceType
4488[ObjectCreationExpr
4489[ClassOrInterfaceType
4490[NodeList
4491[0
4492[FieldAccessExpr
4493[Duration
4494[EndOfTurn
4495[ObjectCreationExpr
4496[ClassOrInterfaceType
4497[NodeList
4498["{X}"
4499[ExpressionStmt
4500[MethodCallExpr
4501[this
4502[addAbility
4503[NodeList
4504[ObjectCreationExpr
4505[ClassOrInterfaceType
4506[NodeList
4507[FieldAccessExpr
4508[Outcome
4509[AddAbility
4510[ObjectCreationExpr
4511[ClassOrInterfaceType
4512[NodeList
4513[1
4514[ExplicitConstructorInvocationStmt
4515[NodeList
4516[ownerId
4517[39
4518["Demonspine Whip"
4519[FieldAccessExpr
4520[Rarity
4521[UNCOMMON
4522[ArrayCreationExpr
4523[NodeList
4524[ArrayCreationLevel
4525[ClassOrInterfaceType
4526[ArrayInitializerExpr
4527[NodeList
4528[FieldAccessExpr
4529[CardType
4530[ARTIFACT
4531["{B}{R}"
4532[ConstructorDeclaration
4533[DemonspineWhip
4534[NodeList
4535[Parameter
4536[VariableDeclaratorId
4537[ClassOrInterfaceType
4538[BlockStmt
4539[NodeList
4540[ExplicitConstructorInvocationStmt
4541[NodeList
4542[card
4543[@Overridepublic DemonspineWhip copy() { return new DemonspineWhip(this);}
4544[NodeList
4545[MarkerAnnotationExpr
4546[Override
4547[ClassOrInterfaceType
4548[copy
4549[BlockStmt
4550[NodeList
4551[ReturnStmt
4552[ObjectCreationExpr
4553[ClassOrInterfaceType
4554[NodeList
4555[this
4556[NodeList
4557[ClassOrInterfaceType
4558[ClassOrInterfaceDeclaration
4559[XPaid
4560[NodeList
4561[@Overridepublic int calculate(Game game, Ability sourceAbility, Effect effect) { int paid = sourceAbility.getManaCostsToPay().getX(); return paid;}
4562[NodeList
4563[MarkerAnnotationExpr
4564[Override
4565[PrimitiveType
4566[calculate
4567[NodeList
4568[Parameter
4569[VariableDeclaratorId
4570[ClassOrInterfaceType
4571[Parameter
4572[VariableDeclaratorId
4573[ClassOrInterfaceType
4574[Parameter
4575[VariableDeclaratorId
4576[ClassOrInterfaceType
4577[BlockStmt
4578[NodeList
4579[ExpressionStmt
4580[VariableDeclarationExpr
4581[PrimitiveType
4582[NodeList
4583[VariableDeclarator
4584[VariableDeclaratorId
4585[MethodCallExpr
4586[MethodCallExpr
4587[sourceAbility
4588[getManaCostsToPay
4589[getX
4590[ReturnStmt
4591[paid
4592[@Overridepublic DynamicValue copy() { return this;}
4593[NodeList
4594[MarkerAnnotationExpr
4595[Override
4596[ClassOrInterfaceType
4597[copy
4598[BlockStmt
4599[NodeList
4600[ReturnStmt
4601[this
4602[@Overridepublic String getMessage() { return "X paid";}
4603[NodeList
4604[MarkerAnnotationExpr
4605[Override
4606[ClassOrInterfaceType
4607[getMessage
4608[BlockStmt
4609[NodeList
4610[ReturnStmt
4611["X paid"
4612[@Overridepublic String toString() { return "X";}
4613[NodeList
4614[MarkerAnnotationExpr
4615[Override
4616[ClassOrInterfaceType
4617[toString
4618[BlockStmt
4619[NodeList
4620[ReturnStmt
4621["X"
4622[NodeList
4623[ClassOrInterfaceType
4445->4446
4446->4447
4447->4448
4447->4449
4449->4450
4450->4451
4450->4452
4452->4453
4453->4454
4453->4455
4450->4456
4456->4457
4457->4458
4458->4459
4459->4460
4460->4461
4460->4462
4459->4463
4457->4464
4464->4465
4465->4466
4466->4467
4466->4468
4465->4469
4465->4470
4470->4471
4457->4472
4472->4473
4473->4474
4473->4475
4473->4476
4476->4477
4477->4478
4477->4479
4479->4480
4480->4481
4480->4482
4479->4483
4483->4484
4483->4485
4485->4486
4486->4487
4485->4488
4488->4489
4488->4490
4490->4491
4485->4492
4492->4493
4492->4494
4479->4495
4495->4496
4495->4497
4497->4498
4457->4499
4499->4500
4500->4501
4500->4502
4500->4503
4503->4504
4504->4505
4504->4506
4506->4507
4507->4508
4507->4509
4506->4510
4510->4511
4510->4512
4512->4513
4457->4514
4514->4515
4515->4516
4515->4517
4515->4518
4515->4519
4519->4520
4519->4521
4515->4522
4522->4523
4523->4524
4522->4525
4522->4526
4526->4527
4527->4528
4528->4529
4528->4530
4515->4531
4449->4532
4532->4533
4532->4534
4534->4535
4535->4536
4535->4537
4532->4538
4538->4539
4539->4540
4540->4541
4541->4542
4449->4543
4543->4544
4544->4545
4545->4546
4543->4547
4543->4548
4543->4549
4549->4550
4550->4551
4551->4552
4552->4553
4552->4554
4554->4555
4447->4556
4556->4557
4446->4558
4558->4559
4558->4560
4560->4561
4561->4562
4562->4563
4563->4564
4561->4565
4561->4566
4561->4567
4567->4568
4568->4569
4568->4570
4567->4571
4571->4572
4571->4573
4567->4574
4574->4575
4574->4576
4561->4577
4577->4578
4578->4579
4579->4580
4580->4581
4580->4582
4582->4583
4583->4584
4583->4585
4585->4586
4586->4587
4586->4588
4585->4589
4578->4590
4590->4591
4560->4592
4592->4593
4593->4594
4594->4595
4592->4596
4592->4597
4592->4598
4598->4599
4599->4600
4600->4601
4560->4602
4602->4603
4603->4604
4604->4605
4602->4606
4602->4607
4602->4608
4608->4609
4609->4610
4610->4611
4560->4612
4612->4613
4613->4614
4614->4615
4612->4616
4612->4617
4612->4618
4618->4619
4619->4620
4620->4621
4558->4622
4622->4623
