AST
0[CompilationUnit
1[NodeList
2[ClassOrInterfaceDeclaration
3[(?)AgonizingDemise
4[NodeList
5[FieldDeclaration
6[ClassOrInterfaceType
7[NodeList
8[VariableDeclarator
9[VariableDeclaratorId
10[ObjectCreationExpr
11[ClassOrInterfaceType
12[NodeList
13[(?)"nonblack creature"
14[InitializerDeclaration
15[BlockStmt
16[NodeList
17[ExpressionStmt
18[MethodCallExpr
19[(?)filterNonBlackCreature
20[(?)add
21[NodeList
22[MethodCallExpr
23[(?)Predicates
24[(?)not
25[NodeList
26[ObjectCreationExpr
27[ClassOrInterfaceType
28[NodeList
29[FieldAccessExpr
30[(?)ObjectColor
31[(?)BLACK
32[ConstructorDeclaration
33[(?)AgonizingDemise
34[NodeList
35[Parameter
36[VariableDeclaratorId
37[ClassOrInterfaceType
38[BlockStmt
39[NodeList
40[ExpressionStmt
41[AssignExpr
42[FieldAccessExpr
43[(?)this
44[(?)expansionSetCode
45[(?)"DDH"
46[ExpressionStmt
47[MethodCallExpr
48[(?)this
49[(?)addAbility
50[NodeList
51[ObjectCreationExpr
52[ClassOrInterfaceType
53[NodeList
54[(?)"{1}{R}"
55[ExpressionStmt
56[MethodCallExpr
57[MethodCallExpr
58[(?)this
59[(?)getSpellAbility
60[(?)addEffect
61[NodeList
62[ObjectCreationExpr
63[ClassOrInterfaceType
64[ExpressionStmt
65[MethodCallExpr
66[MethodCallExpr
67[(?)this
68[(?)getSpellAbility
69[(?)addTarget
70[NodeList
71[ObjectCreationExpr
72[ClassOrInterfaceType
73[NodeList
74[(?)filterNonBlackCreature
75[ExpressionStmt
76[MethodCallExpr
77[MethodCallExpr
78[(?)this
79[(?)getSpellAbility
80[(?)addEffect
81[NodeList
82[ObjectCreationExpr
83[ClassOrInterfaceType
84[NodeList
85[ObjectCreationExpr
86[ClassOrInterfaceType
87[MethodCallExpr
88[(?)KickedCondition
89[(?)getInstance
90[(?)"If {this} was kicked, it deals damage equal to that creature's power to the creature's controller."
91[ExplicitConstructorInvocationStmt
92[NodeList
93[(?)ownerId
94[(?)66
95[(?)"Agonizing Demise"
96[FieldAccessExpr
97[(?)Rarity
98[(?)COMMON
99[ArrayCreationExpr
100[NodeList
101[ArrayCreationLevel
102[ClassOrInterfaceType
103[ArrayInitializerExpr
104[NodeList
105[FieldAccessExpr
106[(?)CardType
107[(?)INSTANT
108[(?)"{3}{B}"
109[ConstructorDeclaration
110[(?)AgonizingDemise
111[NodeList
112[Parameter
113[VariableDeclaratorId
114[ClassOrInterfaceType
115[BlockStmt
116[NodeList
117[ExplicitConstructorInvocationStmt
118[NodeList
119[(?)card
120[@Overridepublic AgonizingDemise copy() { return new AgonizingDemise(this);}
121[NodeList
122[MarkerAnnotationExpr
123[(?)Override
124[ClassOrInterfaceType
125[(?)copy
126[BlockStmt
127[NodeList
128[ReturnStmt
129[ObjectCreationExpr
130[ClassOrInterfaceType
131[NodeList
132[(?)this
133[NodeList
134[ClassOrInterfaceType
135[ClassOrInterfaceDeclaration
136[(?)AgonizingDemiseEffect
137[NodeList
138[ConstructorDeclaration
139[(?)AgonizingDemiseEffect
140[BlockStmt
141[NodeList
142[ExplicitConstructorInvocationStmt
143[NodeList
144[FieldAccessExpr
145[(?)Outcome
146[(?)Damage
147[ConstructorDeclaration
148[(?)AgonizingDemiseEffect
149[NodeList
150[Parameter
151[VariableDeclaratorId
152[ClassOrInterfaceType
153[BlockStmt
154[NodeList
155[ExplicitConstructorInvocationStmt
156[NodeList
157[(?)effect
158[@Overridepublic AgonizingDemiseEffect copy() { return new AgonizingDemiseEffect(this);}
159[NodeList
160[MarkerAnnotationExpr
161[(?)Override
162[ClassOrInterfaceType
163[(?)copy
164[BlockStmt
165[NodeList
166[ReturnStmt
167[ObjectCreationExpr
168[ClassOrInterfaceType
169[NodeList
170[(?)this
171[@Overridepublic boolean apply(Game game, Ability source) { Permanent permanent = game.getPermanentOrLKIBattlefield(this.getTargetPointer().getFirst(game, source)); if (permanent != null) { Player controller = game.getPlayer(permanent.getControllerId()); if (controller != null) { int amount = permanent.getPower().getValue(); controller.damage(amount, source.getSourceId(), game, false, true); return true; } } return false;}
172[NodeList
173[MarkerAnnotationExpr
174[(?)Override
175[PrimitiveType
176[(?)apply
177[NodeList
178[Parameter
179[VariableDeclaratorId
180[ClassOrInterfaceType
181[Parameter
182[VariableDeclaratorId
183[ClassOrInterfaceType
184[BlockStmt
185[NodeList
186[ExpressionStmt
187[VariableDeclarationExpr
188[ClassOrInterfaceType
189[NodeList
190[VariableDeclarator
191[VariableDeclaratorId
192[MethodCallExpr
193[(?)game
194[(?)getPermanentOrLKIBattlefield
195[NodeList
196[MethodCallExpr
197[MethodCallExpr
198[(?)this
199[(?)getTargetPointer
200[(?)getFirst
201[NodeList
202[(?)game
203[(?)source
204[IfStmt
205[BinaryExpr
206[(?)permanent
207[(?)null
208[BlockStmt
209[NodeList
210[ExpressionStmt
211[VariableDeclarationExpr
212[ClassOrInterfaceType
213[NodeList
214[VariableDeclarator
215[VariableDeclaratorId
216[MethodCallExpr
217[(?)game
218[(?)getPlayer
219[NodeList
220[MethodCallExpr
221[(?)permanent
222[(?)getControllerId
223[IfStmt
224[BinaryExpr
225[(?)controller
226[(?)null
227[BlockStmt
228[NodeList
229[ExpressionStmt
230[VariableDeclarationExpr
231[PrimitiveType
232[NodeList
233[VariableDeclarator
234[VariableDeclaratorId
235[MethodCallExpr
236[MethodCallExpr
237[(?)permanent
238[(?)getPower
239[(?)getValue
240[ExpressionStmt
241[MethodCallExpr
242[(?)controller
243[(?)damage
244[NodeList
245[(?)amount
246[MethodCallExpr
247[(?)source
248[(?)getSourceId
249[(?)game
250[(?)false
251[(?)true
252[ReturnStmt
253[(?)true
254[ReturnStmt
255[(?)false
256[NodeList
257[ClassOrInterfaceType
197->198
198->199
199->200
199->201
201->202
202->203
202->204
204->205
205->206
205->207
207->208
207->209
209->210
201->211
211->212
212->213
213->214
214->215
215->216
215->217
215->218
218->219
219->220
219->221
219->222
222->223
223->224
223->225
225->226
226->227
226->228
201->229
229->230
229->231
231->232
232->233
232->234
229->235
235->236
236->237
237->238
238->239
239->240
239->241
238->242
236->243
243->244
244->245
244->246
244->247
247->248
248->249
248->250
250->251
236->252
252->253
253->254
254->255
254->256
253->257
253->258
258->259
259->260
236->261
261->262
262->263
263->264
263->265
262->266
262->267
267->268
268->269
268->270
270->271
236->272
272->273
273->274
274->275
274->276
273->277
273->278
278->279
279->280
279->281
281->282
282->283
281->284
284->285
284->286
281->287
236->288
288->289
289->290
289->291
289->292
289->293
293->294
293->295
289->296
296->297
297->298
296->299
296->300
300->301
301->302
302->303
302->304
289->305
201->306
306->307
306->308
308->309
309->310
309->311
306->312
312->313
313->314
314->315
315->316
201->317
317->318
318->319
319->320
317->321
317->322
317->323
323->324
324->325
325->326
326->327
326->328
328->329
199->330
330->331
198->332
332->333
332->334
334->335
335->336
335->337
337->338
338->339
339->340
340->341
341->342
341->343
334->344
344->345
344->346
346->347
347->348
347->349
344->350
350->351
351->352
352->353
353->354
334->355
355->356
356->357
357->358
355->359
355->360
355->361
361->362
362->363
363->364
364->365
364->366
366->367
334->368
368->369
369->370
370->371
368->372
368->373
368->374
374->375
375->376
375->377
374->378
378->379
378->380
368->381
381->382
382->383
383->384
384->385
384->386
386->387
387->388
387->389
389->390
389->391
389->392
392->393
393->394
394->395
394->396
393->397
393->398
398->399
398->400
382->401
401->402
402->403
402->404
401->405
405->406
406->407
407->408
408->409
408->410
410->411
411->412
411->413
413->414
413->415
413->416
416->417
417->418
417->419
406->420
420->421
421->422
421->423
420->424
424->425
425->426
426->427
427->428
427->429
429->430
430->431
430->432
432->433
433->434
433->435
432->436
425->437
437->438
438->439
438->440
438->441
441->442
441->443
443->444
443->445
441->446
441->447
441->448
425->449
449->450
382->451
451->452
332->453
453->454
