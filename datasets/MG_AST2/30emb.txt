AST
0[CompilationUnit
1[NodeList
2[ClassOrInterfaceDeclaration
3[(?)EnigmaSphinx
4[NodeList
5[ConstructorDeclaration
6[(?)EnigmaSphinx
7[NodeList
8[Parameter
9[VariableDeclaratorId
10[ClassOrInterfaceType
11[BlockStmt
12[NodeList
13[ExpressionStmt
14[AssignExpr
15[FieldAccessExpr
16[(?)this
17[(?)expansionSetCode
18[(?)"ARB"
19[ExpressionStmt
20[MethodCallExpr
21[FieldAccessExpr
22[(?)this
23[(?)subtype
24[(?)add
25[NodeList
26[(?)"Sphinx"
27[ExpressionStmt
28[AssignExpr
29[FieldAccessExpr
30[(?)this
31[(?)power
32[ObjectCreationExpr
33[ClassOrInterfaceType
34[NodeList
35[(?)5
36[ExpressionStmt
37[AssignExpr
38[FieldAccessExpr
39[(?)this
40[(?)toughness
41[ObjectCreationExpr
42[ClassOrInterfaceType
43[NodeList
44[(?)4
45[ExpressionStmt
46[MethodCallExpr
47[(?)this
48[(?)addAbility
49[NodeList
50[MethodCallExpr
51[(?)FlyingAbility
52[(?)getInstance
53[ExpressionStmt
54[MethodCallExpr
55[(?)this
56[(?)addAbility
57[NodeList
58[ObjectCreationExpr
59[ClassOrInterfaceType
60[NodeList
61[ObjectCreationExpr
62[ClassOrInterfaceType
63[ExpressionStmt
64[MethodCallExpr
65[(?)this
66[(?)addAbility
67[NodeList
68[ObjectCreationExpr
69[ClassOrInterfaceType
70[ExplicitConstructorInvocationStmt
71[NodeList
72[(?)ownerId
73[(?)106
74[(?)"Enigma Sphinx"
75[FieldAccessExpr
76[(?)Rarity
77[(?)RARE
78[ArrayCreationExpr
79[NodeList
80[ArrayCreationLevel
81[ClassOrInterfaceType
82[ArrayInitializerExpr
83[NodeList
84[FieldAccessExpr
85[(?)CardType
86[(?)ARTIFACT
87[FieldAccessExpr
88[(?)CardType
89[(?)CREATURE
90[(?)"{4}{W}{U}{B}"
91[ConstructorDeclaration
92[(?)EnigmaSphinx
93[NodeList
94[Parameter
95[VariableDeclaratorId
96[ClassOrInterfaceType
97[BlockStmt
98[NodeList
99[ExplicitConstructorInvocationStmt
100[NodeList
101[(?)card
102[@Overridepublic EnigmaSphinx copy() { return new EnigmaSphinx(this);}
103[NodeList
104[MarkerAnnotationExpr
105[(?)Override
106[ClassOrInterfaceType
107[(?)copy
108[BlockStmt
109[NodeList
110[ReturnStmt
111[ObjectCreationExpr
112[ClassOrInterfaceType
113[NodeList
114[(?)this
115[NodeList
116[ClassOrInterfaceType
117[ClassOrInterfaceDeclaration
118[(?)EnigmaSphinxTriggeredAbility
119[NodeList
120[ConstructorDeclaration
121[(?)EnigmaSphinxTriggeredAbility
122[NodeList
123[Parameter
124[VariableDeclaratorId
125[ClassOrInterfaceType
126[BlockStmt
127[NodeList
128[ExplicitConstructorInvocationStmt
129[NodeList
130[(?)effect
131[(?)false
132[ConstructorDeclaration
133[(?)EnigmaSphinxTriggeredAbility
134[NodeList
135[Parameter
136[VariableDeclaratorId
137[ClassOrInterfaceType
138[Parameter
139[VariableDeclaratorId
140[PrimitiveType
141[BlockStmt
142[NodeList
143[ExplicitConstructorInvocationStmt
144[NodeList
145[FieldAccessExpr
146[(?)Zone
147[(?)ALL
148[(?)effect
149[(?)optional
150[ConstructorDeclaration
151[(?)EnigmaSphinxTriggeredAbility
152[NodeList
153[Parameter
154[VariableDeclaratorId
155[ClassOrInterfaceType
156[BlockStmt
157[NodeList
158[ExplicitConstructorInvocationStmt
159[NodeList
160[(?)ability
161[@Overridepublic EnigmaSphinxTriggeredAbility copy() { return new EnigmaSphinxTriggeredAbility(this);}
162[NodeList
163[MarkerAnnotationExpr
164[(?)Override
165[ClassOrInterfaceType
166[(?)copy
167[BlockStmt
168[NodeList
169[ReturnStmt
170[ObjectCreationExpr
171[ClassOrInterfaceType
172[NodeList
173[(?)this
174[@Overridepublic boolean checkEventType(GameEvent event, Game game) { return event.getType() == EventType.ZONE_CHANGE;}
175[NodeList
176[MarkerAnnotationExpr
177[(?)Override
178[PrimitiveType
179[(?)checkEventType
180[NodeList
181[Parameter
182[VariableDeclaratorId
183[ClassOrInterfaceType
184[Parameter
185[VariableDeclaratorId
186[ClassOrInterfaceType
187[BlockStmt
188[NodeList
189[ReturnStmt
190[BinaryExpr
191[MethodCallExpr
192[(?)event
193[(?)getType
194[FieldAccessExpr
195[(?)EventType
196[(?)ZONE_CHANGE
197[@Overridepublic boolean checkTrigger(GameEvent event, Game game) { ZoneChangeEvent zEvent = (ZoneChangeEvent) event; Permanent permanent = zEvent.getTarget(); if (permanent != null && zEvent.getToZone() == Zone.GRAVEYARD && zEvent.getFromZone() == Zone.BATTLEFIELD && permanent.getId().equals(this.getSourceId()) && permanent.getOwnerId().equals(permanent.getControllerId())) { return true; } return false;}
198[NodeList
199[MarkerAnnotationExpr
200[(?)Override
201[PrimitiveType
202[(?)checkTrigger
203[NodeList
204[Parameter
205[VariableDeclaratorId
206[ClassOrInterfaceType
207[Parameter
208[VariableDeclaratorId
209[ClassOrInterfaceType
210[BlockStmt
211[NodeList
212[ExpressionStmt
213[VariableDeclarationExpr
214[ClassOrInterfaceType
215[NodeList
216[VariableDeclarator
217[VariableDeclaratorId
218[CastExpr
219[ClassOrInterfaceType
220[(?)event
221[ExpressionStmt
222[VariableDeclarationExpr
223[ClassOrInterfaceType
224[NodeList
225[VariableDeclarator
226[VariableDeclaratorId
227[MethodCallExpr
228[(?)zEvent
229[(?)getTarget
230[IfStmt
231[BinaryExpr
232[BinaryExpr
233[BinaryExpr
234[BinaryExpr
235[BinaryExpr
236[(?)permanent
237[(?)null
238[BinaryExpr
239[MethodCallExpr
240[(?)zEvent
241[(?)getToZone
242[FieldAccessExpr
243[(?)Zone
244[(?)GRAVEYARD
245[BinaryExpr
246[MethodCallExpr
247[(?)zEvent
248[(?)getFromZone
249[FieldAccessExpr
250[(?)Zone
251[(?)BATTLEFIELD
252[MethodCallExpr
253[MethodCallExpr
254[(?)permanent
255[(?)getId
256[(?)equals
257[NodeList
258[MethodCallExpr
259[(?)this
260[(?)getSourceId
261[MethodCallExpr
262[MethodCallExpr
263[(?)permanent
264[(?)getOwnerId
265[(?)equals
266[NodeList
267[MethodCallExpr
268[(?)permanent
269[(?)getControllerId
270[BlockStmt
271[NodeList
272[ReturnStmt
273[(?)true
274[ReturnStmt
275[(?)false
276[@Overridepublic String getRule() { return "When {this} is put into your graveyard from the battlefield, " + super.getRule();}
277[NodeList
278[MarkerAnnotationExpr
279[(?)Override
280[ClassOrInterfaceType
281[(?)getRule
282[BlockStmt
283[NodeList
284[ReturnStmt
285[BinaryExpr
286[(?)"When {this} is put into your graveyard from the battlefield, "
287[MethodCallExpr
288[(?)super
289[(?)getRule
290[NodeList
291[ClassOrInterfaceType
292[ClassOrInterfaceDeclaration
293[(?)EnigmaSphinxEffect
294[NodeList
295[ConstructorDeclaration
296[(?)EnigmaSphinxEffect
297[BlockStmt
298[NodeList
299[ExpressionStmt
300[AssignExpr
301[(?)staticText
302[(?)"put it into your library third from the top"
303[ExplicitConstructorInvocationStmt
304[NodeList
305[FieldAccessExpr
306[(?)Outcome
307[(?)ReturnToHand
308[ConstructorDeclaration
309[(?)EnigmaSphinxEffect
310[NodeList
311[Parameter
312[VariableDeclaratorId
313[ClassOrInterfaceType
314[BlockStmt
315[NodeList
316[ExplicitConstructorInvocationStmt
317[NodeList
318[(?)effect
319[@Overridepublic EnigmaSphinxEffect copy() { return new EnigmaSphinxEffect(this);}
320[NodeList
321[MarkerAnnotationExpr
322[(?)Override
323[ClassOrInterfaceType
324[(?)copy
325[BlockStmt
326[NodeList
327[ReturnStmt
328[ObjectCreationExpr
329[ClassOrInterfaceType
330[NodeList
331[(?)this
332[@Overridepublic boolean apply(Game game, Ability source) { Card card = game.getCard(source.getSourceId()); if (card != null && game.getState().getZone(source.getSourceId()) == Zone.GRAVEYARD) { Player owner = game.getPlayer(card.getOwnerId()); if (owner != null && card.moveToZone(Zone.LIBRARY, source.getSourceId(), game, true)) { game.informPlayers(card.getLogName() + " is put into " + owner.getLogName() + "'s library third from the top"); Library lib = owner.getLibrary(); if (lib != null) { Card card1 = lib.removeFromTop(game); if (card1 != null && card1.getId().equals(source.getSourceId())) { Card card2 = lib.removeFromTop(game); Card card3 = lib.removeFromTop(game); lib.putOnTop(card1, game); if (card3 != null) { lib.putOnTop(card3, game); } if (card2 != null) { lib.putOnTop(card2, game); } return true; } } } } return false;}
333[NodeList
334[MarkerAnnotationExpr
335[(?)Override
336[PrimitiveType
337[(?)apply
338[NodeList
339[Parameter
340[VariableDeclaratorId
341[ClassOrInterfaceType
342[Parameter
343[VariableDeclaratorId
344[ClassOrInterfaceType
345[BlockStmt
346[NodeList
347[ExpressionStmt
348[VariableDeclarationExpr
349[ClassOrInterfaceType
350[NodeList
351[VariableDeclarator
352[VariableDeclaratorId
353[MethodCallExpr
354[(?)game
355[(?)getCard
356[NodeList
357[MethodCallExpr
358[(?)source
359[(?)getSourceId
360[IfStmt
361[BinaryExpr
362[BinaryExpr
363[(?)card
364[(?)null
365[BinaryExpr
366[MethodCallExpr
367[MethodCallExpr
368[(?)game
369[(?)getState
370[(?)getZone
371[NodeList
372[MethodCallExpr
373[(?)source
374[(?)getSourceId
375[FieldAccessExpr
376[(?)Zone
377[(?)GRAVEYARD
378[BlockStmt
379[NodeList
380[ExpressionStmt
381[VariableDeclarationExpr
382[ClassOrInterfaceType
383[NodeList
384[VariableDeclarator
385[VariableDeclaratorId
386[MethodCallExpr
387[(?)game
388[(?)getPlayer
389[NodeList
390[MethodCallExpr
391[(?)card
392[(?)getOwnerId
393[IfStmt
394[BinaryExpr
395[BinaryExpr
396[(?)owner
397[(?)null
398[MethodCallExpr
399[(?)card
400[(?)moveToZone
401[NodeList
402[FieldAccessExpr
403[(?)Zone
404[(?)LIBRARY
405[MethodCallExpr
406[(?)source
407[(?)getSourceId
408[(?)game
409[(?)true
410[BlockStmt
411[NodeList
412[ExpressionStmt
413[MethodCallExpr
414[(?)game
415[(?)informPlayers
416[NodeList
417[BinaryExpr
418[BinaryExpr
419[BinaryExpr
420[MethodCallExpr
421[(?)card
422[(?)getLogName
423[(?)" is put into "
424[MethodCallExpr
425[(?)owner
426[(?)getLogName
427[(?)"'s library third from the top"
428[ExpressionStmt
429[VariableDeclarationExpr
430[ClassOrInterfaceType
431[NodeList
432[VariableDeclarator
433[VariableDeclaratorId
434[MethodCallExpr
435[(?)owner
436[(?)getLibrary
437[IfStmt
438[BinaryExpr
439[(?)lib
440[(?)null
441[BlockStmt
442[NodeList
443[ExpressionStmt
444[VariableDeclarationExpr
445[ClassOrInterfaceType
446[NodeList
447[VariableDeclarator
448[VariableDeclaratorId
449[MethodCallExpr
450[(?)lib
451[(?)removeFromTop
452[NodeList
453[(?)game
454[IfStmt
455[BinaryExpr
456[BinaryExpr
457[(?)card1
458[(?)null
459[MethodCallExpr
460[MethodCallExpr
461[(?)card1
462[(?)getId
463[(?)equals
464[NodeList
465[MethodCallExpr
466[(?)source
467[(?)getSourceId
468[BlockStmt
469[NodeList
470[ExpressionStmt
471[VariableDeclarationExpr
472[ClassOrInterfaceType
473[NodeList
474[VariableDeclarator
475[VariableDeclaratorId
476[MethodCallExpr
477[(?)lib
478[(?)removeFromTop
479[NodeList
480[(?)game
481[ExpressionStmt
482[VariableDeclarationExpr
483[ClassOrInterfaceType
484[NodeList
485[VariableDeclarator
486[VariableDeclaratorId
487[MethodCallExpr
488[(?)lib
489[(?)removeFromTop
490[NodeList
491[(?)game
492[ExpressionStmt
493[MethodCallExpr
494[(?)lib
495[(?)putOnTop
496[NodeList
497[(?)card1
498[(?)game
499[IfStmt
500[BinaryExpr
501[(?)card3
502[(?)null
503[BlockStmt
504[NodeList
505[ExpressionStmt
506[MethodCallExpr
507[(?)lib
508[(?)putOnTop
509[NodeList
510[(?)card3
511[(?)game
512[IfStmt
513[BinaryExpr
514[(?)card2
515[(?)null
516[BlockStmt
517[NodeList
518[ExpressionStmt
519[MethodCallExpr
520[(?)lib
521[(?)putOnTop
522[NodeList
523[(?)card2
524[(?)game
525[ReturnStmt
526[(?)true
527[ReturnStmt
528[(?)false
529[NodeList
530[ClassOrInterfaceType
5416->5417
5417->5418
5418->5419
5418->5420
5420->5421
5421->5422
5421->5423
5423->5424
5424->5425
5424->5426
5421->5427
5427->5428
5428->5429
5429->5430
5430->5431
5431->5432
5431->5433
5430->5434
5428->5435
5435->5436
5436->5437
5437->5438
5437->5439
5436->5440
5436->5441
5441->5442
5428->5443
5443->5444
5444->5445
5445->5446
5445->5447
5444->5448
5448->5449
5448->5450
5450->5451
5428->5452
5452->5453
5453->5454
5454->5455
5454->5456
5453->5457
5457->5458
5457->5459
5459->5460
5428->5461
5461->5462
5462->5463
5462->5464
5462->5465
5465->5466
5466->5467
5466->5468
5428->5469
5469->5470
5470->5471
5470->5472
5470->5473
5473->5474
5474->5475
5474->5476
5476->5477
5477->5478
5428->5479
5479->5480
5480->5481
5480->5482
5480->5483
5483->5484
5484->5485
5428->5486
5486->5487
5487->5488
5487->5489
5487->5490
5487->5491
5491->5492
5491->5493
5487->5494
5494->5495
5495->5496
5494->5497
5494->5498
5498->5499
5499->5500
5500->5501
5500->5502
5499->5503
5503->5504
5503->5505
5487->5506
5420->5507
5507->5508
5507->5509
5509->5510
5510->5511
5510->5512
5507->5513
5513->5514
5514->5515
5515->5516
5516->5517
5420->5518
5518->5519
5519->5520
5520->5521
5518->5522
5518->5523
5518->5524
5524->5525
5525->5526
5526->5527
5527->5528
5527->5529
5529->5530
5418->5531
5531->5532
5417->5533
5533->5534
5533->5535
5535->5536
5536->5537
5536->5538
5538->5539
5539->5540
5539->5541
5536->5542
5542->5543
5543->5544
5544->5545
5545->5546
5545->5547
5535->5548
5548->5549
5548->5550
5550->5551
5551->5552
5551->5553
5550->5554
5554->5555
5554->5556
5548->5557
5557->5558
5558->5559
5559->5560
5560->5561
5561->5562
5561->5563
5560->5564
5560->5565
5535->5566
5566->5567
5566->5568
5568->5569
5569->5570
5569->5571
5566->5572
5572->5573
5573->5574
5574->5575
5575->5576
5535->5577
5577->5578
5578->5579
5579->5580
5577->5581
5577->5582
5577->5583
5583->5584
5584->5585
5585->5586
5586->5587
5586->5588
5588->5589
5535->5590
5590->5591
5591->5592
5592->5593
5590->5594
5590->5595
5590->5596
5596->5597
5597->5598
5597->5599
5596->5600
5600->5601
5600->5602
5590->5603
5603->5604
5604->5605
5605->5606
5606->5607
5607->5608
5607->5609
5606->5610
5610->5611
5610->5612
5535->5613
5613->5614
5614->5615
5615->5616
5613->5617
5613->5618
5613->5619
5619->5620
5620->5621
5620->5622
5619->5623
5623->5624
5623->5625
5613->5626
5626->5627
5627->5628
5628->5629
5629->5630
5629->5631
5631->5632
5632->5633
5632->5634
5634->5635
5634->5636
5627->5637
5637->5638
5638->5639
5638->5640
5640->5641
5641->5642
5641->5643
5643->5644
5643->5645
5627->5646
5646->5647
5647->5648
5648->5649
5649->5650
5650->5651
5651->5652
5651->5653
5650->5654
5654->5655
5655->5656
5655->5657
5654->5658
5658->5659
5658->5660
5649->5661
5661->5662
5662->5663
5662->5664
5661->5665
5665->5666
5665->5667
5648->5668
5668->5669
5669->5670
5669->5671
5668->5672
5668->5673
5673->5674
5674->5675
5674->5676
5647->5677
5677->5678
5678->5679
5678->5680
5677->5681
5677->5682
5682->5683
5683->5684
5683->5685
5646->5686
5686->5687
5687->5688
5688->5689
5627->5690
5690->5691
5535->5692
5692->5693
5693->5694
5694->5695
5692->5696
5692->5697
5692->5698
5698->5699
5699->5700
5700->5701
5701->5702
5701->5703
5703->5704
5703->5705
5533->5706
5706->5707
5417->5708
5708->5709
5708->5710
5710->5711
5711->5712
5711->5713
5713->5714
5714->5715
5715->5716
5716->5717
5716->5718
5714->5719
5719->5720
5720->5721
5721->5722
5721->5723
5710->5724
5724->5725
5724->5726
5726->5727
5727->5728
5727->5729
5724->5730
5730->5731
5731->5732
5732->5733
5733->5734
5710->5735
5735->5736
5736->5737
5737->5738
5735->5739
5735->5740
5735->5741
5741->5742
5742->5743
5743->5744
5744->5745
5744->5746
5746->5747
5710->5748
5748->5749
5749->5750
5750->5751
5748->5752
5748->5753
5748->5754
5754->5755
5755->5756
5755->5757
5754->5758
5758->5759
5758->5760
5748->5761
5761->5762
5762->5763
5763->5764
5764->5765
5764->5766
5766->5767
5767->5768
5767->5769
5769->5770
5769->5771
5769->5772
5772->5773
5773->5774
5773->5775
5762->5776
5776->5777
5777->5778
5778->5779
5778->5780
5777->5781
5781->5782
5782->5783
5783->5784
5783->5785
5782->5786
5782->5787
5787->5788
5788->5789
5788->5790
5781->5791
5791->5792
5791->5793
5776->5794
5794->5795
5795->5796
5796->5797
5797->5798
5797->5799
5799->5800
5800->5801
5800->5802
5802->5803
5802->5804
5802->5805
5805->5806
5806->5807
5806->5808
5795->5809
5809->5810
5810->5811
5811->5812
5811->5813
5810->5814
5814->5815
5814->5816
5814->5817
5817->5818
5818->5819
5818->5820
5817->5821
5821->5822
5821->5823
5817->5824
5817->5825
5809->5826
5826->5827
5827->5828
5828->5829
5829->5830
5829->5831
5829->5832
5832->5833
5833->5834
5834->5835
5835->5836
5836->5837
5836->5838
5835->5839
5834->5840
5840->5841
5840->5842
5833->5843
5827->5844
5844->5845
5845->5846
5845->5847
5847->5848
5848->5849
5848->5850
5850->5851
5850->5852
5827->5853
5853->5854
5854->5855
5854->5856
5853->5857
5857->5858
5858->5859
5859->5860
5860->5861
5860->5862
5862->5863
5863->5864
5863->5865
5865->5866
5865->5867
5865->5868
5868->5869
5858->5870
5870->5871
5871->5872
5872->5873
5872->5874
5871->5875
5875->5876
5876->5877
5876->5878
5875->5879
5875->5880
5880->5881
5881->5882
5881->5883
5870->5884
5884->5885
5885->5886
5886->5887
5887->5888
5887->5889
5889->5890
5890->5891
5890->5892
5892->5893
5892->5894
5892->5895
5895->5896
5885->5897
5897->5898
5898->5899
5898->5900
5900->5901
5901->5902
5901->5903
5903->5904
5903->5905
5903->5906
5906->5907
5885->5908
5908->5909
5909->5910
5909->5911
5909->5912
5912->5913
5912->5914
5885->5915
5915->5916
5916->5917
5916->5918
5915->5919
5919->5920
5920->5921
5921->5922
5922->5923
5922->5924
5922->5925
5925->5926
5925->5927
5885->5928
5928->5929
5929->5930
5929->5931
5928->5932
5932->5933
5933->5934
5934->5935
5935->5936
5935->5937
5935->5938
5938->5939
5938->5940
5885->5941
5941->5942
5762->5943
5943->5944
5708->5945
5945->5946
