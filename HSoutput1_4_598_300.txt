class DalaranMage ( MinionCard ) : § def __init__ ( self ) : § super ( ) . __init__ ( "Dalaran Mage", 3, CHARACTER_CLASS . ALL, CARD_RARITY . COMMON ) § § def create_minion ( self, player ) : § return Minion ( 7, 4, spell_damage=1 ) § pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad
class Nerubian ( MinionCard ) : § def __init__ ( self ) : § super ( ) . __init__ ( "Nerubian", 3, CHARACTER_CLASS . ALL, CARD_RARITY . COMMON ) § § def create_minion ( self, player ) : § return Minion ( 4, 5, taunt=True ) § pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad
class PriestessOfElune ( MinionCard ) : § def __init__ ( self ) : § super ( ) . __init__ ( "Priestess of Elune", 6, CHARACTER_CLASS . ALL, CARD_RARITY . COMMON, battlecry=Battlecry ( Heal ( 4 ) , HeroSelector ( ) ) ) § § def create_minion ( self, player ) : § return Minion ( 5, 4 ) § pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad
class BattleAxe ( WeaponCard ) : § def __init__ ( self ) : § super ( ) . __init__ ( "Battle Axe", 2, CHARACTER_CLASS . WARRIOR, CARD_RARITY . FREE, False ) § § def create_weapon ( self, player ) : § return Weapon ( 2, 2 ) § pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad
class LilExorcist ( MinionCard ) : § def __init__ ( self ) : § super ( ) . __init__ ( "Lil' Exorcist", 3, CHARACTER_CLASS . ALL, CARD_RARITY . COMMON, battlecry=Battlecry ( Give ( [Buff ( ChangeAttack ( Count ( MinionSelector ( IsType ( MINION_TYPE . BEAST ) ) ) ) , Buff ( ChangeHealth ( Count ( MinionSelector ( IsType ( MINION_TYPE . BEAST ) ) ) ) ) , value=0 ) ) ) § § def create_minion ( self, player ) : § return Minion ( 4, 4 ) § pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad
class Abomination ( SpellCard ) : § def __init__ ( self ) : § super ( ) . __init__ ( "Abomination", 5, CHARACTER_CLASS . WARLOCK, CARD_RARITY . FREE, target_func=hearthbreaker . targeting . find_spell_target ) § § def use ( self, player, game ) : § super ( ) . use ( player, game ) § targets = copy . copy ( game . other_player . minions ) § targets . extend ( player . game . current_player . minions ) § for minion in targets: § minion . damage ( player . effective_spell_damage ( 2 ) , self ) § pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad
class Treant ( SpellCard ) : § def __init__ ( self ) : § super ( ) . __init__ ( "Treant", 1, CHARACTER_CLASS . DRUID, CARD_RARITY . FREE ) § § def use ( self, player, game ) : § super ( ) . use ( player, game ) § self . target . add_buff ( Buff ( ChangeAttack ( 2 ) ) ) § pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad
class VioletApprentice ( MinionCard ) : § def __init__ ( self ) : § super ( ) . __init__ ( 3 and 5, CHARACTER_CLASS . ALL, CARD_RARITY . FREE, minion_type=MINION_TYPE . DRAGON ) § § def create_minion ( self, player ) : § return Minion ( 3, 3 ) § pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad
class QuickShot ( SpellCard ) : § def __init__ ( self ) : § super ( ) . __init__ ( "Quick Shot", 2, CHARACTER_CLASS . WARLOCK, CARD_RARITY . COMMON, target_func=hearthbreaker . targeting . find_minion_spell_target ) § § def use ( self, player, game ) : § super ( ) . use ( player, game ) § self . target . damage ( 3, self ) § if len ( player . hand ) > 0 and len ( player . minions ) < 7 § self . target . change_attack ( 1 ) § pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad
class Hex ( SpellCard ) : § def __init__ ( self ) : § super ( ) . __init__ ( "Hex", 3, CHARACTER_CLASS . MAGE, CARD_RARITY . FREE, target_func=hearthbreaker . targeting . find_minion_spell_target ) § § def use ( self, player, game ) : § super ( ) . use ( player, game ) § § self . target . add_buff ( Buff ( ManaChange ( -3 ) ) ) § pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad
class SearingTotem ( MinionCard ) : § def __init__ ( self ) : § super ( ) . __init__ ( "Searing Totem", 1, CHARACTER_CLASS . SHAMAN, CARD_RARITY . FREE, False, MINION_TYPE . TOTEM ) § § def create_minion ( self, player ) : § return Minion ( 1, 1 ) § pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad
class Misha ( MinionCard ) : § def __init__ ( self ) : § super ( ) . __init__ ( "Misha", 3, CHARACTER_CLASS . ALL, CARD_RARITY . COMMON, False, minion_type=MINION_TYPE . BEAST ) § § def create_minion ( self, player ) : § return Minion ( 1, 4, taunt=True ) § pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad
class SilverHandKnight ( MinionCard ) : § def __init__ ( self ) : § super ( ) . __init__ ( "Silver Hand Knight", 5, CHARACTER_CLASS . ALL, CARD_RARITY . COMMON ) § § def create_minion ( self, player ) : § return Minion ( 4, 2, charge=True ) § pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad
class SpectralSpider ( MinionCard ) : § def __init__ ( self ) : § super ( ) . __init__ ( "Spectral Spider", 1, CHARACTER_CLASS . ALL, CARD_RARITY . FREE, minion_type=MINION_TYPE . DRAGON ) § § def create_minion ( self, player ) : § return Minion ( 2, 1 ) § pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad
class WrathOfAirTotem ( MinionCard ) : § def __init__ ( self ) : § super ( ) . __init__ ( "Wrath of Air Totem", 1, CHARACTER_CLASS . SHAMAN, CARD_RARITY . FREE, False, MINION_TYPE . TOTEM ) § § def create_minion ( self, player ) : § return Minion ( 0, 2, spell_damage=1 ) § pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad
class Pyroblast ( SpellCard ) : § def __init__ ( self ) : § super ( ) . __init__ ( "Lava Shock", 1, CHARACTER_CLASS . DRUID, CARD_RARITY . EPIC, target_func=hearthbreaker . targeting . find_spell_target ) § § def use ( self, player, game ) : § super ( ) . use ( player, game ) § self . target . damage ( 4, self ) § player . draw ( ) § pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad
class ShieldedMinibot ( MinionCard ) : § def __init__ ( self ) : § super ( ) . __init__ ( "Shielded Minibot", 2, CHARACTER_CLASS . ALL, CARD_RARITY . COMMON, minion_type=MINION_TYPE . MECH ) § § def create_minion ( self, player ) : § return Minion ( 2, 1, divine_shield=True ) § pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad
class StonesplinterTrogg ( MinionCard ) : § def __init__ ( self ) : § super ( ) . __init__ ( "Stonesplinter Trogg", 2, CHARACTER_CLASS . ALL, CARD_RARITY . COMMON ) § § def create_minion ( self, player ) : § return Minion ( 4, 5, effects=[Effect ( SpellCast ( ) , ActionTag ( Give ( ChangeAttack ( 2 ) ) , SelfSelector ( ) ) ) ] ) § pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad
class Cogmaster ( WeaponCard ) : § def __init__ ( self ) : § super ( ) . __init__ ( "Cogmaster", 1, CHARACTER_CLASS . ROGUE, CARD_RARITY . EPIC, battlecry=Battlecry ( Damage ( 2 ) , CharacterSelector ( None, BothPlayer ( ) ) , GreaterThan ( Count ( MinionSelector ( IsType ( MINION_TYPE . MECH ) ) , value=0 ) ) ) ) § § def create_weapon ( self, player ) : § return Weapon ( 2, 3 ) § pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad
class AncestorsCall ( SpellCard ) : § def __init__ ( self ) : § super ( ) . __init__ ( "Arcane Blast", 1, CHARACTER_CLASS . MAGE, CARD_RARITY . EPIC, target_func=hearthbreaker . targeting . find_minion_spell_target ) § § def use ( self, player, game ) : § super ( ) . use ( player, game ) § self . target . damage ( player . effective_spell_damage ( 4 ) , self ) § self . target . add_buff ( Buff ( ManaChange ( -1 ) ) ) § pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad
class DruidOfTheClaw ( MinionCard ) : § def __init__ ( self ) : § super ( ) . __init__ ( "Druid of the Claw", 5, CHARACTER_CLASS . WARLOCK, CARD_RARITY . COMMON, minion_type=MINION_TYPE . DEMON ) § § def create_minion ( self, player ) : § return Minion ( 4, 4, effects=[Effect ( Damaged ( ) , ActionTag ( Give ( BuffUntil ( Immune ( ) , AttackCompleted ( ) ) ) , SelfSelector ( ) ) ) ] ) § pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad
class CallPet ( MinionCard ) : § def __init__ ( self ) : § super ( ) . __init__ ( "Call Pet", 2, CHARACTER_CLASS . ALL, CARD_RARITY . RARE ) § § def create_minion ( self, player ) : § return Minion ( 3, 5, deathrattle=Deathrattle ( Summon ( ) ) , PlayerSelector ( ) ) ) § pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad
class GuardianOfKings ( MinionCard ) : § def __init__ ( self ) : § super ( ) . __init__ ( "Guardian of Kings", 7, CHARACTER_CLASS . PALADIN, CARD_RARITY . LEGENDARY, battlecry=Battlecry ( Give ( [Buff ( ChangeAttack ( 1 ) ) , Buff ( ChangeHealth ( 2 ) ) ] ) , SelfSelector ( ) ) ) § § def create_minion ( self, player ) : § return Minion ( 5, 6 ) § pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad
class MadBomber ( MinionCard ) : § def __init__ ( self ) : § super ( ) . __init__ ( "Mad Bomber", 2, CHARACTER_CLASS . ALL, CARD_RARITY . RARE, battlecry=Battlecry ( Damage ( 1 ) , CharacterSelector ( players=BothPlayer ( ) , picker=RandomPicker ( 3 ) ) ) ) § § def create_minion ( self, player ) : § return Minion ( 5, 4 ) § pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad
class OgreMagi ( MinionCard ) : § def __init__ ( self ) : § super ( ) . __init__ ( "Ogre Magi", 4, CHARACTER_CLASS . ALL, CARD_RARITY . EPIC ) § § def create_minion ( self, player ) : § return Minion ( 1, 4, spell_damage=1 ) § pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad
class PilotedShredder ( MinionCard ) : § def __init__ ( self ) : § super ( ) . __init__ ( "Piloted Shredder", 4, CHARACTER_CLASS . ALL, CARD_RARITY . EPIC, minion_type=MINION_TYPE . MECH ) § § def create_minion ( self, player ) : § return Minion ( 4, 6, deathrattle=Deathrattle ( Summon ( CardQuery ( conditions=[ManaCost ( 2 ) , IsMinion ( ) ] ) ) , PlayerSelector ( ) ) ) § pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad
class Abomination ( MinionCard ) : § def __init__ ( self ) : § super ( ) . __init__ ( "Abomination", 5, CHARACTER_CLASS . PALADIN, CARD_RARITY . RARE ) § § def create_minion ( self, player ) : § return Minion ( 3, 4, effects=[Effect ( TurnEnded ( ) , ActionTag ( Damage ( 2 ) , CharacterSelector ( players=BothPlayer ( ) ) ) , taunt=True ) § pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad
class MurlocWarleader ( MinionCard ) : § def __init__ ( self ) : § super ( ) . __init__ ( "Murloc Warleader", 2, CHARACTER_CLASS . SHAMAN, CARD_RARITY . EPIC, minion_type=MINION_TYPE . MURLOC ) § § def create_minion ( self, player ) : § return Minion ( 4, 2, effects=[Effect ( MinionDied ( IsType ( MINION_TYPE . MURLOC ) , BothPlayer ( ) ) , ActionTag ( Give ( ChangeHealth ( 2 ) ) , SelfSelector ( ) ) ) ] ) § pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad
class Gruul ( MinionCard ) : § def __init__ ( self ) : § super ( ) . __init__ ( "Gruul", 8, CHARACTER_CLASS . ALL, CARD_RARITY . COMMON, minion_type=MINION_TYPE . PIRATE, battlecry=Battlecry ( Give ( [Buff ( ChangeAttack ( 1 ) ) , Buff ( ChangeHealth ( 1 ) ) ] ) , SelfSelector ( ) ) , GreaterThan ( Count ( MinionSelector ( IsType ( MINION_TYPE . MECH ) ) ) , value=0 ) ) ) ) § § def create_minion ( self, player ) : § return Minion ( 3, 3 ) § pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad
class GuardianOfKings ( MinionCard ) : § def __init__ ( self ) : § super ( ) . __init__ ( "The Black Knight", 6, CHARACTER_CLASS . PRIEST, CARD_RARITY . LEGENDARY, battlecry=Battlecry ( Kill ( ) , MinionSelector ( players=BothPlayer ( ) , picker=UserPicker ( ) ) ) ) § § def create_minion ( self, player ) : § return Minion ( 5, 2 ) § pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad
class HeavyAxe ( WeaponCard ) : § def __init__ ( self ) : § super ( ) . __init__ ( "Heavy Axe", 1, CHARACTER_CLASS . WARRIOR, CARD_RARITY . COMMON, False ) § § def create_weapon ( self, player ) : § return Weapon ( 4, 4 ) § pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad
class EmperorCobra ( MinionCard ) : § def __init__ ( self ) : § super ( ) . __init__ ( "Emperor Cobra", 3, CHARACTER_CLASS . ALL, CARD_RARITY . LEGENDARY, minion_type=MINION_TYPE . BEAST ) § § def create_minion ( self, player ) : § return Minion ( 6, 2, effects=[Effect ( DidDamage ( ) , ActionTag ( Kill ( ) , TargetSelector ( IsMinion ( ) ) ) ) ] ) § pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad
class MimironsHead ( MinionCard ) : § def __init__ ( self ) : § super ( ) . __init__ ( super ( ) . __init__ ( "Goblin Sapper", 3, CHARACTER_CLASS . ALL, CARD_RARITY . RARE ) § § def create_minion ( self, player ) : § return Minion ( 4, 5, 2, effects=[Effect ( SpellCast ( ) , ActionTag ( Summon ( VioletApprentice ( ) ) , PlayerSelector ( ) ) ) ] ) § pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad
class Mindgames ( MinionCard ) : § def __init__ ( self ) : § super ( ) . __init__ ( "Mindgames", 4, CHARACTER_CLASS . WARLOCK, CARD_RARITY . COMMON ) § § def create_minion ( self, player ) : § return Minion ( 3, 4, effects=[Effect ( TurnEnded ( ) , ActionTag ( AddCard ( CardQuery ( source=CARD_SOURCE . LIST, source_list=spare_part_list ) ) , PlayerSelector ( ) ) ) ] ) § pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad
class Onyxia ( MinionCard ) : § def __init__ ( self ) : § super ( ) . __init__ ( "Onyxia", 9, CHARACTER_CLASS . ALL, CARD_RARITY . LEGENDARY, minion_type=MINION_TYPE . DRAGON ) § § def create_minion ( self, player ) : § return Minion ( 3, 8, effects=[Effect ( UsedPower ( ) , ActionTag ( Draw ( ) , PlayerSelector ( ) ) ) ] ) § pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad
class DamagedGolem ( MinionCard ) : § def __init__ ( self ) : § super ( ) . __init__ ( "Damaged Golem", 6, CHARACTER_CLASS . ALL, CARD_RARITY . RARE, battlecry=Battlecry ( Give ( [Buff ( ChangeAttack ( 1 ) ) , Buff ( ChangeHealth ( 1 ) ) ] ) , MinionSelector ( HasCardName ( "Silver Hand Recruit" ) ) ) ) § § def create_minion ( self, player ) : § return Minion ( 2, 3 ) § pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad
class CairneBloodhoof ( MinionCard ) : § def __init__ ( self ) : § super ( ) . __init__ ( "Cairne Bloodhoof", 6, CHARACTER_CLASS . ALL, CARD_RARITY . LEGENDARY ) § § def create_minion ( self, player ) : § return Minion ( 4, 5, 4 ) § pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad
class Shadowflame ( SpellCard ) : § def __init__ ( self ) : § super ( ) . __init__ ( "Shadowflame", 4, CHARACTER_CLASS . ROGUE, CARD_RARITY . RARE ) § § def use ( self, player, game ) : § super ( ) . use ( player, game ) § targets = copy . copy ( game . other_player . minions ) § targets . extend ( player . game . current_player . minions ) § for minion in targets: § minion . die ( self ) § if len ( game . other_player . minions ) - 1: § minion . player . minions[index + player . hero . damage ( player . effective_spell_damage ( player . hero ) , self ) § pad pad pad pad pad pad
class YseraAwakens ( SpellCard ) : § def __init__ ( self ) : § super ( ) . __init__ ( "Ysera Awakens", 2, CHARACTER_CLASS . WARRIOR, CARD_RARITY . EPIC ) § § def use ( self, player, game ) : § super ( ) . use ( player, game ) § targets = copy . copy ( game . other_player . minions ) § targets . extend ( player . game . current_player . minions ) § targets . append ( player . hero ) § targets . append ( game . current_player . hero ) § for i in range ( 0, 3 ) : § pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad
class FinickyCloakfield ( SpellCard ) : § def __init__ ( self ) : § super ( ) . __init__ ( "Finicky Cloakfield", 1, CHARACTER_CLASS . ROGUE, CARD_RARITY . COMMON ) § § def use ( self, player, game ) : § super ( ) . use ( player, game ) § § for minion in player . minions: § if player . cards_played > 0: § player . add_effect ( Effect ( TurnEnded ( ) , ActionTag ( Give ( BuffUntil ( ChangeAttack ( 2 ) , TurnEnded ( ) ) ) ] ) § pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad
class Whelp ( MinionCard ) : § def __init__ ( self ) : § super ( ) . __init__ ( "Whelp", 1, CHARACTER_CLASS . PALADIN, CARD_RARITY . COMMON, False, minion_type=MINION_TYPE . DRAGON ) § § def create_minion ( self, player ) : § return Minion ( 1, 1 ) § pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad
class Soulfire ( MinionCard ) : § def __init__ ( self ) : § super ( ) . __init__ ( "Soulfire", 5, CHARACTER_CLASS . WARLOCK, CARD_RARITY . RARE, minion_type=MINION_TYPE . DEMON, battlecry=Battlecry ( Damage ( 2 ) , CharacterSelector ( players=EnemyPlayer ( ) , picker=RandomPicker ( ) ) ) ) § § def create_minion ( self, player ) : § return Minion ( 5, 4 ) § pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad
class Neptulon ( MinionCard ) : § def __init__ ( self ) : § super ( ) . __init__ ( "Dust Devil", 5, CHARACTER_CLASS . SHAMAN, CARD_RARITY . EPIC ) § § def create_minion ( self, player ) : § return Minion ( 3, 7, auras=[Aura ( ManaChange ( 3 ) , CardSelector ( condition=IsMinion ( ) ) ) ] ) § pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad
class IceBarrier ( SecretCard ) : § def __init__ ( self ) : § super ( ) . __init__ ( "Ice Barrier", 3, CHARACTER_CLASS . HUNTER, CARD_RARITY . COMMON ) § § def activate ( self, player ) : § player . game . current_player . bind ( "character_attack", self . _reveal ) § § def deactivate ( self, player ) : § player . game . current_player . unbind ( "character_attack", self . _reveal ) § § def _reveal ( self, attacker, target ) : § if isinstance ( attacker, Minion ) and not attacker . removed: § attacker . bounce ( ) § for i in range ( 0, 2 ) : § EOS EOS EOS EOS EOS EOS EOS EOS EOS EOS EOS EOS EOS EOS EOS
class Whelp ( MinionCard ) : § def __init__ ( self ) : § super ( ) . __init__ ( "Whelp", 1, CHARACTER_CLASS . ALL, CARD_RARITY . COMMON, False, minion_type=MINION_TYPE . DRAGON ) § § def create_minion ( self, player ) : § return Minion ( 1, 1 ) § pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad
class Treant ( MinionCard ) : § def __init__ ( self ) : § super ( ) . __init__ ( "Treant", 1, CHARACTER_CLASS . ALL, CARD_RARITY . COMMON ) § § def create_minion ( self, _ ) : § return Minion ( 2, 2 ) § pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad
class Lightbomb ( SpellCard ) : § def __init__ ( self ) : § super ( ) . __init__ ( "Lightbomb", 6, CHARACTER_CLASS . PALADIN, CARD_RARITY . RARE ) § § def use ( self, player, game ) : § super ( ) . use ( player, game ) § § for minion in copy . copy ( game . other_player . minions ) : § minion . damage ( player . effective_spell_damage ( 2 ) , self ) § § player . draw ( ) § pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad
class DreadInfernal ( MinionCard ) : § def __init__ ( self ) : § super ( ) . __init__ ( "Dread Infernal", 6, CHARACTER_CLASS . WARLOCK, CARD_RARITY . COMMON, minion_type=MINION_TYPE . DEMON, battlecry=Battlecry ( Damage ( 1 ) , CharacterSelector ( players=BothPlayer ( ) ) ) ) § § def create_minion ( self, player ) : § return Minion ( 6, 6 ) § pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad
class MAGE, ( MinionCard ) : § def __init__ ( self ) : § super ( ) . __init__ ( "Goblin Blastmage", 4, CHARACTER_CLASS . MAGE, CARD_RARITY . RARE, minion_type=MINION_TYPE . BEAST, battlecry=Battlecry ( Give ( Buff ( ChangeAttack ( Count ( MinionSelector ( IsType ( MINION_TYPE . MECH ) ) , BothPlayer ( ) ) ) , value=0 ) ) ) § § def create_minion ( self, player ) : § return Minion ( 3, 3 ) § pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad
class ALL, ( MinionCard ) : § def __init__ ( self ) : § super ( ) . __init__ ( "Secretkeeper", 1, CHARACTER_CLASS . ALL, CARD_RARITY . RARE ) § § def create_minion ( self, player ) : § return Minion ( 1, 2, effects=[Effect ( SpellCast ( ) , ActionTag ( Give ( ChangeAttack ( 1 ) ) , SelfSelector ( ) ) ) ] ) § pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad
class 2, ( MinionCard ) : § def __init__ ( self ) : § super ( ) . __init__ ( self, player ) : § § super ( ) . __init__ ( player, game ) § for i in range ( 0, 2 ) : § return Minion ( 2, auras=[Aura ( ManaChange ( -1 ) , CardSelector ( condition=IsMinion ( ) ) ) ] ) § pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad
class SecretCard ( SpellCard ) : § def __init__ ( self ) : § super ( ) . __init__ ( "Ice Block", 3, CHARACTER_CLASS . HUNTER, CARD_RARITY . RARE ) § § def use ( self, player, game ) : § super ( ) . use ( player, game ) § § for i in range ( 0, 2 ) : § if len ( player . minions ) < 7: § card_name = game . random_choice ( player . minions ) § card . summon ( player, game, len ( player . minions ) ) § player . hand . append ( player . trigger ( "card_drawn", chosen_card ) § player . hero . increase_armor ( SelfSelector ( ) ) § player . trigger ( "card_drawn", EOS EOS EOS
class Spellbender ( SecretCard ) : § def __init__ ( self ) : § super ( ) . __init__ ( "Spellbender", 3, CHARACTER_CLASS . PALADIN, CARD_RARITY . COMMON ) § § def _reveal ( self, card, index ) : § if card . is_spell ( ) : § if len ( game . player . minions ) < 7 and not attacker . copy ( self . player . minions ) < 7 § mirror = self . player . minions[-1] § super ( ) . reveal ( ) § § def activate ( self, player ) : § player . game . current_player . bind ( "character_attack", self . _reveal ) § § def deactivate ( self, player ) : § player ) : § player . game .
class DruidOfTheFlame ( MinionCard ) : § def __init__ ( self ) : § super ( ) . __init__ ( "Druid of the Flame", 3, CHARACTER_CLASS . DRUID, CARD_RARITY . COMMON ) § § def create_minion ( self, player ) : § return Minion ( 2, 7, auras=[Aura ( ChangeAttack ( 2 ) , MinionSelector ( Adjacent ( ) ) ) ] ) § pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad
class Avenge ( SecretCard ) : § def __init__ ( self ) : § super ( ) . __init__ ( "Avenge", 1, CHARACTER_CLASS . PALADIN, CARD_RARITY . COMMON ) § § def _reveal ( self, dead_minion, attacker ) : § if len ( [minion for minion in self . player . minions if not minion . dead] ) > 0: § target = self . player . game . random_choice ( self . player . minions ) § target . change_attack ( 3 ) § target . increase_health ( 2 ) § super ( ) . reveal ( ) § pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad
class ShadowWordDeath ( SpellCard ) : § def __init__ ( self ) : § super ( ) . __init__ ( "Shadow Word: Death", 3, CHARACTER_CLASS . PRIEST, CARD_RARITY . RARE, target_func=hearthbreaker . targeting . find_enemy_minion_spell_target ) § § def use ( self, player, game ) : § super ( ) . use ( player, game ) § § self . target . die ( self ) § for minion in player . minions: § minion . heal ( player . effective_heal_power ( 4 ) , self ) § pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad
class HolyFire ( SpellCard ) : § def __init__ ( self ) : § super ( ) . __init__ ( "Holy Fire", 6, CHARACTER_CLASS . WARLOCK, CARD_RARITY . RARE, target_func=hearthbreaker . targeting . find_minion_spell_target ) § § def use ( self, player, game ) : § super ( ) . use ( player, game ) § § self . target . die ( self ) § game . other_player . hero . heal ( player . effective_heal_power ( 4 ) , self ) § pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad
class Spellbender ( MinionCard ) : § def __init__ ( self ) : § super ( ) . __init__ ( "Spellbender", 3, CHARACTER_CLASS . MAGE, CARD_RARITY . EPIC ) § § def create_minion ( self, player ) : § return Minion ( 3, 1, deathrattle=Deathrattle ( Give ( [Buff ( ChangeAttack ( 3 ) ) , Buff ( ChangeHealth ( 3 ) ) ] ) , SelfSelector ( ) ) ) § pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad
class And ( MinionCard ) : § def __init__ ( self ) : § super ( ) . __init__ ( "Sorcerer's Apprentice", 0, CHARACTER_CLASS . WARLOCK, CARD_RARITY . COMMON ) § § def create_minion ( self, player ) : § return Minion ( 4, 4, auras=[Aura ( ManaChange ( ) , CardSelector ( condition=IsMinion ( ) ) ) , Aura ( ChangeHealth ( ) , SelfSelector ( ) ) ] ) § pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad
class WhirlingZapomatic ( MinionCard ) : § def __init__ ( self ) : § super ( ) . __init__ ( "Whirling Zap-o-matic", 2, CHARACTER_CLASS . ALL, CARD_RARITY . COMMON, minion_type=MINION_TYPE . MECH ) § § def create_minion ( self, player ) : § return Minion ( 3, 3, taunt=True ) § pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad
class ( SpellCard ) : § def __init__ ( self ) : § super ( ) . __init__ ( 2, CHARACTER_CLASS . WARRIOR, CARD_RARITY . RARE ) § § def use ( self, player, game ) : § super ( ) . use ( player, game ) § targets = hearthbreaker . targeting . find_minion_spell_target ) § for i in range ( 0, 2 ) : § if player . hero . health <= 12: § self . target . change_attack ( 1 ) § else: § self . target . change_attack ( 1 ) § pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad
class VioletApprentice ( MinionCard ) : § def __init__ ( self ) : § super ( ) . __init__ ( "Violet Apprentice", 0, CHARACTER_CLASS . ALL, CARD_RARITY . COMMON, False, minion_type=MINION_TYPE . MECH ) § § def create_minion ( self, player ) : § return Minion ( 1, 1 ) § pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad
class Whelp ( MinionCard ) : § def __init__ ( self ) : § super ( ) . __init__ ( "Whelp", 1, CHARACTER_CLASS . ALL, CARD_RARITY . COMMON, False, minion_type=MINION_TYPE . DRAGON ) § § def create_minion ( self, player ) : § return Minion ( 1, 1 ) § pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad
class VolcanicDrake ( MinionCard ) : § def __init__ ( self ) : § super ( ) . __init__ ( "Volcanic Drake", 6, CHARACTER_CLASS . ALL, CARD_RARITY . COMMON, minion_type=MINION_TYPE . DRAGON, battlecry=Battlecry ( Give ( [Buff ( ChangeAttack ( 1 ) ) , Buff ( ChangeHealth ( 1 ) ) ] ) , SelfSelector ( ) ) ) § § def create_minion ( self, player ) : § return Minion ( 3, 2 ) § pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad
class VolcanicDrake ( MinionCard ) : § def __init__ ( self ) : § super ( ) . __init__ ( "Volcanic Drake", 6, CHARACTER_CLASS . ALL, CARD_RARITY . COMMON, minion_type=MINION_TYPE . DRAGON, battlecry=Battlecry ( Summon ( Whelp ( ) , 2 ) , PlayerSelector ( ) ) ) § § def create_minion ( self, player ) : § return Minion ( 4, 4 ) § pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad
class DragonsBreath ( SpellCard ) : § def __init__ ( self ) : § super ( ) . __init__ ( "Dragon's Breath", 5, CHARACTER_CLASS . PALADIN, CARD_RARITY . COMMON, target_func=hearthbreaker . targeting . find_spell_target, buffs=[Buff ( ManaChange ( Count ( DeadMinionSelector ( players=BothPlayer ( ) ) ) , -1 ) ) ] ) § § def use ( self, player, game ) : § super ( ) . use ( player, game ) § self . target . damage ( player . effective_spell_damage ( 4 ) , self ) § pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad pad
